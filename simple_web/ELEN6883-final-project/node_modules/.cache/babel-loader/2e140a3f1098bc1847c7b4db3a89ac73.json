{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\n\nvar Scope =\n/** @class */\nfunction () {\n  function Scope() {\n    /** Flag if notifiying is happening. */\n    this._notifyingListeners = false;\n    /** Callback for client to receive scope changes. */\n\n    this._scopeListeners = [];\n    /** Callback list that will be called after {@link applyToEvent}. */\n\n    this._eventProcessors = [];\n    /** Array of breadcrumbs. */\n\n    this._breadcrumbs = [];\n    /** User */\n\n    this._user = {};\n    /** Tags */\n\n    this._tags = {};\n    /** Extra */\n\n    this._extra = {};\n    /** Contexts */\n\n    this._contexts = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n\n\n  Scope.clone = function (scope) {\n    var newScope = new Scope();\n\n    if (scope) {\n      newScope._breadcrumbs = __spread(scope._breadcrumbs);\n      newScope._tags = __assign({}, scope._tags);\n      newScope._extra = __assign({}, scope._extra);\n      newScope._contexts = __assign({}, scope._contexts);\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = __spread(scope._eventProcessors);\n    }\n\n    return newScope;\n  };\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n\n\n  Scope.prototype.addScopeListener = function (callback) {\n    this._scopeListeners.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addEventProcessor = function (callback) {\n    this._eventProcessors.push(callback);\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setUser = function (user) {\n    this._user = user || {};\n\n    if (this._session) {\n      this._session.update({\n        user: user\n      });\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getUser = function () {\n    return this._user;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTags = function (tags) {\n    this._tags = __assign(__assign({}, this._tags), tags);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTag = function (key, value) {\n    var _a;\n\n    this._tags = __assign(__assign({}, this._tags), (_a = {}, _a[key] = value, _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtras = function (extras) {\n    this._extra = __assign(__assign({}, this._extra), extras);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtra = function (key, extra) {\n    var _a;\n\n    this._extra = __assign(__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setFingerprint = function (fingerprint) {\n    this._fingerprint = fingerprint;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setLevel = function (level) {\n    this._level = level;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTransactionName = function (name) {\n    this._transactionName = name;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n\n\n  Scope.prototype.setTransaction = function (name) {\n    return this.setTransactionName(name);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setContext = function (key, context) {\n    var _a;\n\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = __assign(__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSpan = function (span) {\n    this._span = span;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getSpan = function () {\n    return this._span;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getTransaction = function () {\n    var _a, _b, _c, _d; // often, this span will be a transaction, but it's not guaranteed to be\n\n\n    var span = this.getSpan(); // try it the new way first\n\n    if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) {\n      return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction;\n    } // fallback to the old way (known bug: this only finds transactions with sampled = true)\n\n\n    if ((_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0 ? void 0 : _d.spans[0]) {\n      return span.spanRecorder.spans[0];\n    } // neither way found a transaction\n\n\n    return undefined;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSession = function (session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getSession = function () {\n    return this._session;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.update = function (captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      var updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = __assign(__assign({}, this._tags), captureContext._tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext._extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext._contexts);\n\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext;\n      this._tags = __assign(__assign({}, this._tags), captureContext.tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext.extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext.contexts);\n\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clear = function () {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {\n    var mergedBreadcrumb = __assign({\n      timestamp: dateTimestampInSeconds()\n    }, breadcrumb);\n\n    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? __spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : __spread(this._breadcrumbs, [mergedBreadcrumb]);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clearBreadcrumbs = function () {\n    this._breadcrumbs = [];\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n\n\n  Scope.prototype.applyToEvent = function (event, hint) {\n    var _a;\n\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = __assign(__assign({}, this._extra), event.extra);\n    }\n\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = __assign(__assign({}, this._tags), event.tags);\n    }\n\n    if (this._user && Object.keys(this._user).length) {\n      event.user = __assign(__assign({}, this._user), event.user);\n    }\n\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = __assign(__assign({}, this._contexts), event.contexts);\n    }\n\n    if (this._level) {\n      event.level = this._level;\n    }\n\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    } // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n\n\n    if (this._span) {\n      event.contexts = __assign({\n        trace: this._span.getTraceContext()\n      }, event.contexts);\n      var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name;\n\n      if (transactionName) {\n        event.tags = __assign({\n          transaction: transactionName\n        }, event.tags);\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = __spread(event.breadcrumbs || [], this._breadcrumbs);\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    return this._notifyEventProcessors(__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);\n  };\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n\n\n  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {\n    var _this = this;\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    return new SyncPromise(function (resolve, reject) {\n      var processor = processors[index];\n\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor(__assign({}, event), hint);\n\n        if (isThenable(result)) {\n          result.then(function (final) {\n            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n          }).then(null, reject);\n        } else {\n          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  };\n  /**\n   * This will be called on every set call.\n   */\n\n\n  Scope.prototype._notifyScopeListeners = function () {\n    var _this = this; // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n\n\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n\n      this._scopeListeners.forEach(function (callback) {\n        callback(_this);\n      });\n\n      this._notifyingListeners = false;\n    }\n  };\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n\n\n  Scope.prototype._applyFingerprint = function (event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event\n\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    } // If we have no data at all, remove empty array default\n\n\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  };\n\n  return Scope;\n}();\n\nexport { Scope };\n/**\n * Retruns the global event processors.\n */\n\nfunction getGlobalEventProcessors() {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  var global = getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\n\n\nexport function addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}","map":{"version":3,"mappings":"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","names":["dateTimestampInSeconds","getGlobalObject","isPlainObject","isThenable","SyncPromise","Scope","scope","newScope","_breadcrumbs","__spread","_tags","__assign","_extra","_contexts","_user","_level","_span","_session","_transactionName","_fingerprint","_eventProcessors","callback","_scopeListeners","push","user","update","_notifyScopeListeners","tags","key","value","_a","extras","extra","fingerprint","level","name","setTransactionName","context","span","getSpan","transaction","_b","_c","spanRecorder","_d","spans","undefined","session","captureContext","updatedScope","Object","keys","length","contexts","breadcrumb","maxBreadcrumbs","mergedBreadcrumb","timestamp","slice","event","hint","trace","getTraceContext","transactionName","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","processors","index","resolve","reject","processor","result","then","final","_this","_notifyingListeners","forEach","Array","isArray","concat","global","__SENTRY__","globalEventProcessors","addGlobalEventProcessor"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/hub/src/scope.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // often, this span will be a transaction, but it's not guaranteed to be\n    const span = this.getSpan() as undefined | (Span & { spanRecorder: { spans: Span[] } });\n\n    // try it the new way first\n    if (span?.transaction) {\n      return span?.transaction;\n    }\n\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if (span?.spanRecorder?.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n\n    // neither way found a transaction\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction?.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  const global = getGlobalObject<any>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"]},"metadata":{},"sourceType":"module"}