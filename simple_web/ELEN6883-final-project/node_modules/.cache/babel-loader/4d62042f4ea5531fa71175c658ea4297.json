{"ast":null,"code":"import { isString } from './is';\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\nexport function htmlTreeAsString(elem) {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var MAX_OUTPUT_LEN = 80;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = ' > ';\n    var sepLength = separator.length;\n    var nextStr = void 0; // eslint-disable-next-line no-plusplus\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem); // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n        break;\n      }\n\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\nfunction _htmlElementAsString(el) {\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  if (elem.id) {\n    out.push(\"#\" + elem.id);\n  } // eslint-disable-next-line prefer-const\n\n\n  className = elem.className;\n\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n\n    for (i = 0; i < classes.length; i++) {\n      out.push(\".\" + classes[i]);\n    }\n  }\n\n  var allowedAttrs = ['type', 'name', 'title', 'alt'];\n\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n\n    if (attr) {\n      out.push(\"[\" + key + \"=\\\"\" + attr + \"\\\"]\");\n    }\n  }\n\n  return out.join('');\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AAEA;;;;;;;AAMA,OAAM,SAAUC,gBAAV,CAA2BC,IAA3B,EAAwC;AAK5C;AACA;AACA;AACA;AACA,MAAI;AACF,QAAIC,WAAW,GAAGD,IAAlB;AACA,QAAME,mBAAmB,GAAG,CAA5B;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAMC,GAAG,GAAG,EAAZ;AACA,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,GAAG,GAAG,CAAV;AACA,QAAMC,SAAS,GAAG,KAAlB;AACA,QAAMC,SAAS,GAAGD,SAAS,CAACE,MAA5B;AACA,QAAIC,OAAO,SAAX,CATE,CAWF;;AACA,WAAOT,WAAW,IAAII,MAAM,KAAKH,mBAAjC,EAAsD;AACpDQ,aAAO,GAAGC,oBAAoB,CAACV,WAAD,CAA9B,CADoD,CAEpD;AACA;AACA;AACA;;AACA,UAAIS,OAAO,KAAK,MAAZ,IAAuBL,MAAM,GAAG,CAAT,IAAcC,GAAG,GAAGF,GAAG,CAACK,MAAJ,GAAaD,SAAnB,GAA+BE,OAAO,CAACD,MAAvC,IAAiDN,cAA1F,EAA2G;AACzG;AACD;;AAEDC,SAAG,CAACQ,IAAJ,CAASF,OAAT;AAEAJ,SAAG,IAAII,OAAO,CAACD,MAAf;AACAR,iBAAW,GAAGA,WAAW,CAACY,UAA1B;AACD;;AAED,WAAOT,GAAG,CAACU,OAAJ,GAAcC,IAAd,CAAmBR,SAAnB,CAAP;AACD,GA7BD,CA6BE,OAAOS,GAAP,EAAY;AACZ,WAAO,WAAP;AACD;AACF;AAED;;;;;;AAKA,SAASL,oBAAT,CAA8BM,EAA9B,EAAyC;AACvC,MAAMjB,IAAI,GAAGiB,EAAb;AAOA,MAAMb,GAAG,GAAG,EAAZ;AACA,MAAIc,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,CAAJ;;AAEA,MAAI,CAACtB,IAAD,IAAS,CAACA,IAAI,CAACuB,OAAnB,EAA4B;AAC1B,WAAO,EAAP;AACD;;AAEDnB,KAAG,CAACQ,IAAJ,CAASZ,IAAI,CAACuB,OAAL,CAAaC,WAAb,EAAT;;AACA,MAAIxB,IAAI,CAACyB,EAAT,EAAa;AACXrB,OAAG,CAACQ,IAAJ,CAAS,MAAIZ,IAAI,CAACyB,EAAlB;AACD,GAtBsC,CAwBvC;;;AACAP,WAAS,GAAGlB,IAAI,CAACkB,SAAjB;;AACA,MAAIA,SAAS,IAAIpB,QAAQ,CAACoB,SAAD,CAAzB,EAAsC;AACpCC,WAAO,GAAGD,SAAS,CAACQ,KAAV,CAAgB,KAAhB,CAAV;;AACA,SAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,OAAO,CAACV,MAAxB,EAAgCa,CAAC,EAAjC,EAAqC;AACnClB,SAAG,CAACQ,IAAJ,CAAS,MAAIO,OAAO,CAACG,CAAD,CAApB;AACD;AACF;;AACD,MAAMK,YAAY,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,KAA1B,CAArB;;AACA,OAAKL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,YAAY,CAAClB,MAA7B,EAAqCa,CAAC,EAAtC,EAA0C;AACxCF,OAAG,GAAGO,YAAY,CAACL,CAAD,CAAlB;AACAD,QAAI,GAAGrB,IAAI,CAAC4B,YAAL,CAAkBR,GAAlB,CAAP;;AACA,QAAIC,IAAJ,EAAU;AACRjB,SAAG,CAACQ,IAAJ,CAAS,MAAIQ,GAAJ,GAAO,KAAP,GAAYC,IAAZ,GAAgB,KAAzB;AACD;AACF;;AACD,SAAOjB,GAAG,CAACW,IAAJ,CAAS,EAAT,CAAP;AACD","names":["isString","htmlTreeAsString","elem","currentElem","MAX_TRAVERSE_HEIGHT","MAX_OUTPUT_LEN","out","height","len","separator","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","id","split","allowedAttrs","getAttribute"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/utils/src/browser.ts"],"sourcesContent":["import { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  // eslint-disable-next-line prefer-const\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n"]},"metadata":{},"sourceType":"module"}