{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchCompilerOutput = void 0;\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst constants_1 = require(\"../../internal/constants\");\n\nconst reporter_1 = require(\"../../internal/sentry/reporter\");\n\nconst log = (0, debug_1.default)(\"hardhat:core:compilation-watcher\");\n\nasync function watchCompilerOutput(provider, paths) {\n  const chokidar = await Promise.resolve().then(() => __importStar(require(\"chokidar\")));\n  const buildInfoDir = path.join(paths.artifacts, constants_1.BUILD_INFO_DIR_NAME);\n\n  const addCompilationResult = async buildInfo => {\n    try {\n      log(\"Adding new compilation result to the node\");\n      const {\n        input,\n        output,\n        solcVersion\n      } = await fs_extra_1.default.readJSON(buildInfo, {\n        encoding: \"utf8\"\n      });\n      await provider.request({\n        method: \"hardhat_addCompilationResult\",\n        params: [solcVersion, input, output]\n      });\n    } catch (error) {\n      console.warn(chalk_1.default.yellow(\"There was a problem adding the new compiler result. Run Hardhat with --verbose to learn more.\"));\n      log(\"Last compilation result couldn't be added. Please report this to help us improve Hardhat.\\n\", error);\n\n      if (error instanceof Error) {\n        reporter_1.Reporter.reportError(error);\n      }\n    }\n  };\n\n  log(`Watching changes on '${buildInfoDir}'`);\n  chokidar.watch(buildInfoDir, {\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 250,\n      pollInterval: 50\n    }\n  }).on(\"add\", addCompilationResult);\n}\n\nexports.watchCompilerOutput = watchCompilerOutput;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAGA,MAAMA,GAAG,GAAG,qBAAM,kCAAN,CAAZ;;AAEO,eAAeC,mBAAf,CACLC,QADK,EAELC,KAFK,EAEoB;AAEzB,QAAMC,QAAQ,GAAG,wDAAa,UAAb,GAAjB;AAEA,QAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,SAAhB,EAA2BC,+BAA3B,CAArB;;AAEA,QAAMC,oBAAoB,GAAG,MAAOC,SAAP,IAA4B;AACvD,QAAI;AACFX,SAAG,CAAC,2CAAD,CAAH;AAEA,YAAM;AAAEY,aAAF;AAASC,cAAT;AAAiBC;AAAjB,UAAiC,MAAMC,mBAAQC,QAAR,CAAiBL,SAAjB,EAA4B;AACvEM,gBAAQ,EAAE;AAD6D,OAA5B,CAA7C;AAIA,YAAMf,QAAQ,CAACgB,OAAT,CAAiB;AACrBC,cAAM,EAAE,8BADa;AAErBC,cAAM,EAAE,CAACN,WAAD,EAAcF,KAAd,EAAqBC,MAArB;AAFa,OAAjB,CAAN;AAID,KAXD,CAWE,OAAOQ,KAAP,EAAc;AACdC,aAAO,CAACC,IAAR,CACEC,gBAAMC,MAAN,CACE,+FADF,CADF;AAMAzB,SAAG,CACD,6FADC,EAEDqB,KAFC,CAAH;;AAKA,UAAIA,KAAK,YAAYK,KAArB,EAA4B;AAC1BC,4BAASC,WAAT,CAAqBP,KAArB;AACD;AACF;AACF,GA5BD;;AA8BArB,KAAG,CAAC,wBAAwBK,YAAY,GAArC,CAAH;AAEAD,UAAQ,CACLyB,KADH,CACSxB,YADT,EACuB;AACnByB,iBAAa,EAAE,IADI;AAEnBC,oBAAgB,EAAE;AAChBC,wBAAkB,EAAE,GADJ;AAEhBC,kBAAY,EAAE;AAFE;AAFC,GADvB,EAQGC,EARH,CAQM,KARN,EAQaxB,oBARb;AASD;;AAjDDyB","names":["log","watchCompilerOutput","provider","paths","chokidar","buildInfoDir","path","join","artifacts","constants_1","addCompilationResult","buildInfo","input","output","solcVersion","fs_extra_1","readJSON","encoding","request","method","params","error","console","warn","chalk_1","yellow","Error","reporter_1","reportError","watch","ignoreInitial","awaitWriteFinish","stabilityThreshold","pollInterval","on","exports"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/builtin-tasks/utils/watch.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport debug from \"debug\";\nimport fsExtra from \"fs-extra\";\nimport * as path from \"path\";\n\nimport { BUILD_INFO_DIR_NAME } from \"../../internal/constants\";\nimport { Reporter } from \"../../internal/sentry/reporter\";\nimport { EIP1193Provider, ProjectPathsConfig } from \"../../types\";\n\nconst log = debug(\"hardhat:core:compilation-watcher\");\n\nexport async function watchCompilerOutput(\n  provider: EIP1193Provider,\n  paths: ProjectPathsConfig\n) {\n  const chokidar = await import(\"chokidar\");\n\n  const buildInfoDir = path.join(paths.artifacts, BUILD_INFO_DIR_NAME);\n\n  const addCompilationResult = async (buildInfo: string) => {\n    try {\n      log(\"Adding new compilation result to the node\");\n\n      const { input, output, solcVersion } = await fsExtra.readJSON(buildInfo, {\n        encoding: \"utf8\",\n      });\n\n      await provider.request({\n        method: \"hardhat_addCompilationResult\",\n        params: [solcVersion, input, output],\n      });\n    } catch (error) {\n      console.warn(\n        chalk.yellow(\n          \"There was a problem adding the new compiler result. Run Hardhat with --verbose to learn more.\"\n        )\n      );\n\n      log(\n        \"Last compilation result couldn't be added. Please report this to help us improve Hardhat.\\n\",\n        error\n      );\n\n      if (error instanceof Error) {\n        Reporter.reportError(error);\n      }\n    }\n  };\n\n  log(`Watching changes on '${buildInfoDir}'`);\n\n  chokidar\n    .watch(buildInfoDir, {\n      ignoreInitial: true,\n      awaitWriteFinish: {\n        stabilityThreshold: 250,\n        pollInterval: 50,\n      },\n    })\n    .on(\"add\", addCompilationResult);\n}\n"]},"metadata":{},"sourceType":"script"}