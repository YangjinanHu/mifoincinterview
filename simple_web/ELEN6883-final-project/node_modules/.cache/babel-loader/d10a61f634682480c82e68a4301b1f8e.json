{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyWorkaround = void 0;\n/**\n * This function applies a workaround to an ANTLR issue that arises when used\n * with Immutable.js.\n *\n * ANTLR defines String.prototype.hashCode, and Immutable.js uses hashCode\n * functions internally (for equality), including on strings.\n *\n * If the parser is required lazily (which it normally is) in the middle of an\n * execution, the custom state managers can break, because we'd be redefining\n * the String's equality function as seen by Immutable.js.\n *\n * By always including the parser we make the equality function's definition\n * stable during the entire execution.\n */\n\nfunction applyWorkaround() {\n  require(\"@solidity-parser/parser\");\n}\n\nexports.applyWorkaround = applyWorkaround;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;AAcA,SAAgBA,eAAhB,GAA+B;AAC7BC,SAAO,CAAC,yBAAD,CAAP;AACD;;AAFDC","names":["applyWorkaround","require","exports"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/util/antlr-prototype-pollution-workaround.ts"],"sourcesContent":["/**\n * This function applies a workaround to an ANTLR issue that arises when used\n * with Immutable.js.\n *\n * ANTLR defines String.prototype.hashCode, and Immutable.js uses hashCode\n * functions internally (for equality), including on strings.\n *\n * If the parser is required lazily (which it normally is) in the middle of an\n * execution, the custom state managers can break, because we'd be redefining\n * the String's equality function as seen by Immutable.js.\n *\n * By always including the parser we make the equality function's definition\n * stable during the entire execution.\n */\nexport function applyWorkaround() {\n  require(\"@solidity-parser/parser\");\n}\n"]},"metadata":{},"sourceType":"script"}