{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeCompiler = exports.Compiler = void 0;\n\nconst child_process_1 = require(\"child_process\");\n\nconst fs = __importStar(require(\"fs\"));\n\nclass Compiler {\n  constructor(_pathToSolcJs) {\n    this._pathToSolcJs = _pathToSolcJs;\n  }\n\n  async compile(input) {\n    const solc = await this.getSolc();\n    const jsonOutput = solc.compile(JSON.stringify(input));\n    return JSON.parse(jsonOutput);\n  }\n\n  async getSolc() {\n    if (this._loadedSolc !== undefined) {\n      return this._loadedSolc;\n    }\n\n    const {\n      default: solcWrapper\n    } = await Promise.resolve().then(() => __importStar(require(\"solc/wrapper\")));\n    this._loadedSolc = solcWrapper(this._loadCompilerSources(this._pathToSolcJs));\n    return this._loadedSolc;\n  }\n  /**\n   * This function loads the compiler sources bypassing any require hook.\n   *\n   * The compiler is a huge asm.js file, and using a simple require may trigger\n   * babel/register and hang the process.\n   */\n\n\n  _loadCompilerSources(compilerPath) {\n    const Module = module.constructor;\n    const previousHook = Module._extensions[\".js\"];\n\n    Module._extensions[\".js\"] = function (module, filename) {\n      const content = fs.readFileSync(filename, \"utf8\");\n\n      Object.getPrototypeOf(module)._compile.call(module, content, filename);\n    };\n\n    const loadedSolc = require(compilerPath);\n\n    Module._extensions[\".js\"] = previousHook;\n    return loadedSolc;\n  }\n\n}\n\nexports.Compiler = Compiler;\n\nclass NativeCompiler {\n  constructor(_pathToSolc) {\n    this._pathToSolc = _pathToSolc;\n  }\n\n  async compile(input) {\n    const output = await new Promise((resolve, reject) => {\n      const process = (0, child_process_1.exec)(`${this._pathToSolc} --standard-json`, {\n        maxBuffer: 1024 * 1024 * 500\n      }, (err, stdout) => {\n        if (err !== null) {\n          return reject(err);\n        }\n\n        resolve(stdout);\n      });\n      process.stdin.write(JSON.stringify(input));\n      process.stdin.end();\n    });\n    return JSON.parse(output);\n  }\n\n}\n\nexports.NativeCompiler = NativeCompiler;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,MAAaA,QAAb,CAAqB;AAGnBC,cAAoBC,aAApB,EAAyC;AAArB;AAAyB;;AAEzB,QAAPC,OAAO,CAACC,KAAD,EAAW;AAC7B,UAAMC,IAAI,GAAG,MAAM,KAAKC,OAAL,EAAnB;AAEA,UAAMC,UAAU,GAAGF,IAAI,CAACF,OAAL,CAAaK,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAb,CAAnB;AACA,WAAOI,IAAI,CAACE,KAAL,CAAWH,UAAX,CAAP;AACD;;AAEmB,QAAPD,OAAO;AAClB,QAAI,KAAKK,WAAL,KAAqBC,SAAzB,EAAoC;AAClC,aAAO,KAAKD,WAAZ;AACD;;AAED,UAAM;AAAEE,aAAO,EAAEC;AAAX,QAA2B,wDAAa,cAAb,GAAjC;AACA,SAAKH,WAAL,GAAmBG,WAAW,CAC5B,KAAKC,oBAAL,CAA0B,KAAKb,aAA/B,CAD4B,CAA9B;AAIA,WAAO,KAAKS,WAAZ;AACD;AAED;;;;;;;;AAMQI,sBAAoB,CAACC,YAAD,EAAqB;AAC/C,UAAMC,MAAM,GAAGC,MAAM,CAACjB,WAAtB;AACA,UAAMkB,YAAY,GAAGF,MAAM,CAACG,WAAP,CAAmB,KAAnB,CAArB;;AAEAH,UAAM,CAACG,WAAP,CAAmB,KAAnB,IAA4B,UAC1BF,MAD0B,EAE1BG,QAF0B,EAEV;AAEhB,YAAMC,OAAO,GAAGC,EAAE,CAACC,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,CAAhB;;AACAI,YAAM,CAACC,cAAP,CAAsBR,MAAtB,EAA8BS,QAA9B,CAAuCC,IAAvC,CAA4CV,MAA5C,EAAoDI,OAApD,EAA6DD,QAA7D;AACD,KAND;;AAQA,UAAMQ,UAAU,GAAGC,OAAO,CAACd,YAAD,CAA1B;;AAEAC,UAAM,CAACG,WAAP,CAAmB,KAAnB,IAA4BD,YAA5B;AAEA,WAAOU,UAAP;AACD;;AAhDkB;;AAArBE;;AAmDA,MAAaC,cAAb,CAA2B;AACzB/B,cAAoBgC,WAApB,EAAuC;AAAnB;AAAuB;;AAEvB,QAAP9B,OAAO,CAACC,KAAD,EAAW;AAC7B,UAAM8B,MAAM,GAAW,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AAC3D,YAAMC,OAAO,GAAG,0BACd,GAAG,KAAKL,WAAW,kBADL,EAEd;AACEM,iBAAS,EAAE,OAAO,IAAP,GAAc;AAD3B,OAFc,EAKd,CAACC,GAAD,EAAMC,MAAN,KAAgB;AACd,YAAID,GAAG,KAAK,IAAZ,EAAkB;AAChB,iBAAOH,MAAM,CAACG,GAAD,CAAb;AACD;;AACDJ,eAAO,CAACK,MAAD,CAAP;AACD,OAVa,CAAhB;AAaAH,aAAO,CAACI,KAAR,CAAeC,KAAf,CAAqBnC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAArB;AACAkC,aAAO,CAACI,KAAR,CAAeE,GAAf;AACD,KAhB4B,CAA7B;AAkBA,WAAOpC,IAAI,CAACE,KAAL,CAAWwB,MAAX,CAAP;AACD;;AAvBwB;;AAA3BH","names":["Compiler","constructor","_pathToSolcJs","compile","input","solc","getSolc","jsonOutput","JSON","stringify","parse","_loadedSolc","undefined","default","solcWrapper","_loadCompilerSources","compilerPath","Module","module","previousHook","_extensions","filename","content","fs","readFileSync","Object","getPrototypeOf","_compile","call","loadedSolc","require","exports","NativeCompiler","_pathToSolc","output","Promise","resolve","reject","process","maxBuffer","err","stdout","stdin","write","end"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/solidity/compiler/index.ts"],"sourcesContent":["import { exec } from \"child_process\";\nimport * as fs from \"fs\";\n\nexport class Compiler {\n  private _loadedSolc?: any;\n\n  constructor(private _pathToSolcJs: string) {}\n\n  public async compile(input: any) {\n    const solc = await this.getSolc();\n\n    const jsonOutput = solc.compile(JSON.stringify(input));\n    return JSON.parse(jsonOutput);\n  }\n\n  public async getSolc() {\n    if (this._loadedSolc !== undefined) {\n      return this._loadedSolc;\n    }\n\n    const { default: solcWrapper } = await import(\"solc/wrapper\");\n    this._loadedSolc = solcWrapper(\n      this._loadCompilerSources(this._pathToSolcJs)\n    );\n\n    return this._loadedSolc;\n  }\n\n  /**\n   * This function loads the compiler sources bypassing any require hook.\n   *\n   * The compiler is a huge asm.js file, and using a simple require may trigger\n   * babel/register and hang the process.\n   */\n  private _loadCompilerSources(compilerPath: string) {\n    const Module = module.constructor as any;\n    const previousHook = Module._extensions[\".js\"];\n\n    Module._extensions[\".js\"] = function (\n      module: NodeJS.Module,\n      filename: string\n    ) {\n      const content = fs.readFileSync(filename, \"utf8\");\n      Object.getPrototypeOf(module)._compile.call(module, content, filename);\n    };\n\n    const loadedSolc = require(compilerPath);\n\n    Module._extensions[\".js\"] = previousHook;\n\n    return loadedSolc;\n  }\n}\n\nexport class NativeCompiler {\n  constructor(private _pathToSolc: string) {}\n\n  public async compile(input: any) {\n    const output: string = await new Promise((resolve, reject) => {\n      const process = exec(\n        `${this._pathToSolc} --standard-json`,\n        {\n          maxBuffer: 1024 * 1024 * 500,\n        },\n        (err, stdout) => {\n          if (err !== null) {\n            return reject(err);\n          }\n          resolve(stdout);\n        }\n      );\n\n      process.stdin!.write(JSON.stringify(input));\n      process.stdin!.end();\n    });\n\n    return JSON.parse(output);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}