{"ast":null,"code":"'use strict';\n\nvar Test = require('../test');\n\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants.EVENT_FILE_PRE_REQUIRE;\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function() {\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function() {\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function() {\n *       ok('foo'.length == 3);\n *     });\n *\n * @param {Suite} suite Root suite.\n */\n\n\nmodule.exports = function qUnitInterface(suite) {\n  var suites = [suite];\n  suite.on(EVENT_FILE_PRE_REQUIRE, function (context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function (title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n    /**\n     * Exclusive Suite.\n     */\n\n\n    context.suite.only = function (title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n\n    context.test = function (title, fn) {\n      var test = new Test(title, fn);\n      test.file = file;\n      suites[0].addTest(test);\n      return test;\n    };\n    /**\n     * Exclusive test-case.\n     */\n\n\n    context.test.only = function (title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n\nmodule.exports.description = 'QUnit style';","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/interfaces/qunit.js"],"names":["Test","require","EVENT_FILE_PRE_REQUIRE","constants","module","exports","qUnitInterface","suite","suites","on","context","file","mocha","common","before","after","beforeEach","afterEach","run","options","delay","runWithSuite","title","length","shift","create","fn","only","test","addTest","skip","retries","description"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Test = require('../test');\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants\n  .EVENT_FILE_PRE_REQUIRE;\n\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function() {\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function() {\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function() {\n *       ok('foo'.length == 3);\n *     });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function qUnitInterface(suite) {\n  var suites = [suite];\n\n  suite.on(EVENT_FILE_PRE_REQUIRE, function(context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function(title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n\n    /**\n     * Exclusive Suite.\n     */\n\n    context.suite.only = function(title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn) {\n      var test = new Test(title, fn);\n      test.file = file;\n      suites[0].addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n\nmodule.exports.description = 'QUnit style';\n"]},"metadata":{},"sourceType":"script"}