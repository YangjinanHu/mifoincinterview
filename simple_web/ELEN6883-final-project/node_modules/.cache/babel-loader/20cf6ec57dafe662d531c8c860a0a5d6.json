{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnvHardhatArguments = exports.getEnvVariablesMap = exports.paramNameToEnvVariable = void 0;\n\nconst ArgumentsParser_1 = require(\"../../cli/ArgumentsParser\");\n\nconst unsafe_1 = require(\"../../util/unsafe\");\n\nconst errors_1 = require(\"../errors\");\n\nconst errors_list_1 = require(\"../errors-list\");\n\nconst HARDHAT_ENV_ARGUMENT_PREFIX = \"HARDHAT_\";\n\nfunction paramNameToEnvVariable(paramName) {\n  // We create it starting from the result of ArgumentsParser.paramNameToCLA\n  // so it's easier to explain and understand their equivalences.\n  return ArgumentsParser_1.ArgumentsParser.paramNameToCLA(paramName).replace(ArgumentsParser_1.ArgumentsParser.PARAM_PREFIX, HARDHAT_ENV_ARGUMENT_PREFIX).replace(/-/g, \"_\").toUpperCase();\n}\n\nexports.paramNameToEnvVariable = paramNameToEnvVariable;\n\nfunction getEnvVariablesMap(hardhatArguments) {\n  const values = {};\n\n  for (const [name, value] of Object.entries(hardhatArguments)) {\n    if (value === undefined) {\n      continue;\n    }\n\n    values[paramNameToEnvVariable(name)] = value.toString();\n  }\n\n  return values;\n}\n\nexports.getEnvVariablesMap = getEnvVariablesMap;\n\nfunction getEnvHardhatArguments(paramDefinitions, envVariables) {\n  const envArgs = {};\n\n  for (const paramName of (0, unsafe_1.unsafeObjectKeys)(paramDefinitions)) {\n    const definition = paramDefinitions[paramName];\n    const envVarName = paramNameToEnvVariable(paramName);\n    const rawValue = envVariables[envVarName];\n\n    if (rawValue !== undefined) {\n      try {\n        envArgs[paramName] = definition.type.parse(paramName, rawValue);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_ENV_VAR_VALUE, {\n            varName: envVarName,\n            value: rawValue\n          }, error);\n        } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n        throw error;\n      }\n    } else {\n      envArgs[paramName] = definition.defaultValue;\n    }\n  } // TODO: This is a little type-unsafe, but we know we have all the needed arguments\n\n\n  return envArgs;\n}\n\nexports.getEnvHardhatArguments = getEnvHardhatArguments;","map":{"version":3,"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AAEA,MAAMA,2BAA2B,GAAG,UAApC;;AAEA,SAAgBC,sBAAhB,CAAuCC,SAAvC,EAAwD;AACtD;AACA;AACA,SAAOC,kCAAgBC,cAAhB,CAA+BF,SAA/B,EACJG,OADI,CACIF,kCAAgBG,YADpB,EACkCN,2BADlC,EAEJK,OAFI,CAEI,IAFJ,EAEU,GAFV,EAGJE,WAHI,EAAP;AAID;;AAPDC;;AASA,SAAgBC,kBAAhB,CAAmCC,gBAAnC,EAAqE;AAGnE,QAAMC,MAAM,GAAiC,EAA7C;;AAEA,OAAK,MAAM,CAACC,IAAD,EAAOC,KAAP,CAAX,IAA4BC,MAAM,CAACC,OAAP,CAAeL,gBAAf,CAA5B,EAA8D;AAC5D,QAAIG,KAAK,KAAKG,SAAd,EAAyB;AACvB;AACD;;AAEDL,UAAM,CAACV,sBAAsB,CAACW,IAAD,CAAvB,CAAN,GAAuCC,KAAK,CAACI,QAAN,EAAvC;AACD;;AAED,SAAON,MAAP;AACD;;AAdDH;;AAgBA,SAAgBU,sBAAhB,CACEC,gBADF,EAEEC,YAFF,EAE0B;AAExB,QAAMC,OAAO,GAAQ,EAArB;;AAEA,OAAK,MAAMnB,SAAX,IAAwB,+BAAiBiB,gBAAjB,CAAxB,EAA4D;AAC1D,UAAMG,UAAU,GAAGH,gBAAgB,CAACjB,SAAD,CAAnC;AACA,UAAMqB,UAAU,GAAGtB,sBAAsB,CAACC,SAAD,CAAzC;AACA,UAAMsB,QAAQ,GAAGJ,YAAY,CAACG,UAAD,CAA7B;;AAEA,QAAIC,QAAQ,KAAKR,SAAjB,EAA4B;AAC1B,UAAI;AACFK,eAAO,CAACnB,SAAD,CAAP,GAAqBoB,UAAU,CAACG,IAAX,CAAgBC,KAAhB,CAAsBxB,SAAtB,EAAiCsB,QAAjC,CAArB;AACD,OAFD,CAEE,OAAOG,KAAP,EAAc;AACd,YAAIA,KAAK,YAAYC,KAArB,EAA4B;AAC1B,gBAAM,IAAIC,qBAAJ,CACJC,qBAAOC,SAAP,CAAiBC,qBADb,EAEJ;AACEC,mBAAO,EAAEV,UADX;AAEEV,iBAAK,EAAEW;AAFT,WAFI,EAMJG,KANI,CAAN;AAQD,SAVa,CAYd;;;AACA,cAAMA,KAAN;AACD;AACF,KAlBD,MAkBO;AACLN,aAAO,CAACnB,SAAD,CAAP,GAAqBoB,UAAU,CAACY,YAAhC;AACD;AACF,GA9BuB,CAgCxB;;;AACA,SAAOb,OAAP;AACD;;AApCDb","names":["HARDHAT_ENV_ARGUMENT_PREFIX","paramNameToEnvVariable","paramName","ArgumentsParser_1","paramNameToCLA","replace","PARAM_PREFIX","toUpperCase","exports","getEnvVariablesMap","hardhatArguments","values","name","value","Object","entries","undefined","toString","getEnvHardhatArguments","paramDefinitions","envVariables","envArgs","definition","envVarName","rawValue","type","parse","error","Error","errors_1","errors_list_1","ARGUMENTS","INVALID_ENV_VAR_VALUE","varName","defaultValue"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/core/params/env-variables.ts"],"sourcesContent":["import ProcessEnv = NodeJS.ProcessEnv;\n\nimport { HardhatArguments, HardhatParamDefinitions } from \"../../../types\";\nimport { ArgumentsParser } from \"../../cli/ArgumentsParser\";\nimport { unsafeObjectKeys } from \"../../util/unsafe\";\nimport { HardhatError } from \"../errors\";\nimport { ERRORS } from \"../errors-list\";\n\nconst HARDHAT_ENV_ARGUMENT_PREFIX = \"HARDHAT_\";\n\nexport function paramNameToEnvVariable(paramName: string): string {\n  // We create it starting from the result of ArgumentsParser.paramNameToCLA\n  // so it's easier to explain and understand their equivalences.\n  return ArgumentsParser.paramNameToCLA(paramName)\n    .replace(ArgumentsParser.PARAM_PREFIX, HARDHAT_ENV_ARGUMENT_PREFIX)\n    .replace(/-/g, \"_\")\n    .toUpperCase();\n}\n\nexport function getEnvVariablesMap(hardhatArguments: HardhatArguments): {\n  [envVar: string]: string;\n} {\n  const values: { [envVar: string]: string } = {};\n\n  for (const [name, value] of Object.entries(hardhatArguments)) {\n    if (value === undefined) {\n      continue;\n    }\n\n    values[paramNameToEnvVariable(name)] = value.toString();\n  }\n\n  return values;\n}\n\nexport function getEnvHardhatArguments(\n  paramDefinitions: HardhatParamDefinitions,\n  envVariables: ProcessEnv\n): HardhatArguments {\n  const envArgs: any = {};\n\n  for (const paramName of unsafeObjectKeys(paramDefinitions)) {\n    const definition = paramDefinitions[paramName];\n    const envVarName = paramNameToEnvVariable(paramName);\n    const rawValue = envVariables[envVarName];\n\n    if (rawValue !== undefined) {\n      try {\n        envArgs[paramName] = definition.type.parse(paramName, rawValue);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new HardhatError(\n            ERRORS.ARGUMENTS.INVALID_ENV_VAR_VALUE,\n            {\n              varName: envVarName,\n              value: rawValue,\n            },\n            error\n          );\n        }\n\n        // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n        throw error;\n      }\n    } else {\n      envArgs[paramName] = definition.defaultValue;\n    }\n  }\n\n  // TODO: This is a little type-unsafe, but we know we have all the needed arguments\n  return envArgs as HardhatArguments;\n}\n"]},"metadata":{},"sourceType":"script"}