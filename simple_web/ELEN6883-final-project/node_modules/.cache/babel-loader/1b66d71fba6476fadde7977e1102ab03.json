{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { logger, timestampWithMs } from '@sentry/utils';\nimport { SpanRecorder } from './span';\nimport { SpanStatus } from './spanstatus';\nimport { Transaction } from './transaction';\nexport var DEFAULT_IDLE_TIMEOUT = 1000;\n/**\n * @inheritDoc\n */\n\nvar IdleTransactionSpanRecorder =\n/** @class */\nfunction (_super) {\n  __extends(IdleTransactionSpanRecorder, _super);\n\n  function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n    if (transactionSpanId === void 0) {\n      transactionSpanId = '';\n    }\n\n    var _this = _super.call(this, maxlen) || this;\n\n    _this._pushActivity = _pushActivity;\n    _this._popActivity = _popActivity;\n    _this.transactionSpanId = transactionSpanId;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  IdleTransactionSpanRecorder.prototype.add = function (span) {\n    var _this = this; // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n\n\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = function (endTimestamp) {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n\n        _this._popActivity(span.spanId);\n      }; // We should only push new activities if the span does not have an end timestamp.\n\n\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    _super.prototype.add.call(this, span);\n  };\n\n  return IdleTransactionSpanRecorder;\n}(SpanRecorder);\n\nexport { IdleTransactionSpanRecorder };\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\n\nvar IdleTransaction =\n/** @class */\nfunction (_super) {\n  __extends(IdleTransaction, _super);\n\n  function IdleTransaction(transactionContext, _idleHub, // The time to wait in ms until the idle transaction will be finished. Default: 1000\n  _idleTimeout, // If an idle transaction should be put itself on and off the scope automatically.\n  _onScope) {\n    if (_idleTimeout === void 0) {\n      _idleTimeout = DEFAULT_IDLE_TIMEOUT;\n    }\n\n    if (_onScope === void 0) {\n      _onScope = false;\n    }\n\n    var _this = _super.call(this, transactionContext, _idleHub) || this;\n\n    _this._idleHub = _idleHub;\n    _this._idleTimeout = _idleTimeout;\n    _this._onScope = _onScope; // Activities store a list of active spans\n\n    _this.activities = {}; // Stores reference to the timeout that calls _beat().\n\n    _this._heartbeatTimer = 0; // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n\n    _this._heartbeatCounter = 0; // We should not use heartbeat if we finished a transaction\n\n    _this._finished = false;\n    _this._beforeFinishCallbacks = [];\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub); // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n\n      logger.log(\"Setting idle transaction on scope. Span ID: \" + _this.spanId);\n\n      _idleHub.configureScope(function (scope) {\n        return scope.setSpan(_this);\n      });\n    }\n\n    return _this;\n  }\n  /** {@inheritDoc} */\n\n\n  IdleTransaction.prototype.finish = function (endTimestamp) {\n    var e_1, _a;\n\n    var _this = this;\n\n    if (endTimestamp === void 0) {\n      endTimestamp = timestampWithMs();\n    }\n\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      try {\n        for (var _b = __values(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var callback = _c.value;\n          callback(this, endTimestamp);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === _this.spanId) {\n          return true;\n        } // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n\n\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus(SpanStatus.Cancelled);\n          logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        var keepSpan = span.startTimestamp < endTimestamp;\n\n        if (!keepSpan) {\n          logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n        }\n\n        return keepSpan;\n      }); // this._onScope is true if the transaction was previously on the scope.\n\n      if (this._onScope) {\n        clearActiveTransaction(this._idleHub);\n      }\n\n      logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    return _super.prototype.finish.call(this, endTimestamp);\n  };\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n\n\n  IdleTransaction.prototype.registerBeforeFinishCallback = function (callback) {\n    this._beforeFinishCallbacks.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  IdleTransaction.prototype.initSpanRecorder = function (maxlen) {\n    var _this = this;\n\n    if (!this.spanRecorder) {\n      this._initTimeout = setTimeout(function () {\n        if (!_this._finished) {\n          _this.finish();\n        }\n      }, this._idleTimeout);\n\n      var pushActivity = function (id) {\n        if (_this._finished) {\n          return;\n        }\n\n        _this._pushActivity(id);\n      };\n\n      var popActivity = function (id) {\n        if (_this._finished) {\n          return;\n        }\n\n        _this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen); // Start heartbeat so that transactions do not run forever.\n\n      logger.log('Starting heartbeat');\n\n      this._pingHeartbeat();\n    }\n\n    this.spanRecorder.add(this);\n  };\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n\n\n  IdleTransaction.prototype._pushActivity = function (spanId) {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n\n    logger.log(\"[Tracing] pushActivity: \" + spanId);\n    this.activities[spanId] = true;\n    logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  };\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n\n\n  IdleTransaction.prototype._popActivity = function (spanId) {\n    var _this = this;\n\n    if (this.activities[spanId]) {\n      logger.log(\"[Tracing] popActivity \" + spanId); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete this.activities[spanId];\n      logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      var timeout = this._idleTimeout; // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n\n      var end_1 = timestampWithMs() + timeout / 1000;\n      setTimeout(function () {\n        if (!_this._finished) {\n          _this.finish(end_1);\n        }\n      }, timeout);\n    }\n  };\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n\n\n  IdleTransaction.prototype._beat = function () {\n    clearTimeout(this._heartbeatTimer); // We should not be running heartbeat if the idle transaction is finished.\n\n    if (this._finished) {\n      return;\n    }\n\n    var keys = Object.keys(this.activities);\n    var heartbeatString = keys.length ? keys.reduce(function (prev, current) {\n      return prev + current;\n    }) : '';\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      logger.log(\"[Tracing] Transaction finished because of no change for 3 heart beats\");\n      this.setStatus(SpanStatus.DeadlineExceeded);\n      this.setTag('heartbeat', 'failed');\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  };\n  /**\n   * Pings the heartbeat\n   */\n\n\n  IdleTransaction.prototype._pingHeartbeat = function () {\n    var _this = this;\n\n    logger.log(\"pinging Heartbeat -> current counter: \" + this._heartbeatCounter);\n    this._heartbeatTimer = setTimeout(function () {\n      _this._beat();\n    }, 5000);\n  };\n\n  return IdleTransaction;\n}(Transaction);\n\nexport { IdleTransaction };\n/**\n * Reset active transaction on scope\n */\n\nfunction clearActiveTransaction(hub) {\n  if (hub) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      var transaction = scope.getTransaction();\n\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["logger","timestampWithMs","SpanRecorder","SpanStatus","Transaction","DEFAULT_IDLE_TIMEOUT","__extends","_pushActivity","_popActivity","transactionSpanId","maxlen","_super","_this","IdleTransactionSpanRecorder","span","spanId","finish","endTimestamp","undefined","add","call","transactionContext","_idleHub","_idleTimeout","_onScope","clearActiveTransaction","log","configureScope","setSpan","IdleTransaction","_finished","activities","spanRecorder","Date","toISOString","op","_beforeFinishCallbacks","_c","callback","spans","filter","setStatus","Cancelled","JSON","stringify","keepSpan","startTimestamp","push","_initTimeout","setTimeout","pushActivity","id","popActivity","_pingHeartbeat","clearTimeout","Object","keys","length","timeout","end_1","_heartbeatTimer","heartbeatString","reduce","prev","current","_prevHeartbeatString","_heartbeatCounter","DeadlineExceeded","setTag","_beat","hub","scope","getScope","transaction","getTransaction"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/tracing/src/idletransaction.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\n\nimport { Span, SpanRecorder } from './span';\nimport { SpanStatus } from './spanstatus';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string = '',\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Stores reference to the timeout that calls _beat().\n  private _heartbeatTimer: number = 0;\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  // If a transaction is created and no activities are added, we want to make sure that\n  // it times out properly. This is cleared and not used when activities are added.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _initTimeout: any;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub?: Hub,\n    // The time to wait in ms until the idle transaction will be finished. Default: 1000\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    // If an idle transaction should be put itself on and off the scope automatically.\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus(SpanStatus.Cancelled);\n          logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          logger.log(\n            '[Tracing] discarding Span since it happened after Transaction was finished',\n            JSON.stringify(span, undefined, 2),\n          );\n        }\n        return keepSpan;\n      });\n\n      // this._onScope is true if the transaction was previously on the scope.\n      if (this._onScope) {\n        clearActiveTransaction(this._idleHub);\n      }\n\n      logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      this._initTimeout = setTimeout(() => {\n        if (!this._finished) {\n          this.finish();\n        }\n      }, this._idleTimeout);\n\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const end = timestampWithMs() + timeout / 1000;\n\n      setTimeout(() => {\n        if (!this._finished) {\n          this.finish(end);\n        }\n      }, timeout);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    clearTimeout(this._heartbeatTimer);\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const keys = Object.keys(this.activities);\n    const heartbeatString = keys.length ? keys.reduce((prev: string, current: string) => prev + current) : '';\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      logger.log(`[Tracing] Transaction finished because of no change for 3 heart beats`);\n      this.setStatus(SpanStatus.DeadlineExceeded);\n      this.setTag('heartbeat', 'failed');\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    this._heartbeatTimer = (setTimeout(() => {\n      this._beat();\n    }, 5000) as unknown) as number;\n  }\n}\n\n/**\n * Reset active transaction on scope\n */\nfunction clearActiveTransaction(hub?: Hub): void {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      const transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}