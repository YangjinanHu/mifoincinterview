{"ast":null,"code":"const url = require('url');\n\nconst path = require('path');\n\nconst requireOrImport = async file => {\n  file = path.resolve(file);\n\n  if (path.extname(file) === '.mjs') {\n    return import(url.pathToFileURL(file));\n  } // This is currently the only known way of figuring out whether a file is CJS or ESM.\n  // If Node.js or the community establish a better procedure for that, we can fix this code.\n  // Another option here would be to always use `import()`, as this also supports CJS, but I would be\n  // wary of using it for _all_ existing test files, till ESM is fully stable.\n\n\n  try {\n    return require(file);\n  } catch (err) {\n    if (err.code === 'ERR_REQUIRE_ESM') {\n      return import(url.pathToFileURL(file));\n    } else {\n      throw err;\n    }\n  }\n};\n\nexports.loadFilesAsync = async (files, preLoadFunc, postLoadFunc) => {\n  for (const file of files) {\n    preLoadFunc(file);\n    const result = await requireOrImport(file);\n    postLoadFunc(file, result);\n  }\n};","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/esm-utils.js"],"names":["url","require","path","requireOrImport","file","resolve","extname","pathToFileURL","err","code","exports","loadFilesAsync","files","preLoadFunc","postLoadFunc","result"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,eAAe,GAAG,MAAMC,IAAN,IAAc;AACpCA,EAAAA,IAAI,GAAGF,IAAI,CAACG,OAAL,CAAaD,IAAb,CAAP;;AAEA,MAAIF,IAAI,CAACI,OAAL,CAAaF,IAAb,MAAuB,MAA3B,EAAmC;AACjC,WAAO,OAAOJ,GAAG,CAACO,aAAJ,CAAkBH,IAAlB,CAAP,CAAP;AACD,GALmC,CAMpC;AACA;AACA;AACA;;;AACA,MAAI;AACF,WAAOH,OAAO,CAACG,IAAD,CAAd;AACD,GAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACC,IAAJ,KAAa,iBAAjB,EAAoC;AAClC,aAAO,OAAOT,GAAG,CAACO,aAAJ,CAAkBH,IAAlB,CAAP,CAAP;AACD,KAFD,MAEO;AACL,YAAMI,GAAN;AACD;AACF;AACF,CAnBD;;AAqBAE,OAAO,CAACC,cAAR,GAAyB,OAAOC,KAAP,EAAcC,WAAd,EAA2BC,YAA3B,KAA4C;AACnE,OAAK,MAAMV,IAAX,IAAmBQ,KAAnB,EAA0B;AACxBC,IAAAA,WAAW,CAACT,IAAD,CAAX;AACA,UAAMW,MAAM,GAAG,MAAMZ,eAAe,CAACC,IAAD,CAApC;AACAU,IAAAA,YAAY,CAACV,IAAD,EAAOW,MAAP,CAAZ;AACD;AACF,CAND","sourcesContent":["const url = require('url');\nconst path = require('path');\n\nconst requireOrImport = async file => {\n  file = path.resolve(file);\n\n  if (path.extname(file) === '.mjs') {\n    return import(url.pathToFileURL(file));\n  }\n  // This is currently the only known way of figuring out whether a file is CJS or ESM.\n  // If Node.js or the community establish a better procedure for that, we can fix this code.\n  // Another option here would be to always use `import()`, as this also supports CJS, but I would be\n  // wary of using it for _all_ existing test files, till ESM is fully stable.\n  try {\n    return require(file);\n  } catch (err) {\n    if (err.code === 'ERR_REQUIRE_ESM') {\n      return import(url.pathToFileURL(file));\n    } else {\n      throw err;\n    }\n  }\n};\n\nexports.loadFilesAsync = async (files, preLoadFunc, postLoadFunc) => {\n  for (const file of files) {\n    preLoadFunc(file);\n    const result = await requireOrImport(file);\n    postLoadFunc(file, result);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}