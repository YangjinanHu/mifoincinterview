{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { dynamicRequire, fill, logger } from '@sentry/utils';\nvar OPERATIONS = ['aggregate', 'bulkWrite', 'countDocuments', 'createIndex', 'createIndexes', 'deleteMany', 'deleteOne', 'distinct', 'drop', 'dropIndex', 'dropIndexes', 'estimatedDocumentCount', 'findOne', 'findOneAndDelete', 'findOneAndReplace', 'findOneAndUpdate', 'indexes', 'indexExists', 'indexInformation', 'initializeOrderedBulkOp', 'insertMany', 'insertOne', 'isCapped', 'mapReduce', 'options', 'parallelCollectionScan', 'rename', 'replaceOne', 'stats', 'updateMany', 'updateOne']; // All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\n\nvar OPERATION_SIGNATURES = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update']\n};\n/** Tracing integration for mongo package */\n\nvar Mongo =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Mongo(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Mongo.id;\n    this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Mongo.prototype.setupOnce = function (_, getCurrentHub) {\n    var collection;\n\n    try {\n      var mongodbModule = dynamicRequire(module, 'mongodb');\n      collection = mongodbModule.Collection;\n    } catch (e) {\n      logger.error('Mongo Integration was unable to require `mongodb` package.');\n      return;\n    }\n\n    this._instrumentOperations(collection, this._operations, getCurrentHub);\n  };\n  /**\n   * Patches original collection methods\n   */\n\n\n  Mongo.prototype._instrumentOperations = function (collection, operations, getCurrentHub) {\n    var _this = this;\n\n    operations.forEach(function (operation) {\n      return _this._patchOperation(collection, operation, getCurrentHub);\n    });\n  };\n  /**\n   * Patches original collection to utilize our tracing functionality\n   */\n\n\n  Mongo.prototype._patchOperation = function (collection, operation, getCurrentHub) {\n    if (!(operation in collection.prototype)) return;\n\n    var getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n\n    fill(collection.prototype, operation, function (orig) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a, _b, _c;\n\n        var lastArg = args[args.length - 1];\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan(); // Check if the operation was passed a callback. (mapReduce requires a different check, as\n        // its (non-callback) arguments can also be functions.)\n\n        if (typeof lastArg !== 'function' || operation === 'mapReduce' && args.length === 2) {\n          var span_1 = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild(getSpanContext(this, operation, args));\n          return orig.call.apply(orig, __spread([this], args)).then(function (res) {\n            var _a;\n\n            (_a = span_1) === null || _a === void 0 ? void 0 : _a.finish();\n            return res;\n          });\n        }\n\n        var span = (_c = parentSpan) === null || _c === void 0 ? void 0 : _c.startChild(getSpanContext(this, operation, args.slice(0, -1)));\n        return orig.call.apply(orig, __spread([this], args.slice(0, -1), [function (err, result) {\n          var _a;\n\n          (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n          lastArg(err, result);\n        }]));\n      };\n    });\n  };\n  /**\n   * Form a SpanContext based on the user input to a given operation.\n   */\n\n\n  Mongo.prototype._getSpanContextFromOperationArguments = function (collection, operation, args) {\n    var data = {\n      collectionName: collection.collectionName,\n      dbName: collection.dbName,\n      namespace: collection.namespace\n    };\n    var spanContext = {\n      op: \"db\",\n      description: operation,\n      data: data\n    }; // If the operation takes no arguments besides `options` and `callback`, or if argument\n    // collection is disabled for this operation, just return early.\n\n    var signature = OPERATION_SIGNATURES[operation];\n    var shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;\n\n    if (!signature || !shouldDescribe) {\n      return spanContext;\n    }\n\n    try {\n      // Special case for `mapReduce`, as the only one accepting functions as arguments.\n      if (operation === 'mapReduce') {\n        var _a = __read(args, 2),\n            map = _a[0],\n            reduce = _a[1];\n\n        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n      } else {\n        for (var i = 0; i < signature.length; i++) {\n          data[signature[i]] = JSON.stringify(args[i]);\n        }\n      }\n    } catch (_oO) {// no-empty\n    }\n\n    return spanContext;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Mongo.id = 'Mongo';\n  return Mongo;\n}();\n\nexport { Mongo };","map":{"version":3,"mappings":"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","names":["dynamicRequire","fill","logger","OPERATIONS","OPERATION_SIGNATURES","bulkWrite","countDocuments","createIndex","createIndexes","deleteMany","deleteOne","distinct","dropIndex","findOne","findOneAndDelete","findOneAndReplace","findOneAndUpdate","indexExists","insertMany","insertOne","mapReduce","rename","replaceOne","updateMany","updateOne","options","Mongo","id","_operations","Array","isArray","operations","_describeOperations","describeOperations","_","getCurrentHub","collection","mongodbModule","module","Collection","e","error","_instrumentOperations","forEach","operation","_patchOperation","prototype","getSpanContext","_getSpanContextFromOperationArguments","bind","orig","args","lastArg","length","scope","getScope","parentSpan","_a","getSpan","span_1","_b","startChild","call","apply","__spread","then","res","finish","span","_c","slice","err","result","data","collectionName","dbName","namespace","spanContext","op","description","signature","shouldDescribe","includes","map","reduce","name","i","JSON","stringify","_oO"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/tracing/src/integrations/mongo.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, SpanContext } from '@sentry/types';\nimport { dynamicRequire, fill, logger } from '@sentry/utils';\n\n// This allows us to use the same array for both defaults options and the type itself.\n// (note `as const` at the end to make it a union of string literal types (i.e. \"a\" | \"b\" | ... )\n// and not just a string[])\ntype Operation = typeof OPERATIONS[number];\nconst OPERATIONS = [\n  'aggregate', // aggregate(pipeline, options, callback)\n  'bulkWrite', // bulkWrite(operations, options, callback)\n  'countDocuments', // countDocuments(query, options, callback)\n  'createIndex', // createIndex(fieldOrSpec, options, callback)\n  'createIndexes', // createIndexes(indexSpecs, options, callback)\n  'deleteMany', // deleteMany(filter, options, callback)\n  'deleteOne', // deleteOne(filter, options, callback)\n  'distinct', // distinct(key, query, options, callback)\n  'drop', // drop(options, callback)\n  'dropIndex', // dropIndex(indexName, options, callback)\n  'dropIndexes', // dropIndexes(options, callback)\n  'estimatedDocumentCount', // estimatedDocumentCount(options, callback)\n  'findOne', // findOne(query, options, callback)\n  'findOneAndDelete', // findOneAndDelete(filter, options, callback)\n  'findOneAndReplace', // findOneAndReplace(filter, replacement, options, callback)\n  'findOneAndUpdate', // findOneAndUpdate(filter, update, options, callback)\n  'indexes', // indexes(options, callback)\n  'indexExists', // indexExists(indexes, options, callback)\n  'indexInformation', // indexInformation(options, callback)\n  'initializeOrderedBulkOp', // initializeOrderedBulkOp(options, callback)\n  'insertMany', // insertMany(docs, options, callback)\n  'insertOne', // insertOne(doc, options, callback)\n  'isCapped', // isCapped(options, callback)\n  'mapReduce', // mapReduce(map, reduce, options, callback)\n  'options', // options(options, callback)\n  'parallelCollectionScan', // parallelCollectionScan(options, callback)\n  'rename', // rename(newName, options, callback)\n  'replaceOne', // replaceOne(filter, doc, options, callback)\n  'stats', // stats(options, callback)\n  'updateMany', // updateMany(filter, update, options, callback)\n  'updateOne', // updateOne(filter, update, options, callback)\n] as const;\n\n// All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\nconst OPERATION_SIGNATURES: {\n  [op in Operation]?: string[];\n} = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update'],\n};\n\ninterface MongoCollection {\n  collectionName: string;\n  dbName: string;\n  namespace: string;\n  prototype: {\n    [operation in Operation]: (...args: unknown[]) => unknown;\n  };\n}\n\ninterface MongoOptions {\n  operations?: Operation[];\n  describeOperations?: boolean | Operation[];\n}\n\n/** Tracing integration for mongo package */\nexport class Mongo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Mongo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Mongo.id;\n\n  private _operations: Operation[];\n  private _describeOperations?: boolean | Operation[];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: MongoOptions = {}) {\n    this._operations = Array.isArray(options.operations)\n      ? options.operations\n      : ((OPERATIONS as unknown) as Operation[]);\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    let collection: MongoCollection;\n\n    try {\n      const mongodbModule = dynamicRequire(module, 'mongodb') as { Collection: MongoCollection };\n      collection = mongodbModule.Collection;\n    } catch (e) {\n      logger.error('Mongo Integration was unable to require `mongodb` package.');\n      return;\n    }\n\n    this._instrumentOperations(collection, this._operations, getCurrentHub);\n  }\n\n  /**\n   * Patches original collection methods\n   */\n  private _instrumentOperations(collection: MongoCollection, operations: Operation[], getCurrentHub: () => Hub): void {\n    operations.forEach((operation: Operation) => this._patchOperation(collection, operation, getCurrentHub));\n  }\n\n  /**\n   * Patches original collection to utilize our tracing functionality\n   */\n  private _patchOperation(collection: MongoCollection, operation: Operation, getCurrentHub: () => Hub): void {\n    if (!(operation in collection.prototype)) return;\n\n    const getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n\n    fill(collection.prototype, operation, function(orig: () => void | Promise<unknown>) {\n      return function(this: unknown, ...args: unknown[]) {\n        const lastArg = args[args.length - 1];\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n\n        // Check if the operation was passed a callback. (mapReduce requires a different check, as\n        // its (non-callback) arguments can also be functions.)\n        if (typeof lastArg !== 'function' || (operation === 'mapReduce' && args.length === 2)) {\n          const span = parentSpan?.startChild(getSpanContext(this, operation, args));\n          return (orig.call(this, ...args) as Promise<unknown>).then((res: unknown) => {\n            span?.finish();\n            return res;\n          });\n        }\n\n        const span = parentSpan?.startChild(getSpanContext(this, operation, args.slice(0, -1)));\n        return orig.call(this, ...args.slice(0, -1), function(err: Error, result: unknown) {\n          span?.finish();\n          lastArg(err, result);\n        });\n      };\n    });\n  }\n\n  /**\n   * Form a SpanContext based on the user input to a given operation.\n   */\n  private _getSpanContextFromOperationArguments(\n    collection: MongoCollection,\n    operation: Operation,\n    args: unknown[],\n  ): SpanContext {\n    const data: { [key: string]: string } = {\n      collectionName: collection.collectionName,\n      dbName: collection.dbName,\n      namespace: collection.namespace,\n    };\n    const spanContext: SpanContext = {\n      op: `db`,\n      description: operation,\n      data,\n    };\n\n    // If the operation takes no arguments besides `options` and `callback`, or if argument\n    // collection is disabled for this operation, just return early.\n    const signature = OPERATION_SIGNATURES[operation];\n    const shouldDescribe = Array.isArray(this._describeOperations)\n      ? this._describeOperations.includes(operation)\n      : this._describeOperations;\n\n    if (!signature || !shouldDescribe) {\n      return spanContext;\n    }\n\n    try {\n      // Special case for `mapReduce`, as the only one accepting functions as arguments.\n      if (operation === 'mapReduce') {\n        const [map, reduce] = args as { name?: string }[];\n        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n      } else {\n        for (let i = 0; i < signature.length; i++) {\n          data[signature[i]] = JSON.stringify(args[i]);\n        }\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n\n    return spanContext;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}