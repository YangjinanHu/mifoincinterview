{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalObject, isNodeEnv, logger, uuid4 } from '@sentry/utils';\nimport { Scope } from './scope';\nimport { Session } from './session';\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\n\nexport var API_VERSION = 3;\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\n\nvar DEFAULT_BREADCRUMBS = 100;\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\n\nvar MAX_BREADCRUMBS = 100;\n/**\n * @inheritDoc\n */\n\nvar Hub =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  function Hub(client, scope, _version) {\n    if (scope === void 0) {\n      scope = new Scope();\n    }\n\n    if (_version === void 0) {\n      _version = API_VERSION;\n    }\n\n    this._version = _version;\n    /** Is a {@link Layer}[] containing the client and scope */\n\n    this._stack = [{}];\n    this.getStackTop().scope = scope;\n    this.bindClient(client);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.isOlderThan = function (version) {\n    return this._version < version;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.bindClient = function (client) {\n    var top = this.getStackTop();\n    top.client = client;\n\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.pushScope = function () {\n    // We want to clone the content of prev scope\n    var scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope: scope\n    });\n    return scope;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.popScope = function () {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.withScope = function (callback) {\n    var scope = this.pushScope();\n\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.getClient = function () {\n    return this.getStackTop().client;\n  };\n  /** Returns the scope of the top stack. */\n\n\n  Hub.prototype.getScope = function () {\n    return this.getStackTop().scope;\n  };\n  /** Returns the scope stack for domains or the process. */\n\n\n  Hub.prototype.getStack = function () {\n    return this._stack;\n  };\n  /** Returns the topmost scope layer in the order domain > local > process. */\n\n\n  Hub.prototype.getStackTop = function () {\n    return this._stack[this._stack.length - 1];\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  Hub.prototype.captureException = function (exception, hint) {\n    var eventId = this._lastEventId = uuid4();\n    var finalHint = hint; // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n\n    if (!hint) {\n      var syntheticException = void 0;\n\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception;\n      }\n\n      finalHint = {\n        originalException: exception,\n        syntheticException: syntheticException\n      };\n    }\n\n    this._invokeClient('captureException', exception, __assign(__assign({}, finalHint), {\n      event_id: eventId\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.captureMessage = function (message, level, hint) {\n    var eventId = this._lastEventId = uuid4();\n    var finalHint = hint; // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n\n    if (!hint) {\n      var syntheticException = void 0;\n\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception;\n      }\n\n      finalHint = {\n        originalException: message,\n        syntheticException: syntheticException\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, __assign(__assign({}, finalHint), {\n      event_id: eventId\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.captureEvent = function (event, hint) {\n    var eventId = this._lastEventId = uuid4();\n\n    this._invokeClient('captureEvent', event, __assign(__assign({}, hint), {\n      event_id: eventId\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.lastEventId = function () {\n    return this._lastEventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.addBreadcrumb = function (breadcrumb, hint) {\n    var _a = this.getStackTop(),\n        scope = _a.scope,\n        client = _a.client;\n\n    if (!scope || !client) return; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    var _b = client.getOptions && client.getOptions() || {},\n        _c = _b.beforeBreadcrumb,\n        beforeBreadcrumb = _c === void 0 ? null : _c,\n        _d = _b.maxBreadcrumbs,\n        maxBreadcrumbs = _d === void 0 ? DEFAULT_BREADCRUMBS : _d;\n\n    if (maxBreadcrumbs <= 0) return;\n    var timestamp = dateTimestampInSeconds();\n\n    var mergedBreadcrumb = __assign({\n      timestamp: timestamp\n    }, breadcrumb);\n\n    var finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(function () {\n      return beforeBreadcrumb(mergedBreadcrumb, hint);\n    }) : mergedBreadcrumb;\n    if (finalBreadcrumb === null) return;\n    scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setUser = function (user) {\n    var scope = this.getScope();\n    if (scope) scope.setUser(user);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setTags = function (tags) {\n    var scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setExtras = function (extras) {\n    var scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setTag = function (key, value) {\n    var scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setExtra = function (key, extra) {\n    var scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Hub.prototype.setContext = function (name, context) {\n    var scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.configureScope = function (callback) {\n    var _a = this.getStackTop(),\n        scope = _a.scope,\n        client = _a.client;\n\n    if (scope && client) {\n      callback(scope);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.run = function (callback) {\n    var oldHub = makeMain(this);\n\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.getIntegration = function (integration) {\n    var client = this.getClient();\n    if (!client) return null;\n\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Hub\");\n      return null;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.startSpan = function (context) {\n    return this._callExtensionMethod('startSpan', context);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.startTransaction = function (context, customSamplingContext) {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.traceHeaders = function () {\n    return this._callExtensionMethod('traceHeaders');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.startSession = function (context) {\n    // End existing session if there's one\n    this.endSession();\n\n    var _a = this.getStackTop(),\n        scope = _a.scope,\n        client = _a.client;\n\n    var _b = client && client.getOptions() || {},\n        release = _b.release,\n        environment = _b.environment;\n\n    var session = new Session(__assign(__assign({\n      release: release,\n      environment: environment\n    }, scope && {\n      user: scope.getUser()\n    }), context));\n\n    if (scope) {\n      scope.setSession(session);\n    }\n\n    return session;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.endSession = function () {\n    var _a = this.getStackTop(),\n        scope = _a.scope,\n        client = _a.client;\n\n    if (!scope) return;\n    var session = scope.getSession && scope.getSession();\n\n    if (session) {\n      session.close();\n\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n\n      scope.setSession();\n    }\n  };\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Hub.prototype._invokeClient = function (method) {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var _b = this.getStackTop(),\n        scope = _b.scope,\n        client = _b.client;\n\n    if (client && client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (_a = client)[method].apply(_a, __spread(args, [scope]));\n    }\n  };\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Hub.prototype._callExtensionMethod = function (method) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var carrier = getMainCarrier();\n    var sentry = carrier.__SENTRY__;\n\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n\n    logger.warn(\"Extension method \" + method + \" couldn't be found, doing nothing.\");\n  };\n\n  return Hub;\n}();\n\nexport { Hub };\n/** Returns the global shim registry. */\n\nexport function getMainCarrier() {\n  var carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return carrier;\n}\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\n\nexport function makeMain(hub) {\n  var registry = getMainCarrier();\n  var oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\n\nexport function getCurrentHub() {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier(); // If there's no hub, or its an old API, assign a new one\n\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  } // Prefer domains over global if they are there (applicable only to Node environment)\n\n\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  } // Return hub that lives on a global object\n\n\n  return getHubFromCarrier(registry);\n}\n/**\n * Returns the active domain, if one exists\n *\n * @returns The domain, or undefined if there is no active domain\n */\n\nexport function getActiveDomain() {\n  var sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\n\nfunction getHubFromActiveDomain(registry) {\n  try {\n    var activeDomain = getActiveDomain(); // If there's no active domain, just return global hub\n\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    } // If there's no hub on current domain, or it's an old API, assign a new one\n\n\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      var registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    } // Return hub that lives on a domain\n\n\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\n\n\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\n\n\nexport function getHubFromCarrier(carrier) {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) return carrier.__SENTRY__.hub;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\n\nexport function setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}","map":{"version":3,"mappings":"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","names":["consoleSandbox","dateTimestampInSeconds","getGlobalObject","isNodeEnv","logger","uuid4","Scope","Session","API_VERSION","DEFAULT_BREADCRUMBS","MAX_BREADCRUMBS","client","scope","_version","getStackTop","bindClient","Hub","version","top","setupIntegrations","clone","getScope","getStack","push","getClient","length","pop","callback","pushScope","popScope","_stack","exception","hint","eventId","_lastEventId","finalHint","syntheticException","Error","originalException","_invokeClient","__assign","event_id","message","level","event","breadcrumb","_c","beforeBreadcrumb","_d","maxBreadcrumbs","timestamp","mergedBreadcrumb","finalBreadcrumb","addBreadcrumb","Math","min","user","setUser","tags","setTags","extras","setExtras","key","value","setTag","extra","setExtra","name","context","setContext","oldHub","makeMain","integration","getIntegration","_oO","warn","id","_callExtensionMethod","customSamplingContext","endSession","release","environment","session","getUser","setSession","getSession","close","captureSession","method","args","apply","_a","__spread","carrier","getMainCarrier","sentry","__SENTRY__","extensions","hub","undefined","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","hasHubOnCarrier","isOlderThan","getHubFromActiveDomain","getActiveDomain","domain","active","activeDomain","registryHubTopStack","_Oo"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/hub/src/hub.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  SessionContext,\n  Severity,\n  Span,\n  SpanContext,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalObject, isNodeEnv, logger, uuid4 } from '@sentry/utils';\n\nimport { Carrier, DomainAsCarrier, Layer } from './interfaces';\nimport { Scope } from './scope';\nimport { Session } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 3;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    this.bindClient(client);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(context: SpanContext): Span {\n    return this._callExtensionMethod('startSpan', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    // End existing session if there's one\n    this.endSession();\n\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n    const session = new Session({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...context,\n    });\n    if (scope) {\n      scope.setSession(session);\n    }\n    return session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession && scope.getSession();\n    if (session) {\n      session.close();\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n      scope.setSession();\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const { scope, client } = this.getStackTop();\n    if (client && client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (client as any)[method](...args, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/** Returns the global shim registry. */\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Returns the active domain, if one exists\n *\n * @returns The domain, or undefined if there is no active domain\n */\nexport function getActiveDomain(): DomainAsCarrier | undefined {\n  const sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const activeDomain = getActiveDomain();\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) return carrier.__SENTRY__.hub;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}