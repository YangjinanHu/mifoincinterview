{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getCurrentHub } from '@sentry/core';\nimport { fill, logger, parseSemver } from '@sentry/utils';\nimport { cleanSpanDescription, extractUrl, isSentryRequest, normalizeRequestArgs } from './utils/http';\nvar NODE_VERSION = parseSemver(process.versions.node);\n/** http module integration */\n\nvar Http =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Http(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Http.id;\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = typeof options.tracing === 'undefined' ? false : options.tracing;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Http.prototype.setupOnce = function () {\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !this._tracing) {\n      return;\n    }\n\n    var wrappedHandlerMaker = _createWrappedRequestMethodFactory(this._breadcrumbs, this._tracing);\n\n    var httpModule = require('http');\n\n    fill(httpModule, 'get', wrappedHandlerMaker);\n    fill(httpModule, 'request', wrappedHandlerMaker); // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n\n    if (NODE_VERSION.major && NODE_VERSION.major > 8) {\n      var httpsModule = require('https');\n\n      fill(httpsModule, 'get', wrappedHandlerMaker);\n      fill(httpsModule, 'request', wrappedHandlerMaker);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Http.id = 'Http';\n  return Http;\n}();\n\nexport { Http };\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\n\nfunction _createWrappedRequestMethodFactory(breadcrumbsEnabled, tracingEnabled) {\n  return function wrappedRequestMethodFactory(originalRequestMethod) {\n    return function wrappedMethod() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      } // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n      var httpModule = this;\n      var requestArgs = normalizeRequestArgs(args);\n      var requestOptions = requestArgs[0];\n      var requestUrl = extractUrl(requestOptions); // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n\n      if (isSentryRequest(requestUrl)) {\n        return originalRequestMethod.apply(httpModule, requestArgs);\n      }\n\n      var span;\n      var parentSpan;\n      var scope = getCurrentHub().getScope();\n\n      if (scope && tracingEnabled) {\n        parentSpan = scope.getSpan();\n\n        if (parentSpan) {\n          span = parentSpan.startChild({\n            description: (requestOptions.method || 'GET') + \" \" + requestUrl,\n            op: 'request'\n          });\n          var sentryTraceHeader = span.toTraceparent();\n          logger.log(\"[Tracing] Adding sentry-trace header to outgoing request: \" + sentryTraceHeader);\n          requestOptions.headers = __assign(__assign({}, requestOptions.headers), {\n            'sentry-trace': sentryTraceHeader\n          });\n        }\n      } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n      return originalRequestMethod.apply(httpModule, requestArgs).once('response', function (res) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var req = this;\n\n        if (breadcrumbsEnabled) {\n          addRequestBreadcrumb('response', requestUrl, req, res);\n        }\n\n        if (tracingEnabled && span) {\n          if (res.statusCode) {\n            span.setHttpStatus(res.statusCode);\n          }\n\n          span.description = cleanSpanDescription(span.description, requestOptions, req);\n          span.finish();\n        }\n      }).once('error', function () {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var req = this;\n\n        if (breadcrumbsEnabled) {\n          addRequestBreadcrumb('error', requestUrl, req);\n        }\n\n        if (tracingEnabled && span) {\n          span.setHttpStatus(500);\n          span.description = cleanSpanDescription(span.description, requestOptions, req);\n          span.finish();\n        }\n      });\n    };\n  };\n}\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\n\n\nfunction addRequestBreadcrumb(event, url, req, res) {\n  if (!getCurrentHub().getIntegration(Http)) {\n    return;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'http',\n    data: {\n      method: req.method,\n      status_code: res && res.statusCode,\n      url: url\n    },\n    type: 'http'\n  }, {\n    event: event,\n    request: req,\n    response: res\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,QAA8B,cAA9B;AAEA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,WAAvB,QAA0C,eAA1C;AAIA,SACEC,oBADF,EAEEC,UAFF,EAGEC,eAHF,EAIEC,oBAJF,QAOO,cAPP;AASA,IAAMC,YAAY,GAAGL,WAAW,CAACM,OAAO,CAACC,QAAR,CAAiBC,IAAlB,CAAhC;AAEA;;AACA;AAAA;AAAA;AAqBE;;;AAGA,gBAAmBC,OAAnB,EAA6E;AAA1D;AAAAA;AAA0D;AAlB7E;;;;;AAGO,gBAAeC,IAAI,CAACC,EAApB;AAgBL,SAAKC,YAAL,GAAoB,OAAOH,OAAO,CAACI,WAAf,KAA+B,WAA/B,GAA6C,IAA7C,GAAoDJ,OAAO,CAACI,WAAhF;AACA,SAAKC,QAAL,GAAgB,OAAOL,OAAO,CAACM,OAAf,KAA2B,WAA3B,GAAyC,KAAzC,GAAiDN,OAAO,CAACM,OAAzE;AACD;AAED;;;;;AAGOL,6BAAP;AACE;AACA,QAAI,CAAC,KAAKE,YAAN,IAAsB,CAAC,KAAKE,QAAhC,EAA0C;AACxC;AACD;;AAED,QAAME,mBAAmB,GAAGC,kCAAkC,CAAC,KAAKL,YAAN,EAAoB,KAAKE,QAAzB,CAA9D;;AAEA,QAAMI,UAAU,GAAGC,OAAO,CAAC,MAAD,CAA1B;;AACArB,QAAI,CAACoB,UAAD,EAAa,KAAb,EAAoBF,mBAApB,CAAJ;AACAlB,QAAI,CAACoB,UAAD,EAAa,SAAb,EAAwBF,mBAAxB,CAAJ,CAVF,CAYE;AACA;AACA;;AACA,QAAIX,YAAY,CAACe,KAAb,IAAsBf,YAAY,CAACe,KAAb,GAAqB,CAA/C,EAAkD;AAChD,UAAMC,WAAW,GAAGF,OAAO,CAAC,OAAD,CAA3B;;AACArB,UAAI,CAACuB,WAAD,EAAc,KAAd,EAAqBL,mBAArB,CAAJ;AACAlB,UAAI,CAACuB,WAAD,EAAc,SAAd,EAAyBL,mBAAzB,CAAJ;AACD;AACF,GApBM;AA/BP;;;;;AAGcN,YAAa,MAAb;AAiDhB;AArDA;;SAAaA;AA4Db;;;;;;;;;;AASA,SAASO,kCAAT,CACEK,kBADF,EAEEC,cAFF,EAEyB;AAEvB,SAAO,SAASC,2BAAT,CAAqCC,qBAArC,EAAiF;AACtF,WAAO,SAASC,aAAT,GAAsB;AAAmC;;WAAA,yCAA0B;AAA1BC;OAAnC,CAC3B;;;AACA,UAAMT,UAAU,GAAG,IAAnB;AAEA,UAAMU,WAAW,GAAGxB,oBAAoB,CAACuB,IAAD,CAAxC;AACA,UAAME,cAAc,GAAGD,WAAW,CAAC,CAAD,CAAlC;AACA,UAAME,UAAU,GAAG5B,UAAU,CAAC2B,cAAD,CAA7B,CAN2B,CAQ3B;;AACA,UAAI1B,eAAe,CAAC2B,UAAD,CAAnB,EAAiC;AAC/B,eAAOL,qBAAqB,CAACM,KAAtB,CAA4Bb,UAA5B,EAAwCU,WAAxC,CAAP;AACD;;AAED,UAAII,IAAJ;AACA,UAAIC,UAAJ;AAEA,UAAMC,KAAK,GAAGrC,aAAa,GAAGsC,QAAhB,EAAd;;AACA,UAAID,KAAK,IAAIX,cAAb,EAA6B;AAC3BU,kBAAU,GAAGC,KAAK,CAACE,OAAN,EAAb;;AACA,YAAIH,UAAJ,EAAgB;AACdD,cAAI,GAAGC,UAAU,CAACI,UAAX,CAAsB;AAC3BC,uBAAW,EAAE,CAAGT,cAAc,CAACU,MAAf,IAAyB,KAA5B,IAAiC,GAAjC,GAAqCT,UADvB;AAE3BU,cAAE,EAAE;AAFuB,WAAtB,CAAP;AAKA,cAAMC,iBAAiB,GAAGT,IAAI,CAACU,aAAL,EAA1B;AACA3C,gBAAM,CAAC4C,GAAP,CAAW,+DAA6DF,iBAAxE;AACAZ,wBAAc,CAACe,OAAf,GAAsBC,sBAAQhB,cAAc,CAACe,OAAvB,GAA8B;AAAE,4BAAgBH;AAAlB,WAA9B,CAAtB;AACD;AACF,OA7B0B,CA+B3B;;;AACA,aAAOhB,qBAAqB,CACzBM,KADI,CACEb,UADF,EACcU,WADd,EAEJkB,IAFI,CAEC,UAFD,EAEa,UAAmCC,GAAnC,EAA4D;AAC5E;AACA,YAAMC,GAAG,GAAG,IAAZ;;AACA,YAAI1B,kBAAJ,EAAwB;AACtB2B,8BAAoB,CAAC,UAAD,EAAanB,UAAb,EAAyBkB,GAAzB,EAA8BD,GAA9B,CAApB;AACD;;AACD,YAAIxB,cAAc,IAAIS,IAAtB,EAA4B;AAC1B,cAAIe,GAAG,CAACG,UAAR,EAAoB;AAClBlB,gBAAI,CAACmB,aAAL,CAAmBJ,GAAG,CAACG,UAAvB;AACD;;AACDlB,cAAI,CAACM,WAAL,GAAmBrC,oBAAoB,CAAC+B,IAAI,CAACM,WAAN,EAAmBT,cAAnB,EAAmCmB,GAAnC,CAAvC;AACAhB,cAAI,CAACoB,MAAL;AACD;AACF,OAfI,EAgBJN,IAhBI,CAgBC,OAhBD,EAgBU;AACb;AACA,YAAME,GAAG,GAAG,IAAZ;;AAEA,YAAI1B,kBAAJ,EAAwB;AACtB2B,8BAAoB,CAAC,OAAD,EAAUnB,UAAV,EAAsBkB,GAAtB,CAApB;AACD;;AACD,YAAIzB,cAAc,IAAIS,IAAtB,EAA4B;AAC1BA,cAAI,CAACmB,aAAL,CAAmB,GAAnB;AACAnB,cAAI,CAACM,WAAL,GAAmBrC,oBAAoB,CAAC+B,IAAI,CAACM,WAAN,EAAmBT,cAAnB,EAAmCmB,GAAnC,CAAvC;AACAhB,cAAI,CAACoB,MAAL;AACD;AACF,OA5BI,CAAP;AA6BD,KA7DD;AA8DD,GA/DD;AAgED;AAED;;;;;AAGA,SAASH,oBAAT,CAA8BI,KAA9B,EAA6CC,GAA7C,EAA0DN,GAA1D,EAAmFD,GAAnF,EAA6G;AAC3G,MAAI,CAAClD,aAAa,GAAG0D,cAAhB,CAA+B7C,IAA/B,CAAL,EAA2C;AACzC;AACD;;AAEDb,eAAa,GAAG2D,aAAhB,CACE;AACEC,YAAQ,EAAE,MADZ;AAEEC,QAAI,EAAE;AACJnB,YAAM,EAAES,GAAG,CAACT,MADR;AAEJoB,iBAAW,EAAEZ,GAAG,IAAIA,GAAG,CAACG,UAFpB;AAGJI,SAAG;AAHC,KAFR;AAOEM,QAAI,EAAE;AAPR,GADF,EAUE;AACEP,SAAK,OADP;AAEEQ,WAAO,EAAEb,GAFX;AAGEc,YAAQ,EAAEf;AAHZ,GAVF;AAgBD","names":["getCurrentHub","fill","logger","parseSemver","cleanSpanDescription","extractUrl","isSentryRequest","normalizeRequestArgs","NODE_VERSION","process","versions","node","options","Http","id","_breadcrumbs","breadcrumbs","_tracing","tracing","wrappedHandlerMaker","_createWrappedRequestMethodFactory","httpModule","require","major","httpsModule","breadcrumbsEnabled","tracingEnabled","wrappedRequestMethodFactory","originalRequestMethod","wrappedMethod","args","requestArgs","requestOptions","requestUrl","apply","span","parentSpan","scope","getScope","getSpan","startChild","description","method","op","sentryTraceHeader","toTraceparent","log","headers","__assign","once","res","req","addRequestBreadcrumb","statusCode","setHttpStatus","finish","event","url","getIntegration","addBreadcrumb","category","data","status_code","type","request","response"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/node/src/integrations/http.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Integration, Span } from '@sentry/types';\nimport { fill, logger, parseSemver } from '@sentry/utils';\nimport * as http from 'http';\nimport * as https from 'https';\n\nimport {\n  cleanSpanDescription,\n  extractUrl,\n  isSentryRequest,\n  normalizeRequestArgs,\n  RequestMethod,\n  RequestMethodArgs,\n} from './utils/http';\n\nconst NODE_VERSION = parseSemver(process.versions.node);\n\n/** http module integration */\nexport class Http implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Http';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Http.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _breadcrumbs: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _tracing: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { breadcrumbs?: boolean; tracing?: boolean } = {}) {\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = typeof options.tracing === 'undefined' ? false : options.tracing;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !this._tracing) {\n      return;\n    }\n\n    const wrappedHandlerMaker = _createWrappedRequestMethodFactory(this._breadcrumbs, this._tracing);\n\n    const httpModule = require('http');\n    fill(httpModule, 'get', wrappedHandlerMaker);\n    fill(httpModule, 'request', wrappedHandlerMaker);\n\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n    if (NODE_VERSION.major && NODE_VERSION.major > 8) {\n      const httpsModule = require('https');\n      fill(httpsModule, 'get', wrappedHandlerMaker);\n      fill(httpsModule, 'request', wrappedHandlerMaker);\n    }\n  }\n}\n\n// for ease of reading below\ntype OriginalRequestMethod = RequestMethod;\ntype WrappedRequestMethod = RequestMethod;\ntype WrappedRequestMethodFactory = (original: OriginalRequestMethod) => WrappedRequestMethod;\n\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedRequestMethodFactory(\n  breadcrumbsEnabled: boolean,\n  tracingEnabled: boolean,\n): WrappedRequestMethodFactory {\n  return function wrappedRequestMethodFactory(originalRequestMethod: OriginalRequestMethod): WrappedRequestMethod {\n    return function wrappedMethod(this: typeof http | typeof https, ...args: RequestMethodArgs): http.ClientRequest {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const httpModule = this;\n\n      const requestArgs = normalizeRequestArgs(args);\n      const requestOptions = requestArgs[0];\n      const requestUrl = extractUrl(requestOptions);\n\n      // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n      if (isSentryRequest(requestUrl)) {\n        return originalRequestMethod.apply(httpModule, requestArgs);\n      }\n\n      let span: Span | undefined;\n      let parentSpan: Span | undefined;\n\n      const scope = getCurrentHub().getScope();\n      if (scope && tracingEnabled) {\n        parentSpan = scope.getSpan();\n        if (parentSpan) {\n          span = parentSpan.startChild({\n            description: `${requestOptions.method || 'GET'} ${requestUrl}`,\n            op: 'request',\n          });\n\n          const sentryTraceHeader = span.toTraceparent();\n          logger.log(`[Tracing] Adding sentry-trace header to outgoing request: ${sentryTraceHeader}`);\n          requestOptions.headers = { ...requestOptions.headers, 'sentry-trace': sentryTraceHeader };\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalRequestMethod\n        .apply(httpModule, requestArgs)\n        .once('response', function(this: http.ClientRequest, res: http.IncomingMessage): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('response', requestUrl, req, res);\n          }\n          if (tracingEnabled && span) {\n            if (res.statusCode) {\n              span.setHttpStatus(res.statusCode);\n            }\n            span.description = cleanSpanDescription(span.description, requestOptions, req);\n            span.finish();\n          }\n        })\n        .once('error', function(this: http.ClientRequest): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('error', requestUrl, req);\n          }\n          if (tracingEnabled && span) {\n            span.setHttpStatus(500);\n            span.description = cleanSpanDescription(span.description, requestOptions, req);\n            span.finish();\n          }\n        });\n    };\n  };\n}\n\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(event: string, url: string, req: http.ClientRequest, res?: http.IncomingMessage): void {\n  if (!getCurrentHub().getIntegration(Http)) {\n    return;\n  }\n\n  getCurrentHub().addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        method: req.method,\n        status_code: res && res.statusCode,\n        url,\n      },\n      type: 'http',\n    },\n    {\n      event,\n      request: req,\n      response: res,\n    },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}