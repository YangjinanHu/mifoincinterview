{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OverriddenTaskDefinition = exports.SimpleTaskDefinition = void 0;\n\nconst errors_1 = require(\"../errors\");\n\nconst errors_list_1 = require(\"../errors-list\");\n\nconst types = __importStar(require(\"../params/argumentTypes\"));\n\nconst hardhat_params_1 = require(\"../params/hardhat-params\");\n\nfunction isCLIArgumentType(type) {\n  return \"parse\" in type;\n}\n/**\n * This class creates a task definition, which consists of:\n * * a name, that should be unique and will be used to call the task.\n * * a description. This is optional.\n * * the action that the task will execute.\n * * a set of parameters that can be used by the action.\n *\n */\n\n\nclass SimpleTaskDefinition {\n  /**\n   * Creates an empty task definition.\n   *\n   * This definition will have no params, and will throw a HH205 if executed.\n   *\n   * @param name The task's name.\n   * @param isSubtask `true` if the task is a subtask, `false` otherwise.\n   */\n  constructor(name) {\n    let isSubtask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.name = name;\n    this.isSubtask = isSubtask;\n    this.paramDefinitions = {};\n    this.positionalParamDefinitions = [];\n    this._positionalParamNames = new Set();\n    this._hasVariadicParam = false;\n    this._hasOptionalPositionalParam = false;\n\n    this.action = () => {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.ACTION_NOT_SET, {\n        taskName: name\n      });\n    };\n  }\n\n  get description() {\n    return this._description;\n  }\n  /**\n   * Sets the task's description.\n   * @param description The description.\n   */\n\n\n  setDescription(description) {\n    this._description = description;\n    return this;\n  }\n  /**\n   * Sets the task's action.\n   * @param action The action.\n   */\n\n\n  setAction(action) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this.action = action;\n    return this;\n  }\n  /**\n   * Adds a parameter to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n\n\n  addParam(name, description, defaultValue, type) {\n    let isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addParam(name, description, undefined, types.string, isOptional);\n      }\n\n      if (typeof defaultValue !== \"string\") {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n\n      return this.addParam(name, description, defaultValue, types.string, isOptional);\n    }\n\n    this._validateParamNameCasing(name);\n\n    this._validateNameNotUsed(name);\n\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isOptional,\n      isFlag: false,\n      isVariadic: false\n    };\n    return this;\n  }\n  /**\n   * Adds an optional parameter to the task's definition.\n   *\n   * @see addParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n\n\n  addOptionalParam(name, description, defaultValue, type) {\n    return this.addParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a boolean parameter or flag to the task's definition.\n   *\n   * Flags are params with default value set to `false`, and that don't expect\n   * values to be set in the CLI. A normal boolean param must be called with\n   * `--param true`, while a flag is called with `--flag`.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   */\n\n\n  addFlag(name, description) {\n    this._validateParamNameCasing(name);\n\n    this._validateNameNotUsed(name);\n\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue: false,\n      type: types.boolean,\n      description,\n      isFlag: true,\n      isOptional: true,\n      isVariadic: false\n    };\n    return this;\n  }\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   * @remarks This will throw if `isOptional` is `false` and an optional positional\n   * param was already set.\n   * @remarks This will throw if a variadic positional param is already set.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n\n\n  addPositionalParam(name, description, defaultValue, type) {\n    let isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addPositionalParam(name, description, undefined, types.string, isOptional);\n      }\n\n      if (typeof defaultValue !== \"string\") {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n\n      return this.addPositionalParam(name, description, defaultValue, types.string, isOptional);\n    }\n\n    this._validateParamNameCasing(name);\n\n    this._validateNameNotUsed(name);\n\n    this._validateNotAfterVariadicParam(name);\n\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: false,\n      isOptional,\n      isFlag: false\n    };\n\n    this._addPositionalParamDefinition(definition);\n\n    return this;\n  }\n  /**\n   * Adds an optional positional parameter to the task's definition.\n   *\n   * @see addPositionalParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n\n\n  addOptionalPositionalParam(name, description, defaultValue, type) {\n    return this.addPositionalParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a variadic positional parameter to the task's definition. Variadic\n   * positional params act as `...rest` parameters in JavaScript.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n\n\n  addVariadicPositionalParam(name, description, defaultValue, type) {\n    let isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n\n    if (defaultValue !== undefined && !Array.isArray(defaultValue)) {\n      defaultValue = [defaultValue];\n    }\n\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addVariadicPositionalParam(name, description, undefined, types.string, isOptional);\n      }\n\n      if (!this._isStringArray(defaultValue)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n\n      return this.addVariadicPositionalParam(name, description, defaultValue, types.string, isOptional);\n    }\n\n    this._validateParamNameCasing(name);\n\n    this._validateNameNotUsed(name);\n\n    this._validateNotAfterVariadicParam(name);\n\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: true,\n      isOptional,\n      isFlag: false\n    };\n\n    this._addPositionalParamDefinition(definition);\n\n    return this;\n  }\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * This will check if the `name` is already used and\n   * if the parameter is being added after a varidic argument.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n\n\n  addOptionalVariadicPositionalParam(name, description, defaultValue, type) {\n    return this.addVariadicPositionalParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * @param definition the param's definition\n   */\n\n\n  _addPositionalParamDefinition(definition) {\n    if (definition.isVariadic) {\n      this._hasVariadicParam = true;\n    }\n\n    if (definition.isOptional) {\n      this._hasOptionalPositionalParam = true;\n    }\n\n    this._positionalParamNames.add(definition.name);\n\n    this.positionalParamDefinitions.push(definition);\n  }\n  /**\n   * Validates if the given param's name is after a variadic parameter.\n   * @param name the param's name.\n   * @throws HH200\n   */\n\n\n  _validateNotAfterVariadicParam(name) {\n    if (this._hasVariadicParam) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_AFTER_VARIADIC, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  /**\n   * Validates if the param's name is already used.\n   * @param name the param's name.\n   *\n   * @throws HH201 if `name` is already used as a param.\n   * @throws HH202 if `name` is already used as a param by Hardhat\n   */\n\n\n  _validateNameNotUsed(name) {\n    if (this._hasParamDefined(name)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_ALREADY_DEFINED, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n\n    if (Object.keys(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS).includes(name)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_CLASHES_WITH_HARDHAT_PARAM, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  /**\n   * Checks if the given name is already used.\n   * @param name the param's name.\n   */\n\n\n  _hasParamDefined(name) {\n    return this.paramDefinitions[name] !== undefined || this._positionalParamNames.has(name);\n  }\n  /**\n   * Validates if a mandatory param is being added after optional params.\n   *\n   * @param name the param's name to be added.\n   * @param isOptional true if the new param is optional, false otherwise.\n   *\n   * @throws HH203 if validation fail\n   */\n\n\n  _validateNoMandatoryParamAfterOptionalOnes(name, isOptional) {\n    if (!isOptional && this._hasOptionalPositionalParam) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.MANDATORY_PARAM_AFTER_OPTIONAL, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n\n  _validateParamNameCasing(name) {\n    const pattern = /^[a-z]+([a-zA-Z0-9])*$/;\n    const match = name.match(pattern);\n\n    if (match === null) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.INVALID_PARAM_NAME_CASING, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n\n  _validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name) {\n    if (defaultValue !== undefined && !isOptional) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_IN_MANDATORY_PARAM, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n\n  _isStringArray(values) {\n    return Array.isArray(values) && values.every(v => typeof v === \"string\");\n  }\n\n  _validateCLIArgumentTypesForExternalTasks(type) {\n    if (this.isSubtask) {\n      return;\n    }\n\n    if (!isCLIArgumentType(type)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.CLI_ARGUMENT_TYPE_REQUIRED, {\n        task: this.name,\n        type: type.name\n      });\n    }\n  }\n\n}\n\nexports.SimpleTaskDefinition = SimpleTaskDefinition;\n/**\n * Allows you to override a previously defined task.\n *\n * When overriding a task you can:\n *  * flag it as a subtask\n *  * set a new description\n *  * set a new action\n *\n */\n\nclass OverriddenTaskDefinition {\n  constructor(parentTaskDefinition) {\n    let isSubtask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.parentTaskDefinition = parentTaskDefinition;\n    this.isSubtask = isSubtask;\n    this.isSubtask = isSubtask;\n    this.parentTaskDefinition = parentTaskDefinition;\n  }\n\n  setDescription(description) {\n    this._description = description;\n    return this;\n  }\n  /**\n   * Overrides the parent task's action.\n   * @param action the action.\n   */\n\n\n  setAction(action) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this._action = action;\n    return this;\n  }\n  /**\n   * Retrieves the parent task's name.\n   */\n\n\n  get name() {\n    return this.parentTaskDefinition.name;\n  }\n  /**\n   * Retrieves, if defined, the description of the overriden task,\n   * otherwise retrieves the description of the parent task.\n   */\n\n\n  get description() {\n    if (this._description !== undefined) {\n      return this._description;\n    }\n\n    return this.parentTaskDefinition.description;\n  }\n  /**\n   * Retrieves, if defined, the action of the overriden task,\n   * otherwise retrieves the action of the parent task.\n   */\n\n\n  get action() {\n    if (this._action !== undefined) {\n      return this._action;\n    }\n\n    return this.parentTaskDefinition.action;\n  }\n  /**\n   * Retrieves the parent task's param definitions.\n   */\n\n\n  get paramDefinitions() {\n    return this.parentTaskDefinition.paramDefinitions;\n  }\n  /**\n   * Retrieves the parent task's positional param definitions.\n   */\n\n\n  get positionalParamDefinitions() {\n    return this.parentTaskDefinition.positionalParamDefinitions;\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addParam(name, description, defaultValue, type, isOptional) {\n    if (isOptional === undefined || !isOptional) {\n      return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_MANDATORY_PARAMS);\n    }\n\n    return this.addOptionalParam(name, description, defaultValue, type);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addOptionalParam(name, description, defaultValue, type) {\n    this.parentTaskDefinition.addOptionalParam(name, description, defaultValue, type);\n    return this;\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addOptionalPositionalParam(_name, _description, _defaultValue, _type) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addVariadicPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addOptionalVariadicPositionalParam(_name, _description, _defaultValue, _type) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n  }\n  /**\n   * Add a flag param to the overridden task.\n   * @throws HH201 if param name was already defined in any parent task.\n   * @throws HH209 if param name is not in camelCase.\n   */\n\n\n  addFlag(name, description) {\n    this.parentTaskDefinition.addFlag(name, description);\n    return this;\n  }\n\n  _throwNoParamsOverrideError(errorDescriptor) {\n    throw new errors_1.HardhatError(errorDescriptor, {\n      taskName: this.name\n    });\n  }\n\n}\n\nexports.OverriddenTaskDefinition = OverriddenTaskDefinition;","map":{"version":3,"mappings":"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","names":["isCLIArgumentType","type","SimpleTaskDefinition","constructor","name","isSubtask","_positionalParamNames","Set","_hasVariadicParam","_hasOptionalPositionalParam","action","errors_1","errors_list_1","TASK_DEFINITIONS","ACTION_NOT_SET","taskName","description","_description","setDescription","setAction","addParam","defaultValue","isOptional","undefined","types","string","DEFAULT_VALUE_WRONG_TYPE","paramName","_validateParamNameCasing","_validateNameNotUsed","_validateNoDefaultValueForMandatoryParam","_validateCLIArgumentTypesForExternalTasks","paramDefinitions","isFlag","isVariadic","addOptionalParam","addFlag","boolean","addPositionalParam","_validateNotAfterVariadicParam","_validateNoMandatoryParamAfterOptionalOnes","definition","_addPositionalParamDefinition","addOptionalPositionalParam","addVariadicPositionalParam","Array","isArray","_isStringArray","addOptionalVariadicPositionalParam","add","positionalParamDefinitions","push","PARAM_AFTER_VARIADIC","_hasParamDefined","PARAM_ALREADY_DEFINED","Object","keys","hardhat_params_1","includes","PARAM_CLASHES_WITH_HARDHAT_PARAM","has","MANDATORY_PARAM_AFTER_OPTIONAL","pattern","match","INVALID_PARAM_NAME_CASING","DEFAULT_IN_MANDATORY_PARAM","values","every","v","CLI_ARGUMENT_TYPE_REQUIRED","task","exports","OverriddenTaskDefinition","parentTaskDefinition","_action","_throwNoParamsOverrideError","OVERRIDE_NO_MANDATORY_PARAMS","_name","_defaultValue","_type","_isOptional","OVERRIDE_NO_POSITIONAL_PARAMS","OVERRIDE_NO_VARIADIC_PARAMS","errorDescriptor"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/core/tasks/task-definitions.ts"],"sourcesContent":["import {\n  ActionType,\n  ArgumentType,\n  CLIArgumentType,\n  ParamDefinition,\n  ParamDefinitionsMap,\n  TaskArguments,\n  TaskDefinition,\n} from \"../../../types\";\nimport { HardhatError } from \"../errors\";\nimport { ErrorDescriptor, ERRORS } from \"../errors-list\";\nimport * as types from \"../params/argumentTypes\";\nimport { HARDHAT_PARAM_DEFINITIONS } from \"../params/hardhat-params\";\n\nfunction isCLIArgumentType(\n  type: ArgumentType<any>\n): type is CLIArgumentType<any> {\n  return \"parse\" in type;\n}\n/**\n * This class creates a task definition, which consists of:\n * * a name, that should be unique and will be used to call the task.\n * * a description. This is optional.\n * * the action that the task will execute.\n * * a set of parameters that can be used by the action.\n *\n */\nexport class SimpleTaskDefinition implements TaskDefinition {\n  public get description() {\n    return this._description;\n  }\n  public readonly paramDefinitions: ParamDefinitionsMap = {};\n  public readonly positionalParamDefinitions: Array<ParamDefinition<any>> = [];\n  public action: ActionType<TaskArguments>;\n\n  private _positionalParamNames: Set<string>;\n  private _hasVariadicParam: boolean;\n  private _hasOptionalPositionalParam: boolean;\n  private _description?: string;\n\n  /**\n   * Creates an empty task definition.\n   *\n   * This definition will have no params, and will throw a HH205 if executed.\n   *\n   * @param name The task's name.\n   * @param isSubtask `true` if the task is a subtask, `false` otherwise.\n   */\n  constructor(\n    public readonly name: string,\n    public readonly isSubtask: boolean = false\n  ) {\n    this._positionalParamNames = new Set();\n    this._hasVariadicParam = false;\n    this._hasOptionalPositionalParam = false;\n    this.action = () => {\n      throw new HardhatError(ERRORS.TASK_DEFINITIONS.ACTION_NOT_SET, {\n        taskName: name,\n      });\n    };\n  }\n\n  /**\n   * Sets the task's description.\n   * @param description The description.\n   */\n  public setDescription(description: string) {\n    this._description = description;\n    return this;\n  }\n\n  /**\n   * Sets the task's action.\n   * @param action The action.\n   */\n  public setAction<ArgsT extends TaskArguments>(action: ActionType<ArgsT>) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this.action = action;\n    return this;\n  }\n\n  /**\n   * Adds a parameter to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  public addParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>,\n    isOptional: boolean = defaultValue !== undefined\n  ): this {\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addParam(\n          name,\n          description,\n          undefined,\n          types.string,\n          isOptional\n        );\n      }\n\n      if (typeof defaultValue !== \"string\") {\n        throw new HardhatError(\n          ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE,\n          {\n            paramName: name,\n            taskName: this.name,\n          }\n        );\n      }\n\n      return this.addParam(\n        name,\n        description,\n        defaultValue,\n        types.string,\n        isOptional\n      );\n    }\n\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNoDefaultValueForMandatoryParam(\n      defaultValue,\n      isOptional,\n      name\n    );\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isOptional,\n      isFlag: false,\n      isVariadic: false,\n    };\n\n    return this;\n  }\n\n  /**\n   * Adds an optional parameter to the task's definition.\n   *\n   * @see addParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  public addOptionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>\n  ): this {\n    return this.addParam(name, description, defaultValue, type, true);\n  }\n\n  /**\n   * Adds a boolean parameter or flag to the task's definition.\n   *\n   * Flags are params with default value set to `false`, and that don't expect\n   * values to be set in the CLI. A normal boolean param must be called with\n   * `--param true`, while a flag is called with `--flag`.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   */\n  public addFlag(name: string, description?: string) {\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue: false,\n      type: types.boolean,\n      description,\n      isFlag: true,\n      isOptional: true,\n      isVariadic: false,\n    };\n\n    return this;\n  }\n\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   * @remarks This will throw if `isOptional` is `false` and an optional positional\n   * param was already set.\n   * @remarks This will throw if a variadic positional param is already set.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  public addPositionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>,\n    isOptional = defaultValue !== undefined\n  ): this {\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addPositionalParam(\n          name,\n          description,\n          undefined,\n          types.string,\n          isOptional\n        );\n      }\n\n      if (typeof defaultValue !== \"string\") {\n        throw new HardhatError(\n          ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE,\n          {\n            paramName: name,\n            taskName: this.name,\n          }\n        );\n      }\n\n      return this.addPositionalParam(\n        name,\n        description,\n        defaultValue,\n        types.string,\n        isOptional\n      );\n    }\n\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNotAfterVariadicParam(name);\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n    this._validateNoDefaultValueForMandatoryParam(\n      defaultValue,\n      isOptional,\n      name\n    );\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: false,\n      isOptional,\n      isFlag: false,\n    };\n\n    this._addPositionalParamDefinition(definition);\n\n    return this;\n  }\n\n  /**\n   * Adds an optional positional parameter to the task's definition.\n   *\n   * @see addPositionalParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  public addOptionalPositionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>\n  ): this {\n    return this.addPositionalParam(name, description, defaultValue, type, true);\n  }\n\n  /**\n   * Adds a variadic positional parameter to the task's definition. Variadic\n   * positional params act as `...rest` parameters in JavaScript.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  public addVariadicPositionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T[] | T,\n    type?: ArgumentType<T>,\n    isOptional = defaultValue !== undefined\n  ): this {\n    if (defaultValue !== undefined && !Array.isArray(defaultValue)) {\n      defaultValue = [defaultValue];\n    }\n\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addVariadicPositionalParam(\n          name,\n          description,\n          undefined,\n          types.string,\n          isOptional\n        );\n      }\n\n      if (!this._isStringArray(defaultValue)) {\n        throw new HardhatError(\n          ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE,\n          {\n            paramName: name,\n            taskName: this.name,\n          }\n        );\n      }\n\n      return this.addVariadicPositionalParam(\n        name,\n        description,\n        defaultValue,\n        types.string,\n        isOptional\n      );\n    }\n\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNotAfterVariadicParam(name);\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n    this._validateNoDefaultValueForMandatoryParam(\n      defaultValue,\n      isOptional,\n      name\n    );\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: true,\n      isOptional,\n      isFlag: false,\n    };\n\n    this._addPositionalParamDefinition(definition);\n\n    return this;\n  }\n\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * This will check if the `name` is already used and\n   * if the parameter is being added after a varidic argument.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  public addOptionalVariadicPositionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T[] | T,\n    type?: ArgumentType<T>\n  ): this {\n    return this.addVariadicPositionalParam(\n      name,\n      description,\n      defaultValue,\n      type,\n      true\n    );\n  }\n\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * @param definition the param's definition\n   */\n  private _addPositionalParamDefinition(definition: ParamDefinition<any>) {\n    if (definition.isVariadic) {\n      this._hasVariadicParam = true;\n    }\n\n    if (definition.isOptional) {\n      this._hasOptionalPositionalParam = true;\n    }\n\n    this._positionalParamNames.add(definition.name);\n    this.positionalParamDefinitions.push(definition);\n  }\n\n  /**\n   * Validates if the given param's name is after a variadic parameter.\n   * @param name the param's name.\n   * @throws HH200\n   */\n  private _validateNotAfterVariadicParam(name: string) {\n    if (this._hasVariadicParam) {\n      throw new HardhatError(ERRORS.TASK_DEFINITIONS.PARAM_AFTER_VARIADIC, {\n        paramName: name,\n        taskName: this.name,\n      });\n    }\n  }\n\n  /**\n   * Validates if the param's name is already used.\n   * @param name the param's name.\n   *\n   * @throws HH201 if `name` is already used as a param.\n   * @throws HH202 if `name` is already used as a param by Hardhat\n   */\n  private _validateNameNotUsed(name: string) {\n    if (this._hasParamDefined(name)) {\n      throw new HardhatError(ERRORS.TASK_DEFINITIONS.PARAM_ALREADY_DEFINED, {\n        paramName: name,\n        taskName: this.name,\n      });\n    }\n\n    if (Object.keys(HARDHAT_PARAM_DEFINITIONS).includes(name)) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.PARAM_CLASHES_WITH_HARDHAT_PARAM,\n        {\n          paramName: name,\n          taskName: this.name,\n        }\n      );\n    }\n  }\n\n  /**\n   * Checks if the given name is already used.\n   * @param name the param's name.\n   */\n  private _hasParamDefined(name: string) {\n    return (\n      this.paramDefinitions[name] !== undefined ||\n      this._positionalParamNames.has(name)\n    );\n  }\n\n  /**\n   * Validates if a mandatory param is being added after optional params.\n   *\n   * @param name the param's name to be added.\n   * @param isOptional true if the new param is optional, false otherwise.\n   *\n   * @throws HH203 if validation fail\n   */\n  private _validateNoMandatoryParamAfterOptionalOnes(\n    name: string,\n    isOptional: boolean\n  ) {\n    if (!isOptional && this._hasOptionalPositionalParam) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.MANDATORY_PARAM_AFTER_OPTIONAL,\n        {\n          paramName: name,\n          taskName: this.name,\n        }\n      );\n    }\n  }\n\n  private _validateParamNameCasing(name: string) {\n    const pattern = /^[a-z]+([a-zA-Z0-9])*$/;\n    const match = name.match(pattern);\n    if (match === null) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.INVALID_PARAM_NAME_CASING,\n        {\n          paramName: name,\n          taskName: this.name,\n        }\n      );\n    }\n  }\n\n  private _validateNoDefaultValueForMandatoryParam(\n    defaultValue: any | undefined,\n    isOptional: boolean,\n    name: string\n  ) {\n    if (defaultValue !== undefined && !isOptional) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.DEFAULT_IN_MANDATORY_PARAM,\n        {\n          paramName: name,\n          taskName: this.name,\n        }\n      );\n    }\n  }\n\n  private _isStringArray(values: any): values is string[] {\n    return Array.isArray(values) && values.every((v) => typeof v === \"string\");\n  }\n\n  private _validateCLIArgumentTypesForExternalTasks(type: ArgumentType<any>) {\n    if (this.isSubtask) {\n      return;\n    }\n\n    if (!isCLIArgumentType(type)) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.CLI_ARGUMENT_TYPE_REQUIRED,\n        {\n          task: this.name,\n          type: type.name,\n        }\n      );\n    }\n  }\n}\n\n/**\n * Allows you to override a previously defined task.\n *\n * When overriding a task you can:\n *  * flag it as a subtask\n *  * set a new description\n *  * set a new action\n *\n */\nexport class OverriddenTaskDefinition implements TaskDefinition {\n  private _description?: string;\n  private _action?: ActionType<TaskArguments>;\n\n  constructor(\n    public readonly parentTaskDefinition: TaskDefinition,\n    public readonly isSubtask: boolean = false\n  ) {\n    this.isSubtask = isSubtask;\n    this.parentTaskDefinition = parentTaskDefinition;\n  }\n\n  public setDescription(description: string) {\n    this._description = description;\n    return this;\n  }\n\n  /**\n   * Overrides the parent task's action.\n   * @param action the action.\n   */\n  public setAction<ArgsT extends TaskArguments>(action: ActionType<ArgsT>) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this._action = action;\n    return this;\n  }\n\n  /**\n   * Retrieves the parent task's name.\n   */\n  public get name() {\n    return this.parentTaskDefinition.name;\n  }\n\n  /**\n   * Retrieves, if defined, the description of the overriden task,\n   * otherwise retrieves the description of the parent task.\n   */\n  public get description() {\n    if (this._description !== undefined) {\n      return this._description;\n    }\n\n    return this.parentTaskDefinition.description;\n  }\n\n  /**\n   * Retrieves, if defined, the action of the overriden task,\n   * otherwise retrieves the action of the parent task.\n   */\n  public get action() {\n    if (this._action !== undefined) {\n      return this._action;\n    }\n\n    return this.parentTaskDefinition.action;\n  }\n\n  /**\n   * Retrieves the parent task's param definitions.\n   */\n  public get paramDefinitions() {\n    return this.parentTaskDefinition.paramDefinitions;\n  }\n\n  /**\n   * Retrieves the parent task's positional param definitions.\n   */\n  public get positionalParamDefinitions() {\n    return this.parentTaskDefinition.positionalParamDefinitions;\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>,\n    isOptional?: boolean\n  ): this {\n    if (isOptional === undefined || !isOptional) {\n      return this._throwNoParamsOverrideError(\n        ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_MANDATORY_PARAMS\n      );\n    }\n    return this.addOptionalParam(name, description, defaultValue, type);\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addOptionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>\n  ): this {\n    this.parentTaskDefinition.addOptionalParam(\n      name,\n      description,\n      defaultValue,\n      type\n    );\n    return this;\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addPositionalParam<T>(\n    _name: string,\n    _description?: string,\n    _defaultValue?: T,\n    _type?: ArgumentType<T>,\n    _isOptional?: boolean\n  ): this {\n    return this._throwNoParamsOverrideError(\n      ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS\n    );\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addOptionalPositionalParam<T>(\n    _name: string,\n    _description?: string,\n    _defaultValue?: T,\n    _type?: ArgumentType<T>\n  ): this {\n    return this._throwNoParamsOverrideError(\n      ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS\n    );\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addVariadicPositionalParam<T>(\n    _name: string,\n    _description?: string,\n    _defaultValue?: T[],\n    _type?: ArgumentType<T>,\n    _isOptional?: boolean\n  ): this {\n    return this._throwNoParamsOverrideError(\n      ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS\n    );\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addOptionalVariadicPositionalParam<T>(\n    _name: string,\n    _description?: string,\n    _defaultValue?: T[],\n    _type?: ArgumentType<T>\n  ): this {\n    return this._throwNoParamsOverrideError(\n      ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS\n    );\n  }\n\n  /**\n   * Add a flag param to the overridden task.\n   * @throws HH201 if param name was already defined in any parent task.\n   * @throws HH209 if param name is not in camelCase.\n   */\n  public addFlag(name: string, description?: string): this {\n    this.parentTaskDefinition.addFlag(name, description);\n    return this;\n  }\n\n  private _throwNoParamsOverrideError(errorDescriptor: ErrorDescriptor): never {\n    throw new HardhatError(errorDescriptor, {\n      taskName: this.name,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}