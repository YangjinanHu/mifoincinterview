{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { getCurrentHub } from '@sentry/hub';\nimport { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\nexport var DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\nexport var defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS\n};\n/** Registers span creators for xhr and fetch requests  */\n\nexport function registerRequestInstrumentation(_options) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  var _a = __assign(__assign({}, defaultRequestInstrumentationOptions), _options),\n      traceFetch = _a.traceFetch,\n      traceXHR = _a.traceXHR,\n      tracingOrigins = _a.tracingOrigins,\n      shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest; // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n\n\n  var urlMap = {};\n\n  var defaultShouldCreateSpan = function (url) {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n\n    var origins = tracingOrigins;\n    urlMap[url] = origins.some(function (origin) {\n      return isMatchingPattern(url, origin);\n    }) && !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  }; // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n\n\n  var shouldCreateSpan = defaultShouldCreateSpan;\n\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = function (url) {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  var spans = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler({\n      callback: function (handlerData) {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch'\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler({\n      callback: function (handlerData) {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr'\n    });\n  }\n}\n/**\n * Create and track fetch request spans\n */\n\nexport function fetchCallback(handlerData, shouldCreateSpan, spans) {\n  var _a;\n\n  var currentClientOptions = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions();\n\n  if (!(currentClientOptions && hasTracingEnabled(currentClientOptions)) || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    var span = spans[handlerData.fetchData.__span];\n\n    if (span) {\n      var response = handlerData.response;\n\n      if (response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(response.status);\n      }\n\n      span.finish(); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete spans[handlerData.fetchData.__span];\n    }\n\n    return;\n  }\n\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: __assign(__assign({}, handlerData.fetchData), {\n        type: 'fetch'\n      }),\n      description: handlerData.fetchData.method + \" \" + handlerData.fetchData.url,\n      op: 'http'\n    });\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n    var request = handlerData.args[0] = handlerData.args[0]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var options = handlerData.args[1] = handlerData.args[1] || {};\n    var headers = options.headers;\n\n    if (isInstanceOf(request, Request)) {\n      headers = request.headers;\n    }\n\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = __spread(headers, [['sentry-trace', span.toTraceparent()]]);\n      } else {\n        headers = __assign(__assign({}, headers), {\n          'sentry-trace': span.toTraceparent()\n        });\n      }\n    } else {\n      headers = {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n\n    options.headers = headers;\n  }\n}\n/**\n * Create and track xhr request spans\n */\n\nexport function xhrCallback(handlerData, shouldCreateSpan, spans) {\n  var _a;\n\n  var currentClientOptions = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions();\n\n  if (!(currentClientOptions && hasTracingEnabled(currentClientOptions)) || !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)) || handlerData.xhr.__sentry_own_request__) {\n    return;\n  }\n\n  var xhr = handlerData.xhr.__sentry_xhr__; // check first if the request has finished and is tracked by an existing span which should now end\n\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    var span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish(); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n\n    return;\n  } // if not, create a new span to track it\n\n\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: __assign(__assign({}, xhr.data), {\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url\n      }),\n      description: xhr.method + \" \" + xhr.url,\n      op: 'http'\n    });\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {// Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["getCurrentHub","addInstrumentationHandler","isInstanceOf","isMatchingPattern","getActiveTransaction","hasTracingEnabled","DEFAULT_TRACING_ORIGINS","defaultRequestInstrumentationOptions","traceFetch","traceXHR","tracingOrigins","registerRequestInstrumentation","_options","shouldCreateSpanForRequest","urlMap","defaultShouldCreateSpan","url","origins","some","origin","shouldCreateSpan","spans","callback","handlerData","fetchCallback","type","xhrCallback","currentClientOptions","getClient","_a","getOptions","fetchData","endTimestamp","__span","span","response","setHttpStatus","status","finish","activeTransaction","startChild","data","description","method","op","spanId","request","args","options","headers","Request","append","toTraceparent","Array","isArray","xhr","__sentry_xhr__","__sentry_own_request__","__sentry_xhr_span_id__","status_code","setRequestHeader","_"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/tracing/src/browser/request.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function registerRequestInstrumentation(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler({\n      callback: (handlerData: FetchData) => {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch',\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler({\n      callback: (handlerData: XHRData) => {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr',\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const currentClientOptions = getCurrentHub()\n    .getClient()\n    ?.getOptions();\n  if (\n    !(currentClientOptions && hasTracingEnabled(currentClientOptions)) ||\n    !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))\n  ) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    const span = spans[handlerData.fetchData.__span];\n    if (span) {\n      const response = handlerData.response;\n      if (response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(response.status);\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.fetchData.__span];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    let headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = (request as Request).headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = [...headers, ['sentry-trace', span.toTraceparent()]];\n      } else {\n        headers = { ...headers, 'sentry-trace': span.toTraceparent() };\n      }\n    } else {\n      headers = { 'sentry-trace': span.toTraceparent() };\n    }\n    options.headers = headers;\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const currentClientOptions = getCurrentHub()\n    .getClient()\n    ?.getOptions();\n  if (\n    !(currentClientOptions && hasTracingEnabled(currentClientOptions)) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)) ||\n    handlerData.xhr.__sentry_own_request__\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    const span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}