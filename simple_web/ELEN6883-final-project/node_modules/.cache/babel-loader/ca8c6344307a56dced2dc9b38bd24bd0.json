{"ast":null,"code":"/**\n * stack-trace - Parses node.js stack traces\n *\n * This was originally forked to fix this issue:\n * https://github.com/felixge/node-stack-trace/issues/31\n *\n * Mar 19,2019 - #4fd379e\n *\n * https://github.com/felixge/node-stack-trace/\n * @license MIT\n */\n\n/** Extracts StackFrames from the Error */\nexport function parse(err) {\n  if (!err.stack) {\n    return [];\n  }\n\n  var lines = err.stack.split('\\n').slice(1);\n  return lines.map(function (line) {\n    if (line.match(/^\\s*[-]{4,}$/)) {\n      return {\n        columnNumber: null,\n        fileName: line,\n        functionName: null,\n        lineNumber: null,\n        methodName: null,\n        native: null,\n        typeName: null\n      };\n    }\n\n    var lineMatch = line.match(/at (?:(.+?)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?/);\n\n    if (!lineMatch) {\n      return undefined;\n    }\n\n    var object = null;\n    var method = null;\n    var functionName = null;\n    var typeName = null;\n    var methodName = null;\n    var isNative = lineMatch[5] === 'native';\n\n    if (lineMatch[1]) {\n      functionName = lineMatch[1];\n      var methodStart = functionName.lastIndexOf('.');\n\n      if (functionName[methodStart - 1] === '.') {\n        // eslint-disable-next-line no-plusplus\n        methodStart--;\n      }\n\n      if (methodStart > 0) {\n        object = functionName.substr(0, methodStart);\n        method = functionName.substr(methodStart + 1);\n        var objectEnd = object.indexOf('.Module');\n\n        if (objectEnd > 0) {\n          functionName = functionName.substr(objectEnd + 1);\n          object = object.substr(0, objectEnd);\n        }\n      }\n\n      typeName = null;\n    }\n\n    if (method) {\n      typeName = object;\n      methodName = method;\n    }\n\n    if (method === '<anonymous>') {\n      methodName = null;\n      functionName = null;\n    }\n\n    var properties = {\n      columnNumber: parseInt(lineMatch[4], 10) || null,\n      fileName: lineMatch[2] || null,\n      functionName: functionName,\n      lineNumber: parseInt(lineMatch[3], 10) || null,\n      methodName: methodName,\n      native: isNative,\n      typeName: typeName\n    };\n    return properties;\n  }).filter(function (callSite) {\n    return !!callSite;\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;AAuBA;AACA,OAAM,SAAUA,KAAV,CAAgBC,GAAhB,EAA0B;AAC9B,MAAI,CAACA,GAAG,CAACC,KAAT,EAAgB;AACd,WAAO,EAAP;AACD;;AAED,MAAMC,KAAK,GAAGF,GAAG,CAACC,KAAJ,CAAUE,KAAV,CAAgB,IAAhB,EAAsBC,KAAtB,CAA4B,CAA5B,CAAd;AAEA,SAAOF,KAAK,CACTG,GADI,CACA,gBAAI;AACP,QAAIC,IAAI,CAACC,KAAL,CAAW,cAAX,CAAJ,EAAgC;AAC9B,aAAO;AACLC,oBAAY,EAAE,IADT;AAELC,gBAAQ,EAAEH,IAFL;AAGLI,oBAAY,EAAE,IAHT;AAILC,kBAAU,EAAE,IAJP;AAKLC,kBAAU,EAAE,IALP;AAMLC,cAAM,EAAE,IANH;AAOLC,gBAAQ,EAAE;AAPL,OAAP;AASD;;AAED,QAAMC,SAAS,GAAGT,IAAI,CAACC,KAAL,CAAW,yDAAX,CAAlB;;AACA,QAAI,CAACQ,SAAL,EAAgB;AACd,aAAOC,SAAP;AACD;;AAED,QAAIC,MAAM,GAAG,IAAb;AACA,QAAIC,MAAM,GAAG,IAAb;AACA,QAAIR,YAAY,GAAG,IAAnB;AACA,QAAII,QAAQ,GAAG,IAAf;AACA,QAAIF,UAAU,GAAG,IAAjB;AACA,QAAMO,QAAQ,GAAGJ,SAAS,CAAC,CAAD,CAAT,KAAiB,QAAlC;;AAEA,QAAIA,SAAS,CAAC,CAAD,CAAb,EAAkB;AAChBL,kBAAY,GAAGK,SAAS,CAAC,CAAD,CAAxB;AACA,UAAIK,WAAW,GAAGV,YAAY,CAACW,WAAb,CAAyB,GAAzB,CAAlB;;AACA,UAAIX,YAAY,CAACU,WAAW,GAAG,CAAf,CAAZ,KAAkC,GAAtC,EAA2C;AACzC;AACAA,mBAAW;AACZ;;AACD,UAAIA,WAAW,GAAG,CAAlB,EAAqB;AACnBH,cAAM,GAAGP,YAAY,CAACY,MAAb,CAAoB,CAApB,EAAuBF,WAAvB,CAAT;AACAF,cAAM,GAAGR,YAAY,CAACY,MAAb,CAAoBF,WAAW,GAAG,CAAlC,CAAT;AACA,YAAMG,SAAS,GAAGN,MAAM,CAACO,OAAP,CAAe,SAAf,CAAlB;;AACA,YAAID,SAAS,GAAG,CAAhB,EAAmB;AACjBb,sBAAY,GAAGA,YAAY,CAACY,MAAb,CAAoBC,SAAS,GAAG,CAAhC,CAAf;AACAN,gBAAM,GAAGA,MAAM,CAACK,MAAP,CAAc,CAAd,EAAiBC,SAAjB,CAAT;AACD;AACF;;AACDT,cAAQ,GAAG,IAAX;AACD;;AAED,QAAII,MAAJ,EAAY;AACVJ,cAAQ,GAAGG,MAAX;AACAL,gBAAU,GAAGM,MAAb;AACD;;AAED,QAAIA,MAAM,KAAK,aAAf,EAA8B;AAC5BN,gBAAU,GAAG,IAAb;AACAF,kBAAY,GAAG,IAAf;AACD;;AAED,QAAMe,UAAU,GAAG;AACjBjB,kBAAY,EAAEkB,QAAQ,CAACX,SAAS,CAAC,CAAD,CAAV,EAAe,EAAf,CAAR,IAA8B,IAD3B;AAEjBN,cAAQ,EAAEM,SAAS,CAAC,CAAD,CAAT,IAAgB,IAFT;AAGjBL,kBAAY,cAHK;AAIjBC,gBAAU,EAAEe,QAAQ,CAACX,SAAS,CAAC,CAAD,CAAV,EAAe,EAAf,CAAR,IAA8B,IAJzB;AAKjBH,gBAAU,YALO;AAMjBC,YAAM,EAAEM,QANS;AAOjBL,cAAQ;AAPS,KAAnB;AAUA,WAAOW,UAAP;AACD,GAlEI,EAmEJE,MAnEI,CAmEG,oBAAQ;AAAI,YAAC,CAACC,QAAF;AAAU,GAnEzB,CAAP;AAoED","names":["parse","err","stack","lines","split","slice","map","line","match","columnNumber","fileName","functionName","lineNumber","methodName","native","typeName","lineMatch","undefined","object","method","isNative","methodStart","lastIndexOf","substr","objectEnd","indexOf","properties","parseInt","filter","callSite"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/node/src/stacktrace.ts"],"sourcesContent":["/**\n * stack-trace - Parses node.js stack traces\n *\n * This was originally forked to fix this issue:\n * https://github.com/felixge/node-stack-trace/issues/31\n *\n * Mar 19,2019 - #4fd379e\n *\n * https://github.com/felixge/node-stack-trace/\n * @license MIT\n */\n\n/** Decoded StackFrame */\nexport interface StackFrame {\n  fileName: string;\n  lineNumber: number;\n  functionName: string;\n  typeName: string;\n  methodName: string;\n  native: boolean;\n  columnNumber: number;\n}\n\n/** Extracts StackFrames from the Error */\nexport function parse(err: Error): StackFrame[] {\n  if (!err.stack) {\n    return [];\n  }\n\n  const lines = err.stack.split('\\n').slice(1);\n\n  return lines\n    .map(line => {\n      if (line.match(/^\\s*[-]{4,}$/)) {\n        return {\n          columnNumber: null,\n          fileName: line,\n          functionName: null,\n          lineNumber: null,\n          methodName: null,\n          native: null,\n          typeName: null,\n        };\n      }\n\n      const lineMatch = line.match(/at (?:(.+?)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?/);\n      if (!lineMatch) {\n        return undefined;\n      }\n\n      let object = null;\n      let method = null;\n      let functionName = null;\n      let typeName = null;\n      let methodName = null;\n      const isNative = lineMatch[5] === 'native';\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          // eslint-disable-next-line no-plusplus\n          methodStart--;\n        }\n        if (methodStart > 0) {\n          object = functionName.substr(0, methodStart);\n          method = functionName.substr(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.substr(objectEnd + 1);\n            object = object.substr(0, objectEnd);\n          }\n        }\n        typeName = null;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = null;\n        functionName = null;\n      }\n\n      const properties = {\n        columnNumber: parseInt(lineMatch[4], 10) || null,\n        fileName: lineMatch[2] || null,\n        functionName,\n        lineNumber: parseInt(lineMatch[3], 10) || null,\n        methodName,\n        native: isNative,\n        typeName,\n      };\n\n      return properties;\n    })\n    .filter(callSite => !!callSite) as StackFrame[];\n}\n"]},"metadata":{},"sourceType":"module"}