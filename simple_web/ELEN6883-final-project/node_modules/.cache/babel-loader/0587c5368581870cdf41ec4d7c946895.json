{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.experimentalAddHardhatNetworkMessageTraceHook = exports.extendConfig = exports.extendEnvironment = exports.types = exports.internalTask = exports.subtask = exports.task = void 0;\n\nconst context_1 = require(\"../../context\");\n\nconst argumentTypes = __importStar(require(\"../params/argumentTypes\"));\n\nfunction task(name, descriptionOrAction, action) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.task(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.task(name, descriptionOrAction);\n  }\n\n  return dsl.task(name, descriptionOrAction, action);\n}\n\nexports.task = task;\n\nfunction subtask(name, descriptionOrAction, action) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.subtask(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.subtask(name, descriptionOrAction);\n  }\n\n  return dsl.subtask(name, descriptionOrAction, action);\n}\n\nexports.subtask = subtask; // Backwards compatibility alias\n\nexports.internalTask = subtask;\nexports.types = argumentTypes;\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\n\nfunction extendEnvironment(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const extenderManager = ctx.extendersManager;\n  extenderManager.add(extender);\n}\n\nexports.extendEnvironment = extendEnvironment;\n\nfunction extendConfig(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.configExtenders.push(extender);\n}\n\nexports.extendConfig = extendConfig; // NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\n\nfunction experimentalAddHardhatNetworkMessageTraceHook(hook) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\n\nexports.experimentalAddHardhatNetworkMessageTraceHook = experimentalAddHardhatNetworkMessageTraceHook;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;AACA;;AAkCA,SAAgBA,IAAhB,CACEC,IADF,EAEEC,mBAFF,EAGEC,MAHF,EAG4B;AAE1B,QAAMC,GAAG,GAAGC,yBAAeC,iBAAf,EAAZ;AACA,QAAMC,GAAG,GAAGH,GAAG,CAACI,QAAhB;;AAEA,MAAIN,mBAAmB,KAAKO,SAA5B,EAAuC;AACrC,WAAOF,GAAG,CAACP,IAAJ,CAASC,IAAT,CAAP;AACD;;AAED,MAAI,OAAOC,mBAAP,KAA+B,QAAnC,EAA6C;AAC3C,WAAOK,GAAG,CAACP,IAAJ,CAASC,IAAT,EAAeC,mBAAf,CAAP;AACD;;AAED,SAAOK,GAAG,CAACP,IAAJ,CAASC,IAAT,EAAeC,mBAAf,EAAoCC,MAApC,CAAP;AACD;;AAjBDO;;AAoDA,SAAgBC,OAAhB,CACEV,IADF,EAEEC,mBAFF,EAGEC,MAHF,EAG4B;AAE1B,QAAMC,GAAG,GAAGC,yBAAeC,iBAAf,EAAZ;AACA,QAAMC,GAAG,GAAGH,GAAG,CAACI,QAAhB;;AAEA,MAAIN,mBAAmB,KAAKO,SAA5B,EAAuC;AACrC,WAAOF,GAAG,CAACI,OAAJ,CAAYV,IAAZ,CAAP;AACD;;AAED,MAAI,OAAOC,mBAAP,KAA+B,QAAnC,EAA6C;AAC3C,WAAOK,GAAG,CAACI,OAAJ,CAAYV,IAAZ,EAAkBC,mBAAlB,CAAP;AACD;;AAED,SAAOK,GAAG,CAACI,OAAJ,CAAYV,IAAZ,EAAkBC,mBAAlB,EAAuCC,MAAvC,CAAP;AACD;;AAjBDO,0B,CAmBA;;AACaA,uBAAeC,OAAf;AAEAD,gBAAQE,aAAR;AAEb;;;;;;;;AAOA,SAAgBC,iBAAhB,CAAkCC,QAAlC,EAA+D;AAC7D,QAAMV,GAAG,GAAGC,yBAAeC,iBAAf,EAAZ;AACA,QAAMS,eAAe,GAAGX,GAAG,CAACY,gBAA5B;AACAD,iBAAe,CAACE,GAAhB,CAAoBH,QAApB;AACD;;AAJDJ;;AAMA,SAAgBQ,YAAhB,CAA6BJ,QAA7B,EAAqD;AACnD,QAAMV,GAAG,GAAGC,yBAAeC,iBAAf,EAAZ;AACAF,KAAG,CAACe,eAAJ,CAAoBC,IAApB,CAAyBN,QAAzB;AACD;;AAHDJ,oC,CAKA;AACA;;AACA,SAAgBW,6CAAhB,CACEC,IADF,EACkD;AAEhD,QAAMlB,GAAG,GAAGC,yBAAeC,iBAAf,EAAZ;AACAF,KAAG,CAACmB,2CAAJ,CAAgDH,IAAhD,CAAqDE,IAArD;AACD;;AALDZ","names":["task","name","descriptionOrAction","action","ctx","context_1","getHardhatContext","dsl","tasksDSL","undefined","exports","subtask","argumentTypes","extendEnvironment","extender","extenderManager","extendersManager","add","extendConfig","configExtenders","push","experimentalAddHardhatNetworkMessageTraceHook","hook","experimentalHardhatNetworkMessageTraceHooks"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/core/config/config-env.ts"],"sourcesContent":["import {\n  ActionType,\n  ConfigExtender,\n  ConfigurableTaskDefinition,\n  EnvironmentExtender,\n  ExperimentalHardhatNetworkMessageTraceHook,\n  TaskArguments,\n} from \"../../../types\";\nimport { HardhatContext } from \"../../context\";\nimport * as argumentTypes from \"../params/argumentTypes\";\n\n/**\n * Creates a task, overriding any previous task with the same name.\n *\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param description The task's description.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function task<ArgsT extends TaskArguments>(\n  name: string,\n  description?: string,\n  action?: ActionType<ArgsT>\n): ConfigurableTaskDefinition;\n\n/**\n * Creates a task without description, overriding any previous task\n * with the same name.\n *\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param action The task's action.\n *\n * @returns A task definition.\n */\nexport function task<ArgsT extends TaskArguments>(\n  name: string,\n  action: ActionType<ArgsT>\n): ConfigurableTaskDefinition;\n\nexport function task<ArgsT extends TaskArguments>(\n  name: string,\n  descriptionOrAction?: string | ActionType<ArgsT>,\n  action?: ActionType<ArgsT>\n): ConfigurableTaskDefinition {\n  const ctx = HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.task(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.task(name, descriptionOrAction);\n  }\n\n  return dsl.task(name, descriptionOrAction, action);\n}\n\n/**\n * Creates a subtask, overriding any previous task with the same name.\n *\n * @remarks The subtasks won't be displayed in the CLI help messages.\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param description The task's description.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function subtask<ArgsT extends TaskArguments>(\n  name: string,\n  description?: string,\n  action?: ActionType<ArgsT>\n): ConfigurableTaskDefinition;\n\n/**\n * Creates a subtask without description, overriding any previous\n * task with the same name.\n *\n * @remarks The subtasks won't be displayed in the CLI help messages.\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function subtask<ArgsT extends TaskArguments>(\n  name: string,\n  action: ActionType<ArgsT>\n): ConfigurableTaskDefinition;\n\nexport function subtask<ArgsT extends TaskArguments>(\n  name: string,\n  descriptionOrAction?: string | ActionType<ArgsT>,\n  action?: ActionType<ArgsT>\n): ConfigurableTaskDefinition {\n  const ctx = HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.subtask(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.subtask(name, descriptionOrAction);\n  }\n\n  return dsl.subtask(name, descriptionOrAction, action);\n}\n\n// Backwards compatibility alias\nexport const internalTask = subtask;\n\nexport const types = argumentTypes;\n\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\nexport function extendEnvironment(extender: EnvironmentExtender) {\n  const ctx = HardhatContext.getHardhatContext();\n  const extenderManager = ctx.extendersManager;\n  extenderManager.add(extender);\n}\n\nexport function extendConfig(extender: ConfigExtender) {\n  const ctx = HardhatContext.getHardhatContext();\n  ctx.configExtenders.push(extender);\n}\n\n// NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\nexport function experimentalAddHardhatNetworkMessageTraceHook(\n  hook: ExperimentalHardhatNetworkMessageTraceHook\n) {\n  const ctx = HardhatContext.getHardhatContext();\n  ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\n"]},"metadata":{},"sourceType":"script"}