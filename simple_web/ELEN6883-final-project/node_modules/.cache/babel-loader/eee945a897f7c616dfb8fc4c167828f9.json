{"ast":null,"code":"'use strict';\n\nvar Test = require('../test');\n\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants.EVENT_FILE_PRE_REQUIRE;\n/**\n * BDD-style interface:\n *\n *      describe('Array', function() {\n *        describe('#indexOf()', function() {\n *          it('should return -1 when not present', function() {\n *            // ...\n *          });\n *\n *          it('should return the index when present', function() {\n *            // ...\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\n\n\nmodule.exports = function bddInterface(suite) {\n  var suites = [suite];\n  suite.on(EVENT_FILE_PRE_REQUIRE, function (context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.describe = context.context = function (title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n    /**\n     * Pending describe.\n     */\n\n\n    context.xdescribe = context.xcontext = context.describe.skip = function (title, fn) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n    /**\n     * Exclusive suite.\n     */\n\n\n    context.describe.only = function (title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n\n    context.it = context.specify = function (title, fn) {\n      var suite = suites[0];\n\n      if (suite.isPending()) {\n        fn = null;\n      }\n\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n    /**\n     * Exclusive test-case.\n     */\n\n\n    context.it.only = function (title, fn) {\n      return common.test.only(mocha, context.it(title, fn));\n    };\n    /**\n     * Pending test case.\n     */\n\n\n    context.xit = context.xspecify = context.it.skip = function (title) {\n      return context.it(title);\n    };\n    /**\n     * Number of attempts to retry.\n     */\n\n\n    context.it.retries = function (n) {\n      context.retries(n);\n    };\n  });\n};\n\nmodule.exports.description = 'BDD or RSpec style [default]';","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/interfaces/bdd.js"],"names":["Test","require","EVENT_FILE_PRE_REQUIRE","constants","module","exports","bddInterface","suite","suites","on","context","file","mocha","common","before","after","beforeEach","afterEach","run","options","delay","runWithSuite","describe","title","fn","create","xdescribe","xcontext","skip","only","it","specify","isPending","test","addTest","xit","xspecify","retries","n","description"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Test = require('../test');\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants\n  .EVENT_FILE_PRE_REQUIRE;\n\n/**\n * BDD-style interface:\n *\n *      describe('Array', function() {\n *        describe('#indexOf()', function() {\n *          it('should return -1 when not present', function() {\n *            // ...\n *          });\n *\n *          it('should return the index when present', function() {\n *            // ...\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function bddInterface(suite) {\n  var suites = [suite];\n\n  suite.on(EVENT_FILE_PRE_REQUIRE, function(context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.describe = context.context = function(title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Pending describe.\n     */\n\n    context.xdescribe = context.xcontext = context.describe.skip = function(\n      title,\n      fn\n    ) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Exclusive suite.\n     */\n\n    context.describe.only = function(title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.it = context.specify = function(title, fn) {\n      var suite = suites[0];\n      if (suite.isPending()) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.it.only = function(title, fn) {\n      return common.test.only(mocha, context.it(title, fn));\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.xit = context.xspecify = context.it.skip = function(title) {\n      return context.it(title);\n    };\n\n    /**\n     * Number of attempts to retry.\n     */\n    context.it.retries = function(n) {\n      context.retries(n);\n    };\n  });\n};\n\nmodule.exports.description = 'BDD or RSpec style [default]';\n"]},"metadata":{},"sourceType":"script"}