{"ast":null,"code":"'use strict';\n/**\n * @module Base\n */\n\n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\n\nvar diff = require('diff');\n\nvar milliseconds = require('ms');\n\nvar utils = require('../utils');\n\nvar supportsColor = process.browser ? null : require('supports-color');\n\nvar constants = require('../runner').constants;\n\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = process.stdout.isTTY && process.stderr.isTTY;\n/**\n * Save log references to avoid tests interfering (see GH-3604).\n */\n\nvar consoleLog = console.log;\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors = !process.browser && (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n};\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․',\n  comma: ',',\n  bang: '!'\n}; // With node.js on Windows: use symbols available in terminal default fonts\n\nif (process.platform === 'win32') {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @private\n * @param {string} type\n * @param {string} str\n * @return {string}\n */\n\n\nvar color = exports.color = function (type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize ? process.stdout.getWindowSize(1)[0] : tty.getWindowSize()[1];\n}\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\n\nexports.cursor = {\n  hide: function () {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n  show: function () {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n  deleteLine: function () {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n  beginningOfLine: function () {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n  CR: function () {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\nvar showDiff = exports.showDiff = function (err) {\n  return err && err.showDiff !== false && sameType(err.actual, err.expected) && err.expected !== undefined;\n};\n\nfunction stringifyDiffObjs(err) {\n  if (!utils.isString(err.actual) || !utils.isString(err.expected)) {\n    err.actual = utils.stringify(err.actual);\n    err.expected = utils.stringify(err.expected);\n  }\n}\n/**\n * Returns a diff between 2 strings with coloured ANSI output.\n *\n * @description\n * The diff will be either inline or unified dependent on the value\n * of `Base.inlineDiff`.\n *\n * @param {string} actual\n * @param {string} expected\n * @return {string} Diff\n */\n\n\nvar generateDiff = exports.generateDiff = function (actual, expected) {\n  try {\n    return exports.inlineDiffs ? inlineDiff(actual, expected) : unifiedDiff(actual, expected);\n  } catch (err) {\n    var msg = '\\n      ' + color('diff added', '+ expected') + ' ' + color('diff removed', '- actual:  failed to generate Mocha diff') + '\\n';\n    return msg;\n  }\n};\n/**\n * Outputs the given `failures` as a list.\n *\n * @public\n * @memberof Mocha.reporters.Base\n * @variation 1\n * @param {Object[]} failures - Each is Test instance with corresponding\n *     Error property\n */\n\n\nexports.list = function (failures) {\n  var multipleErr, multipleTest;\n  Base.consoleLog();\n  failures.forEach(function (test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n') + color('error message', '     %s') + color('error stack', '\\n%s\\n'); // msg\n\n    var msg;\n    var err;\n\n    if (test.err && test.err.multiple) {\n      if (multipleTest !== test) {\n        multipleTest = test;\n        multipleErr = [test.err].concat(test.err.multiple);\n      }\n\n      err = multipleErr.shift();\n    } else {\n      err = test.err;\n    }\n\n    var message;\n\n    if (err.message && typeof err.message.toString === 'function') {\n      message = err.message + '';\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n\n    var stack = err.stack || message;\n    var index = message ? stack.indexOf(message) : -1;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index); // remove msg from stack\n\n      stack = stack.slice(index + 1);\n    } // uncaught\n\n\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    } // explicitly show diff\n\n\n    if (!exports.hideDiff && showDiff(err)) {\n      stringifyDiffObjs(err);\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n      msg += generateDiff(err.actual, err.expected);\n    } // indent stack trace\n\n\n    stack = stack.replace(/^/gm, '  '); // indented test title\n\n    var testTitle = '';\n    test.titlePath().forEach(function (str, index) {\n      if (index !== 0) {\n        testTitle += '\\n     ';\n      }\n\n      for (var i = 0; i < index; i++) {\n        testTitle += '  ';\n      }\n\n      testTitle += str;\n    });\n    Base.consoleLog(fmt, i + 1, testTitle, msg, stack);\n  });\n};\n/**\n * Constructs a new `Base` reporter instance.\n *\n * @description\n * All other reporters generally inherit from this reporter.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\n\n\nfunction Base(runner, options) {\n  var failures = this.failures = [];\n\n  if (!runner) {\n    throw new TypeError('Missing runner argument');\n  }\n\n  this.options = options || {};\n  this.runner = runner;\n  this.stats = runner.stats; // assigned so Reporters keep a closer reference\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n  });\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    if (showDiff(err)) {\n      stringifyDiffObjs(err);\n    } // more than one error per test\n\n\n    if (test.err && err instanceof Error) {\n      test.err.multiple = (test.err.multiple || []).concat(err);\n    } else {\n      test.err = err;\n    }\n\n    failures.push(test);\n  });\n}\n/**\n * Outputs common epilogue used by many of the bundled reporters.\n *\n * @public\n * @memberof Mocha.reporters\n */\n\n\nBase.prototype.epilogue = function () {\n  var stats = this.stats;\n  var fmt;\n  Base.consoleLog(); // passes\n\n  fmt = color('bright pass', ' ') + color('green', ' %d passing') + color('light', ' (%s)');\n  Base.consoleLog(fmt, stats.passes || 0, milliseconds(stats.duration)); // pending\n\n  if (stats.pending) {\n    fmt = color('pending', ' ') + color('pending', ' %d pending');\n    Base.consoleLog(fmt, stats.pending);\n  } // failures\n\n\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n    Base.consoleLog(fmt, stats.failures);\n    Base.list(this.failures);\n    Base.consoleLog();\n  }\n\n  Base.consoleLog();\n};\n/**\n * Pads the given `str` to `len`.\n *\n * @private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\n\n\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n/**\n * Returns inline diff between 2 strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} Diff\n */\n\n\nfunction inlineDiff(actual, expected) {\n  var msg = errorDiff(actual, expected); // linenos\n\n  var lines = msg.split('\\n');\n\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function (str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  } // legend\n\n\n  msg = '\\n' + color('diff removed', 'actual') + ' ' + color('diff added', 'expected') + '\\n\\n' + msg + '\\n'; // indent\n\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n/**\n * Returns unified diff between two strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} The diff.\n */\n\n\nfunction unifiedDiff(actual, expected) {\n  var indent = '      ';\n\n  function cleanUp(line) {\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n\n    if (line.match(/@@/)) {\n      return '--';\n    }\n\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n\n    return indent + line;\n  }\n\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n\n  var msg = diff.createPatch('string', actual, expected);\n  var lines = msg.split('\\n').splice(5);\n  return '\\n      ' + colorLines('diff added', '+ expected') + ' ' + colorLines('diff removed', '- actual') + '\\n\\n' + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n/**\n * Returns character diff for `err`.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} the diff\n */\n\n\nfunction errorDiff(actual, expected) {\n  return diff.diffWordsWithSpace(actual, expected).map(function (str) {\n    if (str.added) {\n      return colorLines('diff added', str.value);\n    }\n\n    if (str.removed) {\n      return colorLines('diff removed', str.value);\n    }\n\n    return str.value;\n  }).join('');\n}\n/**\n * Colors lines for `str`, using the color `name`.\n *\n * @private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\n\n\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function (str) {\n    return color(name, str);\n  }).join('\\n');\n}\n/**\n * Object#toString reference.\n */\n\n\nvar objToString = Object.prototype.toString;\n/**\n * Checks that a / b have the same type.\n *\n * @private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\n\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n\nBase.consoleLog = consoleLog;\nBase.abstract = true;","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/reporters/base.js"],"names":["tty","require","diff","milliseconds","utils","supportsColor","process","browser","constants","EVENT_TEST_PASS","EVENT_TEST_FAIL","exports","module","Base","isatty","stdout","isTTY","stderr","consoleLog","console","log","useColors","env","MOCHA_COLORS","undefined","inlineDiffs","colors","pass","fail","pending","suite","checkmark","fast","medium","slow","green","light","symbols","ok","err","dot","comma","bang","platform","color","type","str","String","window","width","getWindowSize","cursor","hide","write","show","deleteLine","beginningOfLine","CR","showDiff","sameType","actual","expected","stringifyDiffObjs","isString","stringify","generateDiff","inlineDiff","unifiedDiff","msg","list","failures","multipleErr","multipleTest","forEach","test","i","fmt","multiple","concat","shift","message","toString","inspect","stack","index","indexOf","length","slice","uncaught","hideDiff","match","replace","testTitle","titlePath","runner","options","TypeError","stats","on","duration","speed","Error","push","prototype","epilogue","passes","pad","len","Array","join","errorDiff","lines","split","map","indent","cleanUp","line","colorLines","notBlank","createPatch","splice","filter","diffWordsWithSpace","added","value","removed","name","objToString","Object","a","b","call","abstract"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * @module Base\n */\n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar diff = require('diff');\nvar milliseconds = require('ms');\nvar utils = require('../utils');\nvar supportsColor = process.browser ? null : require('supports-color');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = process.stdout.isTTY && process.stderr.isTTY;\n\n/**\n * Save log references to avoid tests interfering (see GH-3604).\n */\nvar consoleLog = console.log;\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors =\n  !process.browser &&\n  (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․',\n  comma: ',',\n  bang: '!'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif (process.platform === 'win32') {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @private\n * @param {string} type\n * @param {string} str\n * @return {string}\n */\nvar color = (exports.color = function(type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n});\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize\n    ? process.stdout.getWindowSize(1)[0]\n    : tty.getWindowSize()[1];\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function() {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function() {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function() {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function() {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function() {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\nvar showDiff = (exports.showDiff = function(err) {\n  return (\n    err &&\n    err.showDiff !== false &&\n    sameType(err.actual, err.expected) &&\n    err.expected !== undefined\n  );\n});\n\nfunction stringifyDiffObjs(err) {\n  if (!utils.isString(err.actual) || !utils.isString(err.expected)) {\n    err.actual = utils.stringify(err.actual);\n    err.expected = utils.stringify(err.expected);\n  }\n}\n\n/**\n * Returns a diff between 2 strings with coloured ANSI output.\n *\n * @description\n * The diff will be either inline or unified dependent on the value\n * of `Base.inlineDiff`.\n *\n * @param {string} actual\n * @param {string} expected\n * @return {string} Diff\n */\nvar generateDiff = (exports.generateDiff = function(actual, expected) {\n  try {\n    return exports.inlineDiffs\n      ? inlineDiff(actual, expected)\n      : unifiedDiff(actual, expected);\n  } catch (err) {\n    var msg =\n      '\\n      ' +\n      color('diff added', '+ expected') +\n      ' ' +\n      color('diff removed', '- actual:  failed to generate Mocha diff') +\n      '\\n';\n    return msg;\n  }\n});\n\n/**\n * Outputs the given `failures` as a list.\n *\n * @public\n * @memberof Mocha.reporters.Base\n * @variation 1\n * @param {Object[]} failures - Each is Test instance with corresponding\n *     Error property\n */\nexports.list = function(failures) {\n  var multipleErr, multipleTest;\n  Base.consoleLog();\n  failures.forEach(function(test, i) {\n    // format\n    var fmt =\n      color('error title', '  %s) %s:\\n') +\n      color('error message', '     %s') +\n      color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err;\n    if (test.err && test.err.multiple) {\n      if (multipleTest !== test) {\n        multipleTest = test;\n        multipleErr = [test.err].concat(test.err.multiple);\n      }\n      err = multipleErr.shift();\n    } else {\n      err = test.err;\n    }\n    var message;\n    if (err.message && typeof err.message.toString === 'function') {\n      message = err.message + '';\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = message ? stack.indexOf(message) : -1;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (!exports.hideDiff && showDiff(err)) {\n      stringifyDiffObjs(err);\n      fmt =\n        color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      msg += generateDiff(err.actual, err.expected);\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    // indented test title\n    var testTitle = '';\n    test.titlePath().forEach(function(str, index) {\n      if (index !== 0) {\n        testTitle += '\\n     ';\n      }\n      for (var i = 0; i < index; i++) {\n        testTitle += '  ';\n      }\n      testTitle += str;\n    });\n\n    Base.consoleLog(fmt, i + 1, testTitle, msg, stack);\n  });\n};\n\n/**\n * Constructs a new `Base` reporter instance.\n *\n * @description\n * All other reporters generally inherit from this reporter.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Base(runner, options) {\n  var failures = (this.failures = []);\n\n  if (!runner) {\n    throw new TypeError('Missing runner argument');\n  }\n  this.options = options || {};\n  this.runner = runner;\n  this.stats = runner.stats; // assigned so Reporters keep a closer reference\n\n  runner.on(EVENT_TEST_PASS, function(test) {\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n  });\n\n  runner.on(EVENT_TEST_FAIL, function(test, err) {\n    if (showDiff(err)) {\n      stringifyDiffObjs(err);\n    }\n    // more than one error per test\n    if (test.err && err instanceof Error) {\n      test.err.multiple = (test.err.multiple || []).concat(err);\n    } else {\n      test.err = err;\n    }\n    failures.push(test);\n  });\n}\n\n/**\n * Outputs common epilogue used by many of the bundled reporters.\n *\n * @public\n * @memberof Mocha.reporters\n */\nBase.prototype.epilogue = function() {\n  var stats = this.stats;\n  var fmt;\n\n  Base.consoleLog();\n\n  // passes\n  fmt =\n    color('bright pass', ' ') +\n    color('green', ' %d passing') +\n    color('light', ' (%s)');\n\n  Base.consoleLog(fmt, stats.passes || 0, milliseconds(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ') + color('pending', ' %d pending');\n\n    Base.consoleLog(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    Base.consoleLog(fmt, stats.failures);\n\n    Base.list(this.failures);\n    Base.consoleLog();\n  }\n\n  Base.consoleLog();\n};\n\n/**\n * Pads the given `str` to `len`.\n *\n * @private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns inline diff between 2 strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} Diff\n */\nfunction inlineDiff(actual, expected) {\n  var msg = errorDiff(actual, expected);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines\n      .map(function(str, i) {\n        return pad(++i, width) + ' |' + ' ' + str;\n      })\n      .join('\\n');\n  }\n\n  // legend\n  msg =\n    '\\n' +\n    color('diff removed', 'actual') +\n    ' ' +\n    color('diff added', 'expected') +\n    '\\n\\n' +\n    msg +\n    '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns unified diff between two strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} The diff.\n */\nfunction unifiedDiff(actual, expected) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/@@/)) {\n      return '--';\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', actual, expected);\n  var lines = msg.split('\\n').splice(5);\n  return (\n    '\\n      ' +\n    colorLines('diff added', '+ expected') +\n    ' ' +\n    colorLines('diff removed', '- actual') +\n    '\\n\\n' +\n    lines\n      .map(cleanUp)\n      .filter(notBlank)\n      .join('\\n')\n  );\n}\n\n/**\n * Returns character diff for `err`.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} the diff\n */\nfunction errorDiff(actual, expected) {\n  return diff\n    .diffWordsWithSpace(actual, expected)\n    .map(function(str) {\n      if (str.added) {\n        return colorLines('diff added', str.value);\n      }\n      if (str.removed) {\n        return colorLines('diff removed', str.value);\n      }\n      return str.value;\n    })\n    .join('');\n}\n\n/**\n * Colors lines for `str`, using the color `name`.\n *\n * @private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str\n    .split('\\n')\n    .map(function(str) {\n      return color(name, str);\n    })\n    .join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Checks that a / b have the same type.\n *\n * @private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n\nBase.consoleLog = consoleLog;\n\nBase.abstract = true;\n"]},"metadata":{},"sourceType":"script"}