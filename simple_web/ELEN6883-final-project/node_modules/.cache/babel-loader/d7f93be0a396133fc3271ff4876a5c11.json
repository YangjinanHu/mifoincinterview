{"ast":null,"code":"'use strict';\n\nvar format = require('util').format;\n/**\n * Factory functions to create throwable error objects\n * @module Errors\n */\n\n/**\n * When Mocha throw exceptions (or otherwise errors), it attempts to assign a\n * `code` property to the `Error` object, for easier handling.  These are the\n * potential values of `code`.\n */\n\n\nvar constants = {\n  /**\n   * An unrecoverable error.\n   */\n  FATAL: 'ERR_MOCHA_FATAL',\n\n  /**\n   * The type of an argument to a function call is invalid\n   */\n  INVALID_ARG_TYPE: 'ERR_MOCHA_INVALID_ARG_TYPE',\n\n  /**\n   * The value of an argument to a function call is invalid\n   */\n  INVALID_ARG_VALUE: 'ERR_MOCHA_INVALID_ARG_VALUE',\n\n  /**\n   * Something was thrown, but it wasn't an `Error`\n   */\n  INVALID_EXCEPTION: 'ERR_MOCHA_INVALID_EXCEPTION',\n\n  /**\n   * An interface (e.g., `Mocha.interfaces`) is unknown or invalid\n   */\n  INVALID_INTERFACE: 'ERR_MOCHA_INVALID_INTERFACE',\n\n  /**\n   * A reporter (.e.g, `Mocha.reporters`) is unknown or invalid\n   */\n  INVALID_REPORTER: 'ERR_MOCHA_INVALID_REPORTER',\n\n  /**\n   * `done()` was called twice in a `Test` or `Hook` callback\n   */\n  MULTIPLE_DONE: 'ERR_MOCHA_MULTIPLE_DONE',\n\n  /**\n   * No files matched the pattern provided by the user\n   */\n  NO_FILES_MATCH_PATTERN: 'ERR_MOCHA_NO_FILES_MATCH_PATTERN',\n\n  /**\n   * Known, but unsupported behavior of some kind\n   */\n  UNSUPPORTED: 'ERR_MOCHA_UNSUPPORTED',\n\n  /**\n   * Invalid state transition occuring in `Mocha` instance\n   */\n  INSTANCE_ALREADY_RUNNING: 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING',\n\n  /**\n   * Invalid state transition occuring in `Mocha` instance\n   */\n  INSTANCE_ALREADY_DISPOSED: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED'\n};\n/**\n * Creates an error object to be thrown when no files to be tested could be found using specified pattern.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} pattern - User-specified argument value.\n * @returns {Error} instance detailing the error condition\n */\n\nfunction createNoFilesMatchPatternError(message, pattern) {\n  var err = new Error(message);\n  err.code = constants.NO_FILES_MATCH_PATTERN;\n  err.pattern = pattern;\n  return err;\n}\n/**\n * Creates an error object to be thrown when the reporter specified in the options was not found.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} reporter - User-specified reporter value.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidReporterError(message, reporter) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_REPORTER;\n  err.reporter = reporter;\n  return err;\n}\n/**\n * Creates an error object to be thrown when the interface specified in the options was not found.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} ui - User-specified interface value.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidInterfaceError(message, ui) {\n  var err = new Error(message);\n  err.code = constants.INVALID_INTERFACE;\n  err.interface = ui;\n  return err;\n}\n/**\n * Creates an error object to be thrown when a behavior, option, or parameter is unsupported.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createUnsupportedError(message) {\n  var err = new Error(message);\n  err.code = constants.UNSUPPORTED;\n  return err;\n}\n/**\n * Creates an error object to be thrown when an argument is missing.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createMissingArgumentError(message, argument, expected) {\n  return createInvalidArgumentTypeError(message, argument, expected);\n}\n/**\n * Creates an error object to be thrown when an argument did not use the supported type\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidArgumentTypeError(message, argument, expected) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_ARG_TYPE;\n  err.argument = argument;\n  err.expected = expected;\n  err.actual = typeof argument;\n  return err;\n}\n/**\n * Creates an error object to be thrown when an argument did not use the supported value\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} value - Argument value.\n * @param {string} [reason] - Why value is invalid.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidArgumentValueError(message, argument, value, reason) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_ARG_VALUE;\n  err.argument = argument;\n  err.value = value;\n  err.reason = typeof reason !== 'undefined' ? reason : 'is invalid';\n  return err;\n}\n/**\n * Creates an error object to be thrown when an exception was caught, but the `Error` is falsy or undefined.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidExceptionError(message, value) {\n  var err = new Error(message);\n  err.code = constants.INVALID_EXCEPTION;\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n/**\n * Creates an error object to be thrown when an unrecoverable error occurs.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createFatalError(message, value) {\n  var err = new Error(message);\n  err.code = constants.FATAL;\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n/**\n * Dynamically creates a plugin-type-specific error based on plugin type\n * @param {string} message - Error message\n * @param {\"reporter\"|\"interface\"} pluginType - Plugin type. Future: expand as needed\n * @param {string} [pluginId] - Name/path of plugin, if any\n * @throws When `pluginType` is not known\n * @public\n * @returns {Error}\n */\n\n\nfunction createInvalidPluginError(message, pluginType, pluginId) {\n  switch (pluginType) {\n    case 'reporter':\n      return createInvalidReporterError(message, pluginId);\n\n    case 'interface':\n      return createInvalidInterfaceError(message, pluginId);\n\n    default:\n      throw new Error('unknown pluginType \"' + pluginType + '\"');\n  }\n}\n/**\n * Creates an error object to be thrown when a mocha object's `run` method is executed while it is already disposed.\n * @param {string} message The error message to be displayed.\n * @param {boolean} cleanReferencesAfterRun the value of `cleanReferencesAfterRun`\n * @param {Mocha} instance the mocha instance that throw this error\n */\n\n\nfunction createMochaInstanceAlreadyDisposedError(message, cleanReferencesAfterRun, instance) {\n  var err = new Error(message);\n  err.code = constants.INSTANCE_ALREADY_DISPOSED;\n  err.cleanReferencesAfterRun = cleanReferencesAfterRun;\n  err.instance = instance;\n  return err;\n}\n/**\n * Creates an error object to be thrown when a mocha object's `run` method is called while a test run is in progress.\n * @param {string} message The error message to be displayed.\n */\n\n\nfunction createMochaInstanceAlreadyRunningError(message, instance) {\n  var err = new Error(message);\n  err.code = constants.INSTANCE_ALREADY_RUNNING;\n  err.instance = instance;\n  return err;\n}\n/*\n * Creates an error object to be thrown when done() is called multiple times in a test\n *\n * @public\n * @param {Runnable} runnable - Original runnable\n * @param {Error} [originalErr] - Original error, if any\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createMultipleDoneError(runnable, originalErr) {\n  var title;\n\n  try {\n    title = format('<%s>', runnable.fullTitle());\n\n    if (runnable.parent.root) {\n      title += ' (of root suite)';\n    }\n  } catch (ignored) {\n    title = format('<%s> (of unknown suite)', runnable.title);\n  }\n\n  var message = format('done() called multiple times in %s %s', runnable.type ? runnable.type : 'unknown runnable', title);\n\n  if (runnable.file) {\n    message += format(' of file %s', runnable.file);\n  }\n\n  if (originalErr) {\n    message += format('; in addition, done() received error: %s', originalErr);\n  }\n\n  var err = new Error(message);\n  err.code = constants.MULTIPLE_DONE;\n  err.valueType = typeof originalErr;\n  err.value = originalErr;\n  return err;\n}\n\nmodule.exports = {\n  createInvalidArgumentTypeError: createInvalidArgumentTypeError,\n  createInvalidArgumentValueError: createInvalidArgumentValueError,\n  createInvalidExceptionError: createInvalidExceptionError,\n  createInvalidInterfaceError: createInvalidInterfaceError,\n  createInvalidReporterError: createInvalidReporterError,\n  createMissingArgumentError: createMissingArgumentError,\n  createNoFilesMatchPatternError: createNoFilesMatchPatternError,\n  createUnsupportedError: createUnsupportedError,\n  createInvalidPluginError: createInvalidPluginError,\n  createMochaInstanceAlreadyDisposedError: createMochaInstanceAlreadyDisposedError,\n  createMochaInstanceAlreadyRunningError: createMochaInstanceAlreadyRunningError,\n  createFatalError: createFatalError,\n  createMultipleDoneError: createMultipleDoneError,\n  constants: constants\n};","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/errors.js"],"names":["format","require","constants","FATAL","INVALID_ARG_TYPE","INVALID_ARG_VALUE","INVALID_EXCEPTION","INVALID_INTERFACE","INVALID_REPORTER","MULTIPLE_DONE","NO_FILES_MATCH_PATTERN","UNSUPPORTED","INSTANCE_ALREADY_RUNNING","INSTANCE_ALREADY_DISPOSED","createNoFilesMatchPatternError","message","pattern","err","Error","code","createInvalidReporterError","reporter","TypeError","createInvalidInterfaceError","ui","interface","createUnsupportedError","createMissingArgumentError","argument","expected","createInvalidArgumentTypeError","actual","createInvalidArgumentValueError","value","reason","createInvalidExceptionError","valueType","createFatalError","createInvalidPluginError","pluginType","pluginId","createMochaInstanceAlreadyDisposedError","cleanReferencesAfterRun","instance","createMochaInstanceAlreadyRunningError","createMultipleDoneError","runnable","originalErr","title","fullTitle","parent","root","ignored","type","file","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar format = require('util').format;\n\n/**\n * Factory functions to create throwable error objects\n * @module Errors\n */\n\n/**\n * When Mocha throw exceptions (or otherwise errors), it attempts to assign a\n * `code` property to the `Error` object, for easier handling.  These are the\n * potential values of `code`.\n */\nvar constants = {\n  /**\n   * An unrecoverable error.\n   */\n  FATAL: 'ERR_MOCHA_FATAL',\n\n  /**\n   * The type of an argument to a function call is invalid\n   */\n  INVALID_ARG_TYPE: 'ERR_MOCHA_INVALID_ARG_TYPE',\n\n  /**\n   * The value of an argument to a function call is invalid\n   */\n  INVALID_ARG_VALUE: 'ERR_MOCHA_INVALID_ARG_VALUE',\n\n  /**\n   * Something was thrown, but it wasn't an `Error`\n   */\n  INVALID_EXCEPTION: 'ERR_MOCHA_INVALID_EXCEPTION',\n\n  /**\n   * An interface (e.g., `Mocha.interfaces`) is unknown or invalid\n   */\n  INVALID_INTERFACE: 'ERR_MOCHA_INVALID_INTERFACE',\n\n  /**\n   * A reporter (.e.g, `Mocha.reporters`) is unknown or invalid\n   */\n  INVALID_REPORTER: 'ERR_MOCHA_INVALID_REPORTER',\n\n  /**\n   * `done()` was called twice in a `Test` or `Hook` callback\n   */\n  MULTIPLE_DONE: 'ERR_MOCHA_MULTIPLE_DONE',\n\n  /**\n   * No files matched the pattern provided by the user\n   */\n  NO_FILES_MATCH_PATTERN: 'ERR_MOCHA_NO_FILES_MATCH_PATTERN',\n\n  /**\n   * Known, but unsupported behavior of some kind\n   */\n  UNSUPPORTED: 'ERR_MOCHA_UNSUPPORTED',\n\n  /**\n   * Invalid state transition occuring in `Mocha` instance\n   */\n  INSTANCE_ALREADY_RUNNING: 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING',\n\n  /**\n   * Invalid state transition occuring in `Mocha` instance\n   */\n  INSTANCE_ALREADY_DISPOSED: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED'\n};\n\n/**\n * Creates an error object to be thrown when no files to be tested could be found using specified pattern.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} pattern - User-specified argument value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createNoFilesMatchPatternError(message, pattern) {\n  var err = new Error(message);\n  err.code = constants.NO_FILES_MATCH_PATTERN;\n  err.pattern = pattern;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when the reporter specified in the options was not found.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} reporter - User-specified reporter value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidReporterError(message, reporter) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_REPORTER;\n  err.reporter = reporter;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when the interface specified in the options was not found.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} ui - User-specified interface value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidInterfaceError(message, ui) {\n  var err = new Error(message);\n  err.code = constants.INVALID_INTERFACE;\n  err.interface = ui;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when a behavior, option, or parameter is unsupported.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\nfunction createUnsupportedError(message) {\n  var err = new Error(message);\n  err.code = constants.UNSUPPORTED;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an argument is missing.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\nfunction createMissingArgumentError(message, argument, expected) {\n  return createInvalidArgumentTypeError(message, argument, expected);\n}\n\n/**\n * Creates an error object to be thrown when an argument did not use the supported type\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidArgumentTypeError(message, argument, expected) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_ARG_TYPE;\n  err.argument = argument;\n  err.expected = expected;\n  err.actual = typeof argument;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an argument did not use the supported value\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} value - Argument value.\n * @param {string} [reason] - Why value is invalid.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidArgumentValueError(message, argument, value, reason) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_ARG_VALUE;\n  err.argument = argument;\n  err.value = value;\n  err.reason = typeof reason !== 'undefined' ? reason : 'is invalid';\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an exception was caught, but the `Error` is falsy or undefined.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidExceptionError(message, value) {\n  var err = new Error(message);\n  err.code = constants.INVALID_EXCEPTION;\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an unrecoverable error occurs.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\nfunction createFatalError(message, value) {\n  var err = new Error(message);\n  err.code = constants.FATAL;\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n\n/**\n * Dynamically creates a plugin-type-specific error based on plugin type\n * @param {string} message - Error message\n * @param {\"reporter\"|\"interface\"} pluginType - Plugin type. Future: expand as needed\n * @param {string} [pluginId] - Name/path of plugin, if any\n * @throws When `pluginType` is not known\n * @public\n * @returns {Error}\n */\nfunction createInvalidPluginError(message, pluginType, pluginId) {\n  switch (pluginType) {\n    case 'reporter':\n      return createInvalidReporterError(message, pluginId);\n    case 'interface':\n      return createInvalidInterfaceError(message, pluginId);\n    default:\n      throw new Error('unknown pluginType \"' + pluginType + '\"');\n  }\n}\n\n/**\n * Creates an error object to be thrown when a mocha object's `run` method is executed while it is already disposed.\n * @param {string} message The error message to be displayed.\n * @param {boolean} cleanReferencesAfterRun the value of `cleanReferencesAfterRun`\n * @param {Mocha} instance the mocha instance that throw this error\n */\nfunction createMochaInstanceAlreadyDisposedError(\n  message,\n  cleanReferencesAfterRun,\n  instance\n) {\n  var err = new Error(message);\n  err.code = constants.INSTANCE_ALREADY_DISPOSED;\n  err.cleanReferencesAfterRun = cleanReferencesAfterRun;\n  err.instance = instance;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when a mocha object's `run` method is called while a test run is in progress.\n * @param {string} message The error message to be displayed.\n */\nfunction createMochaInstanceAlreadyRunningError(message, instance) {\n  var err = new Error(message);\n  err.code = constants.INSTANCE_ALREADY_RUNNING;\n  err.instance = instance;\n  return err;\n}\n\n/*\n * Creates an error object to be thrown when done() is called multiple times in a test\n *\n * @public\n * @param {Runnable} runnable - Original runnable\n * @param {Error} [originalErr] - Original error, if any\n * @returns {Error} instance detailing the error condition\n */\nfunction createMultipleDoneError(runnable, originalErr) {\n  var title;\n  try {\n    title = format('<%s>', runnable.fullTitle());\n    if (runnable.parent.root) {\n      title += ' (of root suite)';\n    }\n  } catch (ignored) {\n    title = format('<%s> (of unknown suite)', runnable.title);\n  }\n  var message = format(\n    'done() called multiple times in %s %s',\n    runnable.type ? runnable.type : 'unknown runnable',\n    title\n  );\n  if (runnable.file) {\n    message += format(' of file %s', runnable.file);\n  }\n  if (originalErr) {\n    message += format('; in addition, done() received error: %s', originalErr);\n  }\n\n  var err = new Error(message);\n  err.code = constants.MULTIPLE_DONE;\n  err.valueType = typeof originalErr;\n  err.value = originalErr;\n  return err;\n}\n\nmodule.exports = {\n  createInvalidArgumentTypeError: createInvalidArgumentTypeError,\n  createInvalidArgumentValueError: createInvalidArgumentValueError,\n  createInvalidExceptionError: createInvalidExceptionError,\n  createInvalidInterfaceError: createInvalidInterfaceError,\n  createInvalidReporterError: createInvalidReporterError,\n  createMissingArgumentError: createMissingArgumentError,\n  createNoFilesMatchPatternError: createNoFilesMatchPatternError,\n  createUnsupportedError: createUnsupportedError,\n  createInvalidPluginError: createInvalidPluginError,\n  createMochaInstanceAlreadyDisposedError: createMochaInstanceAlreadyDisposedError,\n  createMochaInstanceAlreadyRunningError: createMochaInstanceAlreadyRunningError,\n  createFatalError: createFatalError,\n  createMultipleDoneError: createMultipleDoneError,\n  constants: constants\n};\n"]},"metadata":{},"sourceType":"script"}