{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deriveKeyFromMnemonicAndPath = void 0;\n\nfunction deriveKeyFromMnemonicAndPath(mnemonic, hdPath) {\n  const {\n    mnemonicToSeedSync\n  } = require(\"ethereum-cryptography/bip39\");\n\n  const seed = mnemonicToSeedSync(mnemonic);\n\n  const {\n    HDKey\n  } = require(\"ethereum-cryptography/hdkey\");\n\n  const masterKey = HDKey.fromMasterSeed(seed);\n  const derived = masterKey.derive(hdPath);\n  return derived.privateKey === null ? undefined : derived.privateKey;\n}\n\nexports.deriveKeyFromMnemonicAndPath = deriveKeyFromMnemonicAndPath;","map":{"version":3,"mappings":";;;;;;;AAGA,SAAgBA,4BAAhB,CACEC,QADF,EAEEC,MAFF,EAEgB;AAEd,QAAM;AACJC;AADI,MAIFC,OAAO,CAAC,6BAAD,CAJX;;AAKA,QAAMC,IAAI,GAAGF,kBAAkB,CAACF,QAAD,CAA/B;;AAEA,QAAM;AACJK;AADI,MAIFF,OAAO,CAAC,6BAAD,CAJX;;AAMA,QAAMG,SAAS,GAAGD,KAAK,CAACE,cAAN,CAAqBH,IAArB,CAAlB;AACA,QAAMI,OAAO,GAAGF,SAAS,CAACG,MAAV,CAAiBR,MAAjB,CAAhB;AAEA,SAAOO,OAAO,CAACE,UAAR,KAAuB,IAAvB,GAA8BC,SAA9B,GAA0CH,OAAO,CAACE,UAAzD;AACD;;AArBDE","names":["deriveKeyFromMnemonicAndPath","mnemonic","hdPath","mnemonicToSeedSync","require","seed","HDKey","masterKey","fromMasterSeed","derived","derive","privateKey","undefined","exports"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/util/keys-derivation.ts"],"sourcesContent":["import type { mnemonicToSeedSync as mnemonicToSeedSyncT } from \"ethereum-cryptography/bip39\";\nimport type { HDKey as HDKeyT } from \"ethereum-cryptography/hdkey\";\n\nexport function deriveKeyFromMnemonicAndPath(\n  mnemonic: string,\n  hdPath: string\n): Buffer | undefined {\n  const {\n    mnemonicToSeedSync,\n  }: {\n    mnemonicToSeedSync: typeof mnemonicToSeedSyncT;\n  } = require(\"ethereum-cryptography/bip39\");\n  const seed = mnemonicToSeedSync(mnemonic);\n\n  const {\n    HDKey,\n  }: {\n    HDKey: typeof HDKeyT;\n  } = require(\"ethereum-cryptography/hdkey\");\n\n  const masterKey = HDKey.fromMasterSeed(seed);\n  const derived = masterKey.derive(hdPath);\n\n  return derived.privateKey === null ? undefined : derived.privateKey;\n}\n"]},"metadata":{},"sourceType":"script"}