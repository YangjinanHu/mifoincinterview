{"ast":null,"code":"// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1); // eslint-disable-next-line no-plusplus\n\n      up++;\n    } else if (up) {\n      parts.splice(i, 1); // eslint-disable-next-line no-plusplus\n\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n} // Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\n\n\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\n\nfunction splitPath(filename) {\n  var parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n} // path.resolve([from ...], to)\n// posix version\n\n/** JSDoc */\n\n\nexport function resolve() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resolvedPath = '';\n  var resolvedAbsolute = false;\n\n  for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? args[i] : '/'; // Skip empty entries\n\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + \"/\" + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  } // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n  // Normalize the path\n\n\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n/** JSDoc */\n\nfunction trim(arr) {\n  var start = 0;\n\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  var end = arr.length - 1;\n\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n\n  return arr.slice(start, end - start + 1);\n} // path.relative(from, to)\n// posix version\n\n/** JSDoc */\n\n\nexport function relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n} // path.normalize(path)\n// posix version\n\n/** JSDoc */\n\nexport function normalizePath(path) {\n  var isPathAbsolute = isAbsolute(path);\n  var trailingSlash = path.substr(-1) === '/'; // Normalize the path\n\n  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n} // posix version\n\n/** JSDoc */\n\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n} // posix version\n\n/** JSDoc */\n\nexport function join() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return normalizePath(args.join('/'));\n}\n/** JSDoc */\n\nexport function dirname(path) {\n  var result = splitPath(path);\n  var root = result[0];\n  var dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n/** JSDoc */\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n\n  return f;\n}","map":{"version":3,"mappings":"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","names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","resolve","args","resolvedPath","resolvedAbsolute","path","charAt","split","filter","p","join","trim","arr","start","end","relative","from","to","substr","fromParts","toParts","Math","min","samePartsLength","outputParts","push","concat","normalizePath","isPathAbsolute","isAbsolute","trailingSlash","normalizedPath","dirname","result","root","dir","basename","ext","f"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/utils/src/path.ts"],"sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  const parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n"]},"metadata":{},"sourceType":"module"}