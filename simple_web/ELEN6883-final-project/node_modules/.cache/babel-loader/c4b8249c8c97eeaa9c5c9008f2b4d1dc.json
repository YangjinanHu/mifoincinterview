{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { logger } from '@sentry/utils';\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\n\nvar Express =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Express(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Express.id;\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Express.prototype.setupOnce = function () {\n    if (!this._router) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n\n    instrumentMiddlewares(this._router, this._methods);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Express.id = 'Express';\n  return Express;\n}();\n\nexport { Express };\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\n\nfunction wrap(fn, method) {\n  var arity = fn.length;\n\n  switch (arity) {\n    case 2:\n      {\n        return function (req, res) {\n          var transaction = res.__sentry_transaction;\n\n          if (transaction) {\n            var span_1 = transaction.startChild({\n              description: fn.name,\n              op: \"middleware.\" + method\n            });\n            res.once('finish', function () {\n              span_1.finish();\n            });\n          }\n\n          return fn.call(this, req, res);\n        };\n      }\n\n    case 3:\n      {\n        return function (req, res, next) {\n          var _a;\n\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"middleware.\" + method\n          });\n          fn.call(this, req, res, function () {\n            var args = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, __spread([this], args));\n          });\n        };\n      }\n\n    case 4:\n      {\n        return function (err, req, res, next) {\n          var _a;\n\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"middleware.\" + method\n          });\n          fn.call(this, err, req, res, function () {\n            var args = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, __spread([this], args));\n          });\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"Express middleware takes 2-4 arguments. Got: \" + arity);\n      }\n  }\n}\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\n\n\nfunction wrapMiddlewareArgs(args, method) {\n  return args.map(function (arg) {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map(function (a) {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n/**\n * Patches original router to utilize our tracing functionality\n */\n\n\nfunction patchMiddleware(router, method) {\n  var originalCallback = router[method];\n\n  router[method] = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return originalCallback.call.apply(originalCallback, __spread([this], wrapMiddlewareArgs(args, method)));\n  };\n\n  return router;\n}\n/**\n * Patches original router methods\n */\n\n\nfunction instrumentMiddlewares(router, methods) {\n  if (methods === void 0) {\n    methods = [];\n  }\n\n  methods.forEach(function (method) {\n    return patchMiddleware(router, method);\n  });\n}","map":{"version":3,"mappings":"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","names":["logger","options","Express","id","_router","router","app","_methods","Array","isArray","methods","concat","error","instrumentMiddlewares","wrap","fn","method","arity","length","req","res","transaction","__sentry_transaction","span_1","startChild","description","name","op","once","finish","call","next","span","_a","args","apply","__spread","err","Error","wrapMiddlewareArgs","map","arg","a","patchMiddleware","originalCallback","forEach"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/tracing/src/integrations/express.ts"],"sourcesContent":["import { Integration, Transaction } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\ntype Method =\n  | 'all'\n  | 'get'\n  | 'post'\n  | 'put'\n  | 'delete'\n  | 'patch'\n  | 'options'\n  | 'head'\n  | 'checkout'\n  | 'copy'\n  | 'lock'\n  | 'merge'\n  | 'mkactivity'\n  | 'mkcol'\n  | 'move'\n  | 'm-search'\n  | 'notify'\n  | 'purge'\n  | 'report'\n  | 'search'\n  | 'subscribe'\n  | 'trace'\n  | 'unlock'\n  | 'unsubscribe'\n  | 'use';\n\ntype Router = {\n  [method in Method]: (...args: any) => any; // eslint-disable-line @typescript-eslint/no-explicit-any\n};\n\ninterface ExpressResponse {\n  once(name: string, callback: () => void): void;\n}\n\n/**\n * Internal helper for `__sentry_transaction`\n * @hidden\n */\ninterface SentryTracingResponse {\n  __sentry_transaction?: Transaction;\n}\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nexport class Express implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Express';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Express.id;\n\n  /**\n   * Express App instance\n   */\n  private readonly _router?: Router;\n  private readonly _methods?: Method[];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { app?: Router; router?: Router; methods?: Method[] } = {}) {\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!this._router) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._router, this._methods);\n  }\n}\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn: Function, method: Method): (...args: any[]) => void {\n  const arity = fn.length;\n\n  switch (arity) {\n    case 2: {\n      return function(this: NodeJS.Global, req: unknown, res: ExpressResponse & SentryTracingResponse): void {\n        const transaction = res.__sentry_transaction;\n        if (transaction) {\n          const span = transaction.startChild({\n            description: fn.name,\n            op: `middleware.${method}`,\n          });\n          res.once('finish', () => {\n            span.finish();\n          });\n        }\n        return fn.call(this, req, res);\n      };\n    }\n    case 3: {\n      return function(\n        this: NodeJS.Global,\n        req: unknown,\n        res: ExpressResponse & SentryTracingResponse,\n        next: () => void,\n      ): void {\n        const transaction = res.__sentry_transaction;\n        const span = transaction?.startChild({\n          description: fn.name,\n          op: `middleware.${method}`,\n        });\n        fn.call(this, req, res, function(this: NodeJS.Global, ...args: unknown[]): void {\n          span?.finish();\n          next.call(this, ...args);\n        });\n      };\n    }\n    case 4: {\n      return function(\n        this: NodeJS.Global,\n        err: Error,\n        req: Request,\n        res: Response & SentryTracingResponse,\n        next: () => void,\n      ): void {\n        const transaction = res.__sentry_transaction;\n        const span = transaction?.startChild({\n          description: fn.name,\n          op: `middleware.${method}`,\n        });\n        fn.call(this, err, req, res, function(this: NodeJS.Global, ...args: unknown[]): void {\n          span?.finish();\n          next.call(this, ...args);\n        });\n      };\n    }\n    default: {\n      throw new Error(`Express middleware takes 2-4 arguments. Got: ${arity}`);\n    }\n  }\n}\n\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args: unknown[], method: Method): unknown[] {\n  return args.map((arg: unknown) => {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map((a: unknown) => {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router: Router, method: Method): Router {\n  const originalCallback = router[method];\n\n  router[method] = function(...args: unknown[]): void {\n    return originalCallback.call(this, ...wrapMiddlewareArgs(args, method));\n  };\n\n  return router;\n}\n\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router: Router, methods: Method[] = []): void {\n  methods.forEach((method: Method) => patchMiddleware(router, method));\n}\n"]},"metadata":{},"sourceType":"module"}