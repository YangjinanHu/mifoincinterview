{"ast":null,"code":"'use strict';\n\nconst {\n  readdir: _readdir,\n  readdirSync\n} = require('fs');\n\nconst {\n  platform\n} = require('os');\n\nconst {\n  isAbsolute,\n  normalize\n} = require('path');\n\nconst {\n  promisify: pify\n} = require('util');\n\nconst readdir = pify(_readdir);\nconst isWindows = platform() === 'win32';\nconst delimiter = isWindows ? '\\\\' : '/';\nmodule.exports = {\n  trueCasePath: _trueCasePath({\n    sync: false\n  }),\n  trueCasePathSync: _trueCasePath({\n    sync: true\n  })\n};\n\nfunction getRelevantFilePathSegments(filePath) {\n  return filePath.split(delimiter).filter(s => s !== '');\n}\n\nfunction escapeString(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction matchCaseInsensitive(fileOrDirectory, directoryContents, filePath) {\n  const caseInsensitiveRegex = new RegExp(`^${escapeString(fileOrDirectory)}$`, 'i');\n\n  for (const file of directoryContents) {\n    if (caseInsensitiveRegex.test(file)) return file;\n  }\n\n  throw new Error(`[true-case-path]: Called with ${filePath}, but no matching file exists`);\n}\n\nfunction _trueCasePath(_ref) {\n  let {\n    sync\n  } = _ref;\n  return (filePath, basePath) => {\n    if (basePath) {\n      if (!isAbsolute(basePath)) {\n        throw new Error(`[true-case-path]: basePath argument must be absolute. Received \"${basePath}\"`);\n      }\n\n      basePath = normalize(basePath);\n    }\n\n    filePath = normalize(filePath);\n    const segments = getRelevantFilePathSegments(filePath);\n\n    if (isAbsolute(filePath)) {\n      if (basePath) {\n        throw new Error('[true-case-path]: filePath must be relative when used with basePath');\n      }\n\n      basePath = isWindows ? segments.shift().toUpperCase() // drive letter\n      : '';\n    } else if (!basePath) {\n      basePath = process.cwd();\n    }\n\n    return sync ? iterateSync(basePath, filePath, segments) : iterateAsync(basePath, filePath, segments);\n  };\n}\n\nfunction iterateSync(basePath, filePath, segments) {\n  return segments.reduce((realPath, fileOrDirectory) => realPath + delimiter + matchCaseInsensitive(fileOrDirectory, readdirSync(realPath + delimiter), filePath), basePath);\n}\n\nasync function iterateAsync(basePath, filePath, segments) {\n  return await segments.reduce(async (realPathPromise, fileOrDirectory) => (await realPathPromise) + delimiter + matchCaseInsensitive(fileOrDirectory, await readdir((await realPathPromise) + delimiter), filePath), basePath);\n}","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/true-case-path/index.js"],"names":["readdir","_readdir","readdirSync","require","platform","isAbsolute","normalize","promisify","pify","isWindows","delimiter","module","exports","trueCasePath","_trueCasePath","sync","trueCasePathSync","getRelevantFilePathSegments","filePath","split","filter","s","escapeString","str","replace","matchCaseInsensitive","fileOrDirectory","directoryContents","caseInsensitiveRegex","RegExp","file","test","Error","basePath","segments","shift","toUpperCase","process","cwd","iterateSync","iterateAsync","reduce","realPath","realPathPromise"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { readdir: _readdir, readdirSync } = require('fs')\nconst { platform } = require('os')\nconst { isAbsolute, normalize } = require('path')\nconst { promisify: pify } = require('util')\n\nconst readdir = pify(_readdir)\nconst isWindows = platform() === 'win32'\nconst delimiter = isWindows ? '\\\\' : '/'\n\nmodule.exports = {\n  trueCasePath: _trueCasePath({ sync: false }),\n  trueCasePathSync: _trueCasePath({ sync: true })\n}\n\nfunction getRelevantFilePathSegments(filePath) {\n  return filePath.split(delimiter).filter((s) => s !== '')\n}\n\nfunction escapeString(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\nfunction matchCaseInsensitive(fileOrDirectory, directoryContents, filePath) {\n  const caseInsensitiveRegex = new RegExp(\n    `^${escapeString(fileOrDirectory)}$`,\n    'i'\n  )\n  for (const file of directoryContents) {\n    if (caseInsensitiveRegex.test(file)) return file\n  }\n  throw new Error(\n    `[true-case-path]: Called with ${filePath}, but no matching file exists`\n  )\n}\n\nfunction _trueCasePath({ sync }) {\n  return (filePath, basePath) => {\n    if (basePath) {\n      if (!isAbsolute(basePath)) {\n        throw new Error(\n          `[true-case-path]: basePath argument must be absolute. Received \"${basePath}\"`\n        )\n      }\n      basePath = normalize(basePath)\n    }\n    filePath = normalize(filePath)\n    const segments = getRelevantFilePathSegments(filePath)\n    if (isAbsolute(filePath)) {\n      if (basePath) {\n        throw new Error(\n          '[true-case-path]: filePath must be relative when used with basePath'\n        )\n      }\n      basePath = isWindows\n        ? segments.shift().toUpperCase() // drive letter\n        : ''\n    } else if (!basePath) {\n      basePath = process.cwd()\n    }\n    return sync\n      ? iterateSync(basePath, filePath, segments)\n      : iterateAsync(basePath, filePath, segments)\n  }\n}\n\nfunction iterateSync(basePath, filePath, segments) {\n  return segments.reduce(\n    (realPath, fileOrDirectory) =>\n      realPath +\n      delimiter +\n      matchCaseInsensitive(\n        fileOrDirectory,\n        readdirSync(realPath + delimiter),\n        filePath\n      ),\n    basePath\n  )\n}\n\nasync function iterateAsync(basePath, filePath, segments) {\n  return await segments.reduce(\n    async (realPathPromise, fileOrDirectory) =>\n      (await realPathPromise) +\n      delimiter +\n      matchCaseInsensitive(\n        fileOrDirectory,\n        await readdir((await realPathPromise) + delimiter),\n        filePath\n      ),\n    basePath\n  )\n}\n"]},"metadata":{},"sourceType":"script"}