{"ast":null,"code":"import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsFetch() {\n  if (!('fetch' in getGlobalObject())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nfunction isNativeFetch(func) {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\n\n\nexport function supportsNativeFetch() {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  var global = getGlobalObject(); // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  } // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n\n\n  var result = false;\n  var doc = global.document; // eslint-disable-next-line deprecation/deprecation\n\n  if (doc && typeof doc.createElement === \"function\") {\n    try {\n      var sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsReportingObserver() {\n  return 'ReportingObserver' in getGlobalObject();\n}\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  var global = getGlobalObject();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var chrome = global.chrome;\n  var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n  var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n  return !isChromePackagedApp && hasHistoryApi;\n}","map":{"version":3,"mappings":"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","names":["logger","getGlobalObject","supportsErrorEvent","ErrorEvent","e","supportsDOMError","DOMError","supportsDOMException","DOMException","supportsFetch","Headers","Request","Response","isNativeFetch","func","test","toString","supportsNativeFetch","global","fetch","result","doc","document","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","err","warn","supportsReportingObserver","supportsReferrerPolicy","referrerPolicy","supportsHistory","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/utils/src/supports.ts"],"sourcesContent":["import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n"]},"metadata":{},"sourceType":"module"}