{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reporter = exports.SENTRY_DSN = void 0;\n\nconst errors_1 = require(\"../core/errors\");\n\nconst execution_mode_1 = require(\"../core/execution-mode\");\n\nconst errors_2 = require(\"../core/providers/errors\");\n\nconst ci_detection_1 = require(\"../util/ci-detection\");\n\nconst global_dir_1 = require(\"../util/global-dir\");\n\nconst packageInfo_1 = require(\"../util/packageInfo\");\n\nconst transport_1 = require(\"./transport\");\n\nexports.SENTRY_DSN = \"https://38ba58bb85fa409e9bb7f50d2c419bc2@o385026.ingest.sentry.io/5224869\";\n/**\n * This class acts as a global singleton for reporting errors through Sentry.\n */\n\nclass Reporter {\n  constructor() {\n    this.initialized = false;\n    this.verbose = false;\n    this.enabled = true;\n\n    if ((0, ci_detection_1.isRunningOnCiServer)()) {\n      this.enabled = false;\n    } // set HARDHAT_ENABLE_SENTRY=true to enable sentry during development (for local testing)\n\n\n    if ((0, execution_mode_1.isLocalDev)() && process.env.HARDHAT_ENABLE_SENTRY === undefined) {\n      this.enabled = false;\n    }\n  }\n\n  static reportError(error) {\n    const instance = Reporter._getInstance();\n\n    if (!instance.enabled) {\n      return;\n    }\n\n    if (!Reporter.shouldReport(error)) {\n      return;\n    }\n\n    instance.init();\n\n    const Sentry = require(\"@sentry/node\");\n\n    Sentry.setExtra(\"verbose\", instance.verbose);\n    Sentry.setExtra(\"configPath\", instance.configPath);\n    Sentry.setExtra(\"nodeVersion\", process.version);\n    const hardhatVersion = (0, packageInfo_1.getHardhatVersion)();\n    Sentry.setExtra(\"hardhatVersion\", hardhatVersion);\n    Sentry.captureException(error);\n    return true;\n  }\n  /**\n   * Enable or disable reporting. When disabled, all calls to `reportError` are\n   * no-ops.\n   */\n\n\n  static setEnabled(enabled) {\n    const instance = Reporter._getInstance();\n\n    instance.enabled = enabled;\n  }\n  /**\n   * Enable or disable verbose output. This is necessary to pass the correct\n   * environment variable to the transport subprocess.\n   */\n\n\n  static setVerbose(verbose) {\n    const instance = Reporter._getInstance();\n\n    instance.verbose = verbose;\n  }\n  /**\n   * The path to the hardhat config file. We use this when files are anonymized,\n   * since the hardhat config is the only file in the user's project that is not\n   * anonymized.\n   */\n\n\n  static setConfigPath(configPath) {\n    const instance = Reporter._getInstance();\n\n    instance.configPath = configPath;\n  }\n  /**\n   * Wait until all Sentry events were sent or until `timeout` milliseconds are\n   * elapsed.\n   *\n   * This needs to be used before calling `process.exit`, otherwise some events\n   * might get lost.\n   */\n\n\n  static async close(timeout) {\n    const instance = Reporter._getInstance();\n\n    if (!instance.enabled || !instance.initialized) {\n      return true;\n    }\n\n    const Sentry = await Promise.resolve().then(() => __importStar(require(\"@sentry/node\")));\n    return Sentry.close(timeout);\n  }\n\n  static shouldReport(error) {\n    if (errors_1.HardhatError.isHardhatError(error) && !error.errorDescriptor.shouldBeReported) {\n      return false;\n    }\n\n    if (errors_1.HardhatPluginError.isHardhatPluginError(error)) {\n      if (errors_1.NomicLabsHardhatPluginError.isNomicLabsHardhatPluginError(error)) {\n        return error.shouldBeReported;\n      } // don't log errors from third-party plugins\n\n\n      return false;\n    } // We don't report network related errors\n\n\n    if (error instanceof errors_2.ProviderError) {\n      return false;\n    }\n\n    if (!Reporter._hasTelemetryConsent()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  static _getInstance() {\n    if (this._instance === undefined) {\n      this._instance = new Reporter();\n    }\n\n    return this._instance;\n  }\n\n  static _hasTelemetryConsent() {\n    const telemetryConsent = (0, global_dir_1.hasConsentedTelemetry)();\n    return telemetryConsent === true;\n  }\n\n  init() {\n    if (this.initialized) {\n      return;\n    }\n\n    const Sentry = require(\"@sentry/node\");\n\n    const linkedErrorsIntegration = new Sentry.Integrations.LinkedErrors({\n      key: \"parent\"\n    });\n    Sentry.init({\n      dsn: exports.SENTRY_DSN,\n      transport: (0, transport_1.getSubprocessTransport)(),\n      integrations: () => [linkedErrorsIntegration]\n    });\n    this.initialized = true;\n  }\n\n}\n\nexports.Reporter = Reporter;","map":{"version":3,"mappings":"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","names":["exports","Reporter","constructor","enabled","process","env","HARDHAT_ENABLE_SENTRY","undefined","reportError","error","instance","_getInstance","shouldReport","init","Sentry","require","setExtra","verbose","configPath","version","hardhatVersion","captureException","setEnabled","setVerbose","setConfigPath","close","timeout","initialized","errors_1","isHardhatError","errorDescriptor","shouldBeReported","isHardhatPluginError","isNomicLabsHardhatPluginError","errors_2","_hasTelemetryConsent","_instance","telemetryConsent","linkedErrorsIntegration","Integrations","LinkedErrors","key","dsn","transport","integrations"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/sentry/reporter.ts"],"sourcesContent":["import {\n  HardhatError,\n  HardhatPluginError,\n  NomicLabsHardhatPluginError,\n} from \"../core/errors\";\nimport { isLocalDev } from \"../core/execution-mode\";\nimport { ProviderError } from \"../core/providers/errors\";\nimport { isRunningOnCiServer } from \"../util/ci-detection\";\nimport { hasConsentedTelemetry } from \"../util/global-dir\";\nimport { getHardhatVersion } from \"../util/packageInfo\";\n\nimport { getSubprocessTransport } from \"./transport\";\n\nexport const SENTRY_DSN =\n  \"https://38ba58bb85fa409e9bb7f50d2c419bc2@o385026.ingest.sentry.io/5224869\";\n\n/**\n * This class acts as a global singleton for reporting errors through Sentry.\n */\nexport class Reporter {\n  public static reportError(error: Error) {\n    const instance = Reporter._getInstance();\n\n    if (!instance.enabled) {\n      return;\n    }\n\n    if (!Reporter.shouldReport(error)) {\n      return;\n    }\n\n    instance.init();\n\n    const Sentry = require(\"@sentry/node\");\n    Sentry.setExtra(\"verbose\", instance.verbose);\n    Sentry.setExtra(\"configPath\", instance.configPath);\n    Sentry.setExtra(\"nodeVersion\", process.version);\n\n    const hardhatVersion = getHardhatVersion();\n    Sentry.setExtra(\"hardhatVersion\", hardhatVersion);\n\n    Sentry.captureException(error);\n\n    return true;\n  }\n\n  /**\n   * Enable or disable reporting. When disabled, all calls to `reportError` are\n   * no-ops.\n   */\n  public static setEnabled(enabled: boolean) {\n    const instance = Reporter._getInstance();\n    instance.enabled = enabled;\n  }\n\n  /**\n   * Enable or disable verbose output. This is necessary to pass the correct\n   * environment variable to the transport subprocess.\n   */\n  public static setVerbose(verbose: boolean) {\n    const instance = Reporter._getInstance();\n    instance.verbose = verbose;\n  }\n\n  /**\n   * The path to the hardhat config file. We use this when files are anonymized,\n   * since the hardhat config is the only file in the user's project that is not\n   * anonymized.\n   */\n  public static setConfigPath(configPath: string) {\n    const instance = Reporter._getInstance();\n    instance.configPath = configPath;\n  }\n\n  /**\n   * Wait until all Sentry events were sent or until `timeout` milliseconds are\n   * elapsed.\n   *\n   * This needs to be used before calling `process.exit`, otherwise some events\n   * might get lost.\n   */\n  public static async close(timeout: number): Promise<boolean> {\n    const instance = Reporter._getInstance();\n    if (!instance.enabled || !instance.initialized) {\n      return true;\n    }\n\n    const Sentry = await import(\"@sentry/node\");\n    return Sentry.close(timeout);\n  }\n\n  public static shouldReport(error: Error): boolean {\n    if (\n      HardhatError.isHardhatError(error) &&\n      !error.errorDescriptor.shouldBeReported\n    ) {\n      return false;\n    }\n\n    if (HardhatPluginError.isHardhatPluginError(error)) {\n      if (NomicLabsHardhatPluginError.isNomicLabsHardhatPluginError(error)) {\n        return error.shouldBeReported;\n      }\n\n      // don't log errors from third-party plugins\n      return false;\n    }\n\n    // We don't report network related errors\n    if (error instanceof ProviderError) {\n      return false;\n    }\n\n    if (!Reporter._hasTelemetryConsent()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private static _instance: Reporter;\n\n  private static _getInstance(): Reporter {\n    if (this._instance === undefined) {\n      this._instance = new Reporter();\n    }\n\n    return this._instance;\n  }\n\n  private static _hasTelemetryConsent(): boolean {\n    const telemetryConsent = hasConsentedTelemetry();\n\n    return telemetryConsent === true;\n  }\n\n  public enabled: boolean;\n  public initialized = false;\n  public verbose = false;\n  public configPath?: string;\n\n  private constructor() {\n    this.enabled = true;\n    if (isRunningOnCiServer()) {\n      this.enabled = false;\n    }\n\n    // set HARDHAT_ENABLE_SENTRY=true to enable sentry during development (for local testing)\n    if (isLocalDev() && process.env.HARDHAT_ENABLE_SENTRY === undefined) {\n      this.enabled = false;\n    }\n  }\n\n  public init() {\n    if (this.initialized) {\n      return;\n    }\n\n    const Sentry = require(\"@sentry/node\");\n\n    const linkedErrorsIntegration = new Sentry.Integrations.LinkedErrors({\n      key: \"parent\",\n    });\n\n    Sentry.init({\n      dsn: SENTRY_DSN,\n      transport: getSubprocessTransport(),\n      integrations: () => [linkedErrorsIntegration],\n    });\n\n    this.initialized = true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}