{"ast":null,"code":"'use strict';\n\nvar Test = require('../test');\n\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants.EVENT_FILE_PRE_REQUIRE;\n/**\n * TDD-style interface:\n *\n *      suite('Array', function() {\n *        suite('#indexOf()', function() {\n *          suiteSetup(function() {\n *\n *          });\n *\n *          test('should return -1 when not present', function() {\n *\n *          });\n *\n *          test('should return the index when present', function() {\n *\n *          });\n *\n *          suiteTeardown(function() {\n *\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\n\n\nmodule.exports = function (suite) {\n  var suites = [suite];\n  suite.on(EVENT_FILE_PRE_REQUIRE, function (context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.setup = common.beforeEach;\n    context.teardown = common.afterEach;\n    context.suiteSetup = common.before;\n    context.suiteTeardown = common.after;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites and/or tests.\n     */\n\n    context.suite = function (title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n    /**\n     * Pending suite.\n     */\n\n\n    context.suite.skip = function (title, fn) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n    /**\n     * Exclusive test-case.\n     */\n\n\n    context.suite.only = function (title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n    /**\n     * Describe a specification or test-case with the given `title` and\n     * callback `fn` acting as a thunk.\n     */\n\n\n    context.test = function (title, fn) {\n      var suite = suites[0];\n\n      if (suite.isPending()) {\n        fn = null;\n      }\n\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n    /**\n     * Exclusive test-case.\n     */\n\n\n    context.test.only = function (title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n\nmodule.exports.description = 'traditional \"suite\"/\"test\" instead of BDD\\'s \"describe\"/\"it\"';","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/interfaces/tdd.js"],"names":["Test","require","EVENT_FILE_PRE_REQUIRE","constants","module","exports","suite","suites","on","context","file","mocha","common","setup","beforeEach","teardown","afterEach","suiteSetup","before","suiteTeardown","after","run","options","delay","runWithSuite","title","fn","create","skip","only","test","isPending","addTest","retries","description"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Test = require('../test');\nvar EVENT_FILE_PRE_REQUIRE = require('../suite').constants\n  .EVENT_FILE_PRE_REQUIRE;\n\n/**\n * TDD-style interface:\n *\n *      suite('Array', function() {\n *        suite('#indexOf()', function() {\n *          suiteSetup(function() {\n *\n *          });\n *\n *          test('should return -1 when not present', function() {\n *\n *          });\n *\n *          test('should return the index when present', function() {\n *\n *          });\n *\n *          suiteTeardown(function() {\n *\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on(EVENT_FILE_PRE_REQUIRE, function(context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.setup = common.beforeEach;\n    context.teardown = common.afterEach;\n    context.suiteSetup = common.before;\n    context.suiteTeardown = common.after;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n\n    /**\n     * Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites and/or tests.\n     */\n    context.suite = function(title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Pending suite.\n     */\n    context.suite.skip = function(title, fn) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n    context.suite.only = function(title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Describe a specification or test-case with the given `title` and\n     * callback `fn` acting as a thunk.\n     */\n    context.test = function(title, fn) {\n      var suite = suites[0];\n      if (suite.isPending()) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n\nmodule.exports.description =\n  'traditional \"suite\"/\"test\" instead of BDD\\'s \"describe\"/\"it\"';\n"]},"metadata":{},"sourceType":"script"}