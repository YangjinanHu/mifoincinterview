{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompilerDownloader = exports.CompilerPlatform = void 0;\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst errors_1 = require(\"../../core/errors\");\n\nconst errors_list_1 = require(\"../../core/errors-list\");\n\nvar CompilerPlatform;\n\n(function (CompilerPlatform) {\n  CompilerPlatform[\"LINUX\"] = \"linux-amd64\";\n  CompilerPlatform[\"WINDOWS\"] = \"windows-amd64\";\n  CompilerPlatform[\"MACOS\"] = \"macosx-amd64\";\n  CompilerPlatform[\"WASM\"] = \"wasm\";\n})(CompilerPlatform = exports.CompilerPlatform || (exports.CompilerPlatform = {}));\n\nconst log = (0, debug_1.default)(\"hardhat:core:solidity:downloader\");\nconst COMPILER_FILES_DIR_URL_SOLC = \"https://binaries.soliditylang.org/\";\n\nasync function downloadFile(url, destinationFile) {\n  const {\n    download\n  } = await Promise.resolve().then(() => __importStar(require(\"../../util/download\")));\n  log(`Downloading from ${url} to ${destinationFile}`);\n  await download(url, destinationFile);\n}\n\nclass CompilerDownloader {\n  constructor(_compilersDir) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a, _b;\n\n    this._compilersDir = _compilersDir;\n    this._download = (_a = options.download) !== null && _a !== void 0 ? _a : downloadFile;\n    this._forceSolcJs = (_b = options.forceSolcJs) !== null && _b !== void 0 ? _b : false;\n  }\n\n  async isCompilerDownloaded(version) {\n    const compilerBuild = await this.getCompilerBuild(version);\n\n    const downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n\n    return this._fileExists(downloadedFilePath);\n  }\n\n  async verifyCompiler(compilerBuild, downloadedFilePath) {\n    const ethereumjsUtil = await Promise.resolve().then(() => __importStar(require(\"ethereumjs-util\")));\n    const expectedKeccak256 = compilerBuild.keccak256;\n    const compiler = await fs_extra_1.default.readFile(downloadedFilePath);\n    const compilerKeccak256 = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak(compiler));\n\n    if (expectedKeccak256 !== compilerKeccak256) {\n      await fs_extra_1.default.unlink(downloadedFilePath);\n      await fs_extra_1.default.unlink(this.getCompilersListPath(compilerBuild.platform));\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_DOWNLOAD, {\n        remoteVersion: compilerBuild.version\n      });\n    }\n  }\n\n  async getDownloadedCompilerPath(version) {\n    const {\n      default: AdmZip\n    } = await Promise.resolve().then(() => __importStar(require(\"adm-zip\")));\n\n    try {\n      const compilerBuild = await this.getCompilerBuild(version);\n\n      let downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n\n      if (!(await this._fileExists(downloadedFilePath))) {\n        await this.downloadCompiler(compilerBuild, downloadedFilePath);\n      }\n\n      await this.verifyCompiler(compilerBuild, downloadedFilePath);\n\n      if (compilerBuild.platform === CompilerPlatform.LINUX || compilerBuild.platform === CompilerPlatform.MACOS) {\n        fs_extra_1.default.chmodSync(downloadedFilePath, 0o755);\n      } else if (compilerBuild.platform === CompilerPlatform.WINDOWS) {\n        // some window builds are zipped, some are not\n        if (downloadedFilePath.endsWith(\".zip\")) {\n          const zip = new AdmZip(downloadedFilePath);\n          zip.extractAllTo(path_1.default.join(this._compilersDir, compilerBuild.version));\n          downloadedFilePath = path_1.default.join(this._compilersDir, compilerBuild.version, \"solc.exe\");\n        }\n      }\n\n      return {\n        compilerPath: downloadedFilePath,\n        platform: compilerBuild.platform\n      };\n    } catch (e) {\n      if (e instanceof Error) {\n        if (errors_1.HardhatError.isHardhatError(e)) {\n          throw e;\n        }\n\n        console.warn(chalk_1.default.yellow(`There was an unexpected problem downloading the compiler: ${e.message}`));\n      }\n    }\n  }\n\n  async getCompilersList(platform) {\n    let pendingRetries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n    if (!(await this.compilersListExists(platform))) {\n      await this.downloadCompilersList(platform);\n    }\n\n    try {\n      return await fs_extra_1.default.readJSON(this.getCompilersListPath(platform));\n    } catch (error) {\n      // if parsing throws a syntax error, redownload and parse once more\n      if (!(error instanceof SyntaxError) || pendingRetries === 0) {\n        // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n        throw error;\n      } // remove the malformed list and retry\n\n\n      await fs_extra_1.default.remove(this.getCompilersListPath(platform));\n      return this.getCompilersList(platform, pendingRetries - 1);\n    }\n  }\n\n  async getCompilerBuild(version) {\n    const platform = this._getCurrentPlarform();\n\n    if (await this._versionExists(version, platform)) {\n      try {\n        return await this._getCompilerBuildByPlatform(version, platform);\n      } catch (_a) {\n        log(\"Couldn't download native compiler, using solcjs instead\");\n      }\n    }\n\n    return this._getCompilerBuildByPlatform(version, CompilerPlatform.WASM);\n  }\n\n  async downloadCompilersList(platform) {\n    try {\n      await this._download(getCompilerListURL(platform), this.getCompilersListPath(platform));\n    } catch (error) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.VERSION_LIST_DOWNLOAD_FAILED, {}, error);\n    }\n  }\n\n  async downloadCompiler(compilerBuild, downloadedFilePath) {\n    log(`Downloading compiler version ${compilerBuild.version} platform ${compilerBuild.platform}`);\n    const compilerUrl = getCompilerURL(compilerBuild.platform, compilerBuild.path);\n\n    try {\n      await this._download(compilerUrl, downloadedFilePath);\n    } catch (error) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.DOWNLOAD_FAILED, {\n        remoteVersion: compilerBuild.version\n      }, error);\n    }\n  }\n\n  async compilersListExists(platform) {\n    return fs_extra_1.default.pathExists(this.getCompilersListPath(platform));\n  }\n\n  getCompilersListPath(platform) {\n    return path_1.default.join(this._compilersDir, platform, \"list.json\");\n  }\n\n  _getDownloadedFilePath(compilerBuild) {\n    return path_1.default.join(this._compilersDir, compilerBuild.platform, compilerBuild.path);\n  }\n\n  async _fetchVersionPath(version, platform) {\n    const compilersListExisted = await this.compilersListExists(platform);\n    let list = await this.getCompilersList(platform);\n    let compilerBuildPath = list.releases[version]; // We may need to re-download the compilers list.\n\n    if (compilerBuildPath === undefined && compilersListExisted) {\n      await fs_extra_1.default.unlink(this.getCompilersListPath(platform));\n      list = await this.getCompilersList(platform);\n      compilerBuildPath = list.releases[version];\n    }\n\n    return compilerBuildPath;\n  }\n\n  async _versionExists(version, platform) {\n    const versionPath = await this._fetchVersionPath(version, platform);\n    return versionPath !== undefined;\n  }\n\n  async _getCompilerBuildByPlatform(version, platform) {\n    const compilerBuildPath = await this._fetchVersionPath(version, platform);\n    const list = await this.getCompilersList(platform);\n    const compilerBuild = list.builds.find(b => b.path === compilerBuildPath);\n\n    if (compilerBuild === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_VERSION, {\n        version\n      });\n    }\n\n    compilerBuild.platform = platform;\n    return compilerBuild;\n  }\n\n  async _fileExists(filePath) {\n    return fs_extra_1.default.pathExists(filePath);\n  }\n\n  _getCurrentPlarform() {\n    if (this._forceSolcJs) {\n      return CompilerPlatform.WASM;\n    }\n\n    switch (os_1.default.platform()) {\n      case \"win32\":\n        return CompilerPlatform.WINDOWS;\n\n      case \"linux\":\n        return CompilerPlatform.LINUX;\n\n      case \"darwin\":\n        return CompilerPlatform.MACOS;\n\n      default:\n        return CompilerPlatform.WASM;\n    }\n  }\n\n}\n\nexports.CompilerDownloader = CompilerDownloader;\n\nfunction getCompilerURL(platform, filePath) {\n  return `${COMPILER_FILES_DIR_URL_SOLC}${platform}/${filePath}`;\n}\n\nfunction getCompilerListURL(platform) {\n  return getCompilerURL(platform, \"list.json\");\n}","map":{"version":3,"mappings":"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","names":["CompilerPlatform","exports","log","COMPILER_FILES_DIR_URL_SOLC","downloadFile","url","destinationFile","download","CompilerDownloader","constructor","_compilersDir","options","_download","_a","_forceSolcJs","forceSolcJs","_b","isCompilerDownloaded","version","compilerBuild","getCompilerBuild","downloadedFilePath","_getDownloadedFilePath","_fileExists","verifyCompiler","ethereumjsUtil","expectedKeccak256","keccak256","compiler","fs_extra_1","readFile","compilerKeccak256","bufferToHex","keccak","unlink","getCompilersListPath","platform","errors_1","errors_list_1","SOLC","INVALID_DOWNLOAD","remoteVersion","getDownloadedCompilerPath","default","AdmZip","downloadCompiler","LINUX","MACOS","chmodSync","WINDOWS","endsWith","zip","extractAllTo","path_1","join","compilerPath","e","Error","isHardhatError","console","warn","chalk_1","yellow","message","getCompilersList","pendingRetries","compilersListExists","downloadCompilersList","readJSON","error","SyntaxError","remove","_getCurrentPlarform","_versionExists","_getCompilerBuildByPlatform","WASM","getCompilerListURL","VERSION_LIST_DOWNLOAD_FAILED","compilerUrl","getCompilerURL","path","DOWNLOAD_FAILED","pathExists","_fetchVersionPath","compilersListExisted","list","compilerBuildPath","releases","undefined","versionPath","builds","find","b","INVALID_VERSION","filePath","os_1"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/solidity/compiler/downloader.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport debug from \"debug\";\nimport fsExtra from \"fs-extra\";\nimport os from \"os\";\nimport path from \"path\";\n\nimport { HardhatError } from \"../../core/errors\";\nimport { ERRORS } from \"../../core/errors-list\";\n\nexport interface CompilerBuild {\n  path: string;\n  version: string;\n  build: string;\n  longVersion: string;\n  keccak256: string;\n  urls: string[];\n  platform: CompilerPlatform;\n}\n\nexport enum CompilerPlatform {\n  LINUX = \"linux-amd64\",\n  WINDOWS = \"windows-amd64\",\n  MACOS = \"macosx-amd64\",\n  WASM = \"wasm\",\n}\n\ninterface CompilerPath {\n  compilerPath: string; // absolute path\n  platform: CompilerPlatform;\n}\n\nexport interface CompilersList {\n  builds: CompilerBuild[];\n  releases: {\n    [version: string]: string;\n  };\n  latestRelease: string;\n}\n\nconst log = debug(\"hardhat:core:solidity:downloader\");\n\nconst COMPILER_FILES_DIR_URL_SOLC = \"https://binaries.soliditylang.org/\";\n\nasync function downloadFile(\n  url: string,\n  destinationFile: string\n): Promise<void> {\n  const { download } = await import(\"../../util/download\");\n  log(`Downloading from ${url} to ${destinationFile}`);\n  await download(url, destinationFile);\n}\n\ntype CompilerDownloaderOptions = Partial<{\n  download: (url: string, destinationFile: string) => Promise<void>;\n  forceSolcJs: boolean;\n}>;\n\nexport class CompilerDownloader {\n  private readonly _download: (\n    url: string,\n    destinationFile: string\n  ) => Promise<void>;\n  private readonly _forceSolcJs: boolean;\n\n  constructor(\n    private readonly _compilersDir: string,\n    options: CompilerDownloaderOptions = {}\n  ) {\n    this._download = options.download ?? downloadFile;\n    this._forceSolcJs = options.forceSolcJs ?? false;\n  }\n\n  public async isCompilerDownloaded(version: string): Promise<boolean> {\n    const compilerBuild = await this.getCompilerBuild(version);\n    const downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n\n    return this._fileExists(downloadedFilePath);\n  }\n\n  public async verifyCompiler(\n    compilerBuild: CompilerBuild,\n    downloadedFilePath: string\n  ) {\n    const ethereumjsUtil = await import(\"ethereumjs-util\");\n\n    const expectedKeccak256 = compilerBuild.keccak256;\n    const compiler = await fsExtra.readFile(downloadedFilePath);\n\n    const compilerKeccak256 = ethereumjsUtil.bufferToHex(\n      ethereumjsUtil.keccak(compiler)\n    );\n\n    if (expectedKeccak256 !== compilerKeccak256) {\n      await fsExtra.unlink(downloadedFilePath);\n      await fsExtra.unlink(this.getCompilersListPath(compilerBuild.platform));\n\n      throw new HardhatError(ERRORS.SOLC.INVALID_DOWNLOAD, {\n        remoteVersion: compilerBuild.version,\n      });\n    }\n  }\n\n  public async getDownloadedCompilerPath(\n    version: string\n  ): Promise<CompilerPath | undefined> {\n    const { default: AdmZip } = await import(\"adm-zip\");\n\n    try {\n      const compilerBuild = await this.getCompilerBuild(version);\n\n      let downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n\n      if (!(await this._fileExists(downloadedFilePath))) {\n        await this.downloadCompiler(compilerBuild, downloadedFilePath);\n      }\n\n      await this.verifyCompiler(compilerBuild, downloadedFilePath);\n\n      if (\n        compilerBuild.platform === CompilerPlatform.LINUX ||\n        compilerBuild.platform === CompilerPlatform.MACOS\n      ) {\n        fsExtra.chmodSync(downloadedFilePath, 0o755);\n      } else if (compilerBuild.platform === CompilerPlatform.WINDOWS) {\n        // some window builds are zipped, some are not\n        if (downloadedFilePath.endsWith(\".zip\")) {\n          const zip = new AdmZip(downloadedFilePath);\n          zip.extractAllTo(\n            path.join(this._compilersDir, compilerBuild.version)\n          );\n          downloadedFilePath = path.join(\n            this._compilersDir,\n            compilerBuild.version,\n            \"solc.exe\"\n          );\n        }\n      }\n\n      return {\n        compilerPath: downloadedFilePath,\n        platform: compilerBuild.platform,\n      };\n    } catch (e) {\n      if (e instanceof Error) {\n        if (HardhatError.isHardhatError(e)) {\n          throw e;\n        }\n        console.warn(\n          chalk.yellow(\n            `There was an unexpected problem downloading the compiler: ${e.message}`\n          )\n        );\n      }\n    }\n  }\n\n  public async getCompilersList(\n    platform: CompilerPlatform,\n    pendingRetries: number = 3\n  ): Promise<CompilersList> {\n    if (!(await this.compilersListExists(platform))) {\n      await this.downloadCompilersList(platform);\n    }\n\n    try {\n      return await fsExtra.readJSON(this.getCompilersListPath(platform));\n    } catch (error) {\n      // if parsing throws a syntax error, redownload and parse once more\n      if (!(error instanceof SyntaxError) || pendingRetries === 0) {\n        // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n        throw error;\n      }\n\n      // remove the malformed list and retry\n      await fsExtra.remove(this.getCompilersListPath(platform));\n      return this.getCompilersList(platform, pendingRetries - 1);\n    }\n  }\n\n  public async getCompilerBuild(version: string): Promise<CompilerBuild> {\n    const platform = this._getCurrentPlarform();\n\n    if (await this._versionExists(version, platform)) {\n      try {\n        return await this._getCompilerBuildByPlatform(version, platform);\n      } catch {\n        log(\"Couldn't download native compiler, using solcjs instead\");\n      }\n    }\n\n    return this._getCompilerBuildByPlatform(version, CompilerPlatform.WASM);\n  }\n\n  public async downloadCompilersList(platform: CompilerPlatform) {\n    try {\n      await this._download(\n        getCompilerListURL(platform),\n        this.getCompilersListPath(platform)\n      );\n    } catch (error: any) {\n      throw new HardhatError(\n        ERRORS.SOLC.VERSION_LIST_DOWNLOAD_FAILED,\n        {},\n        error\n      );\n    }\n  }\n\n  public async downloadCompiler(\n    compilerBuild: CompilerBuild,\n    downloadedFilePath: string\n  ) {\n    log(\n      `Downloading compiler version ${compilerBuild.version} platform ${compilerBuild.platform}`\n    );\n\n    const compilerUrl = getCompilerURL(\n      compilerBuild.platform,\n      compilerBuild.path\n    );\n\n    try {\n      await this._download(compilerUrl, downloadedFilePath);\n    } catch (error) {\n      throw new HardhatError(\n        ERRORS.SOLC.DOWNLOAD_FAILED,\n        {\n          remoteVersion: compilerBuild.version,\n        },\n        error as Error\n      );\n    }\n  }\n\n  public async compilersListExists(platform: CompilerPlatform) {\n    return fsExtra.pathExists(this.getCompilersListPath(platform));\n  }\n\n  public getCompilersListPath(platform: CompilerPlatform) {\n    return path.join(this._compilersDir, platform, \"list.json\");\n  }\n\n  private _getDownloadedFilePath(compilerBuild: CompilerBuild): string {\n    return path.join(\n      this._compilersDir,\n      compilerBuild.platform,\n      compilerBuild.path\n    );\n  }\n\n  private async _fetchVersionPath(\n    version: string,\n    platform: CompilerPlatform\n  ): Promise<string | undefined> {\n    const compilersListExisted = await this.compilersListExists(platform);\n    let list = await this.getCompilersList(platform);\n    let compilerBuildPath = list.releases[version];\n\n    // We may need to re-download the compilers list.\n    if (compilerBuildPath === undefined && compilersListExisted) {\n      await fsExtra.unlink(this.getCompilersListPath(platform));\n\n      list = await this.getCompilersList(platform);\n      compilerBuildPath = list.releases[version];\n    }\n\n    return compilerBuildPath;\n  }\n\n  private async _versionExists(\n    version: string,\n    platform: CompilerPlatform\n  ): Promise<boolean> {\n    const versionPath = await this._fetchVersionPath(version, platform);\n    return versionPath !== undefined;\n  }\n\n  private async _getCompilerBuildByPlatform(\n    version: string,\n    platform: CompilerPlatform\n  ): Promise<CompilerBuild> {\n    const compilerBuildPath = await this._fetchVersionPath(version, platform);\n    const list = await this.getCompilersList(platform);\n    const compilerBuild = list.builds.find((b) => b.path === compilerBuildPath);\n\n    if (compilerBuild === undefined) {\n      throw new HardhatError(ERRORS.SOLC.INVALID_VERSION, { version });\n    }\n\n    compilerBuild.platform = platform;\n    return compilerBuild;\n  }\n\n  private async _fileExists(filePath: string) {\n    return fsExtra.pathExists(filePath);\n  }\n\n  private _getCurrentPlarform(): CompilerPlatform {\n    if (this._forceSolcJs) {\n      return CompilerPlatform.WASM;\n    }\n\n    switch (os.platform()) {\n      case \"win32\":\n        return CompilerPlatform.WINDOWS;\n      case \"linux\":\n        return CompilerPlatform.LINUX;\n      case \"darwin\":\n        return CompilerPlatform.MACOS;\n      default:\n        return CompilerPlatform.WASM;\n    }\n  }\n}\n\nfunction getCompilerURL(platform: CompilerPlatform, filePath: string) {\n  return `${COMPILER_FILES_DIR_URL_SOLC}${platform}/${filePath}`;\n}\n\nfunction getCompilerListURL(platform: CompilerPlatform) {\n  return getCompilerURL(platform, \"list.json\");\n}\n"]},"metadata":{},"sourceType":"script"}