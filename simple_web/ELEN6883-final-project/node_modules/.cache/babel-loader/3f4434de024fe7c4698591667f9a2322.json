{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobalObject } from '@sentry/utils';\nimport { initMetric } from './lib/initMetric';\nvar global = getGlobalObject();\n\nvar afterLoad = function (callback) {\n  if (document.readyState === 'complete') {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  } else {\n    // Use `pageshow` so the callback runs after `loadEventEnd`.\n    addEventListener('pageshow', callback);\n  }\n};\n\nvar getNavigationEntryFromPerformanceTiming = function () {\n  // Really annoying that TypeScript errors when using `PerformanceTiming`.\n  // eslint-disable-next-line deprecation/deprecation\n  var timing = global.performance.timing;\n  var navigationEntry = {\n    entryType: 'navigation',\n    startTime: 0\n  };\n\n  for (var key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key] = Math.max(timing[key] - timing.navigationStart, 0);\n    }\n  }\n\n  return navigationEntry;\n};\n\nexport var getTTFB = function (onReport) {\n  var metric = initMetric('TTFB');\n  afterLoad(function () {\n    try {\n      // Use the NavigationTiming L2 entry if available.\n      var navigationEntry = global.performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming();\n      metric.value = metric.delta = navigationEntry.responseStart;\n      metric.entries = [navigationEntry];\n      onReport(metric);\n    } catch (error) {// Do nothing.\n    }\n  });\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,eAAT,QAAgC,eAAhC;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,IAAMC,MAAM,GAAGF,eAAe,EAA9B;;AAEA,IAAMG,SAAS,GAAG,UAACC,QAAD,EAAqB;AACrC,MAAIC,QAAQ,CAACC,UAAT,KAAwB,UAA5B,EAAwC;AACtC;AACAC,cAAU,CAACH,QAAD,EAAW,CAAX,CAAV;AACD,GAHD,MAGO;AACL;AACAI,oBAAgB,CAAC,UAAD,EAAaJ,QAAb,CAAhB;AACD;AACF,CARD;;AAUA,IAAMK,uCAAuC,GAAG;AAC9C;AACA;AACA,MAAMC,MAAM,GAAGR,MAAM,CAACS,WAAP,CAAmBD,MAAlC;AAEA,MAAME,eAAe,GAAuC;AAC1DC,aAAS,EAAE,YAD+C;AAE1DC,aAAS,EAAE;AAF+C,GAA5D;;AAKA,OAAK,IAAMC,GAAX,IAAkBL,MAAlB,EAA0B;AACxB,QAAIK,GAAG,KAAK,iBAAR,IAA6BA,GAAG,KAAK,QAAzC,EAAmD;AACjDH,qBAAe,CAACG,GAAD,CAAf,GAAuBC,IAAI,CAACC,GAAL,CAAUP,MAAM,CAACK,GAAD,CAAN,GAAoDL,MAAM,CAACQ,eAArE,EAAsF,CAAtF,CAAvB;AACD;AACF;;AACD,SAAON,eAAP;AACD,CAhBD;;AAkBA,OAAO,IAAMO,OAAO,GAAG,UAACC,QAAD,EAAwB;AAC7C,MAAMC,MAAM,GAAGpB,UAAU,CAAC,MAAD,CAAzB;AAEAE,WAAS,CAAC;AACR,QAAI;AACF;AACA,UAAMS,eAAe,GACnBV,MAAM,CAACS,WAAP,CAAmBW,gBAAnB,CAAoC,YAApC,EAAkD,CAAlD,KAAwDb,uCAAuC,EADjG;AAGAY,YAAM,CAACE,KAAP,GAAeF,MAAM,CAACG,KAAP,GAAgBZ,eAA+C,CAACa,aAA/E;AAEAJ,YAAM,CAACK,OAAP,GAAiB,CAACd,eAAD,CAAjB;AAEAQ,cAAQ,CAACC,MAAD,CAAR;AACD,KAVD,CAUE,OAAOM,KAAP,EAAc,CACd;AACD;AACF,GAdQ,CAAT;AAeD,CAlBM","names":["getGlobalObject","initMetric","global","afterLoad","callback","document","readyState","setTimeout","addEventListener","getNavigationEntryFromPerformanceTiming","timing","performance","navigationEntry","entryType","startTime","key","Math","max","navigationStart","getTTFB","onReport","metric","getEntriesByType","value","delta","responseStart","entries","error"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/tracing/src/browser/web-vitals/getTTFB.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { initMetric } from './lib/initMetric';\nimport { NavigationTimingPolyfillEntry, ReportHandler } from './types';\n\nconst global = getGlobalObject<Window>();\n\nconst afterLoad = (callback: () => void): void => {\n  if (document.readyState === 'complete') {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  } else {\n    // Use `pageshow` so the callback runs after `loadEventEnd`.\n    addEventListener('pageshow', callback);\n  }\n};\n\nconst getNavigationEntryFromPerformanceTiming = (): NavigationTimingPolyfillEntry => {\n  // Really annoying that TypeScript errors when using `PerformanceTiming`.\n  // eslint-disable-next-line deprecation/deprecation\n  const timing = global.performance.timing;\n\n  const navigationEntry: { [key: string]: number | string } = {\n    entryType: 'navigation',\n    startTime: 0,\n  };\n\n  for (const key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key] = Math.max((timing[key as keyof PerformanceTiming] as number) - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry as NavigationTimingPolyfillEntry;\n};\n\nexport const getTTFB = (onReport: ReportHandler): void => {\n  const metric = initMetric('TTFB');\n\n  afterLoad(() => {\n    try {\n      // Use the NavigationTiming L2 entry if available.\n      const navigationEntry =\n        global.performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming();\n\n      metric.value = metric.delta = (navigationEntry as PerformanceNavigationTiming).responseStart;\n\n      metric.entries = [navigationEntry];\n\n      onReport(metric);\n    } catch (error) {\n      // Do nothing.\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}