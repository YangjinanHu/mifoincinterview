{"ast":null,"code":"'use strict';\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar escapeRe = require('escape-string-regexp');\n\nvar path = require('path');\n\nvar builtinReporters = require('./reporters');\n\nvar growl = require('./growl');\n\nvar utils = require('./utils');\n\nvar mocharc = require('./mocharc.json');\n\nvar errors = require('./errors');\n\nvar Suite = require('./suite');\n\nvar esmUtils = utils.supportsEsModules() ? require('./esm-utils') : undefined;\n\nvar createStatsCollector = require('./stats-collector');\n\nvar createInvalidReporterError = errors.createInvalidReporterError;\nvar createInvalidInterfaceError = errors.createInvalidInterfaceError;\nvar createMochaInstanceAlreadyDisposedError = errors.createMochaInstanceAlreadyDisposedError;\nvar createMochaInstanceAlreadyRunningError = errors.createMochaInstanceAlreadyRunningError;\nvar EVENT_FILE_PRE_REQUIRE = Suite.constants.EVENT_FILE_PRE_REQUIRE;\nvar EVENT_FILE_POST_REQUIRE = Suite.constants.EVENT_FILE_POST_REQUIRE;\nvar EVENT_FILE_REQUIRE = Suite.constants.EVENT_FILE_REQUIRE;\nvar sQuote = utils.sQuote;\nexports = module.exports = Mocha;\n/**\n * A Mocha instance is a finite state machine.\n * These are the states it can be in.\n */\n\nvar mochaStates = utils.defineConstants({\n  /**\n   * Initial state of the mocha instance\n   */\n  INIT: 'init',\n\n  /**\n   * Mocha instance is running tests\n   */\n  RUNNING: 'running',\n\n  /**\n   * Mocha instance is done running tests and references to test functions and hooks are cleaned.\n   * You can reset this state by unloading the test files.\n   */\n  REFERENCES_CLEANED: 'referencesCleaned',\n\n  /**\n   * Mocha instance is disposed and can no longer be used.\n   */\n  DISPOSED: 'disposed'\n});\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!process.browser && typeof module.paths !== 'undefined') {\n  var cwd = utils.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n/**\n * Expose internals.\n */\n\n/**\n * @public\n * @class utils\n * @memberof Mocha\n */\n\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\n/**\n * @public\n * @memberof Mocha\n */\n\nexports.reporters = builtinReporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\n/**\n *\n * @memberof Mocha\n */\n\nexports.Runner = require('./runner');\nexports.Suite = Suite;\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n/**\n * Constructs a new Mocha instance with `options`.\n *\n * @public\n * @class Mocha\n * @param {Object} [options] - Settings object.\n * @param {boolean} [options.allowUncaught] - Propagate uncaught errors?\n * @param {boolean} [options.asyncOnly] - Force `done` callback or promise?\n * @param {boolean} [options.bail] - Bail after first test failure?\n * @param {boolean} [options.checkLeaks] - Check for global variable leaks?\n * @param {boolean} [options.color] - Color TTY output from reporter?\n * @param {boolean} [options.delay] - Delay root suite execution?\n * @param {boolean} [options.diff] - Show diff on failure?\n * @param {string} [options.fgrep] - Test filter given string.\n * @param {boolean} [options.forbidOnly] - Tests marked `only` fail the suite?\n * @param {boolean} [options.forbidPending] - Pending tests fail the suite?\n * @param {boolean} [options.fullTrace] - Full stacktrace upon failure?\n * @param {string[]} [options.global] - Variables expected in global scope.\n * @param {RegExp|string} [options.grep] - Test filter given regular expression.\n * @param {boolean} [options.growl] - Enable desktop notifications?\n * @param {boolean} [options.inlineDiffs] - Display inline diffs?\n * @param {boolean} [options.invert] - Invert test filter matches?\n * @param {boolean} [options.noHighlighting] - Disable syntax highlighting?\n * @param {string|constructor} [options.reporter] - Reporter name or constructor.\n * @param {Object} [options.reporterOption] - Reporter settings object.\n * @param {number} [options.retries] - Number of times to retry failed tests.\n * @param {number} [options.slow] - Slow threshold value.\n * @param {number|string} [options.timeout] - Timeout threshold value.\n * @param {string} [options.ui] - Interface name.\n * @param {MochaRootHookObject} [options.rootHooks] - Hooks to bootstrap the root\n * suite with\n */\n\nfunction Mocha(options) {\n  options = utils.assign({}, mocharc, options || {});\n  this.files = [];\n  this.options = options; // root suite\n\n  this.suite = new exports.Suite('', new exports.Context(), true);\n  this._cleanReferencesAfterRun = true;\n  this.grep(options.grep).fgrep(options.fgrep).ui(options.ui).reporter(options.reporter, options.reporterOption || options.reporterOptions // reporterOptions was previously the only way to specify options to reporter\n  ).slow(options.slow).global(options.global); // this guard exists because Suite#timeout does not consider `undefined` to be valid input\n\n  if (typeof options.timeout !== 'undefined') {\n    this.timeout(options.timeout === false ? 0 : options.timeout);\n  }\n\n  if ('retries' in options) {\n    this.retries(options.retries);\n  }\n\n  ['allowUncaught', 'asyncOnly', 'bail', 'checkLeaks', 'color', 'delay', 'diff', 'forbidOnly', 'forbidPending', 'fullTrace', 'growl', 'inlineDiffs', 'invert'].forEach(function (opt) {\n    if (options[opt]) {\n      this[opt]();\n    }\n  }, this);\n\n  if (options.rootHooks) {\n    this.rootHooks(options.rootHooks);\n  }\n}\n/**\n * Enables or disables bailing on the first failure.\n *\n * @public\n * @see [CLI option](../#-bail-b)\n * @param {boolean} [bail=true] - Whether to bail on first error.\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.bail = function (bail) {\n  this.suite.bail(bail !== false);\n  return this;\n};\n/**\n * @summary\n * Adds `file` to be loaded for execution.\n *\n * @description\n * Useful for generic setup code that must be included within test suite.\n *\n * @public\n * @see [CLI option](../#-file-filedirectoryglob)\n * @param {string} file - Pathname of file to be loaded.\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.addFile = function (file) {\n  this.files.push(file);\n  return this;\n};\n/**\n * Sets reporter to `reporter`, defaults to \"spec\".\n *\n * @public\n * @see [CLI option](../#-reporter-name-r-name)\n * @see [Reporters](../#reporters)\n * @param {String|Function} reporter - Reporter name or constructor.\n * @param {Object} [reporterOptions] - Options used to configure the reporter.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested reporter cannot be loaded\n * @example\n *\n * // Use XUnit reporter and direct its output to file\n * mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });\n */\n\n\nMocha.prototype.reporter = function (reporter, reporterOptions) {\n  if (typeof reporter === 'function') {\n    this._reporter = reporter;\n  } else {\n    reporter = reporter || 'spec';\n\n    var _reporter; // Try to load a built-in reporter.\n\n\n    if (builtinReporters[reporter]) {\n      _reporter = builtinReporters[reporter];\n    } // Try to load reporters from process.cwd() and node_modules\n\n\n    if (!_reporter) {\n      try {\n        _reporter = require(reporter);\n      } catch (err) {\n        if (err.code === 'MODULE_NOT_FOUND' || err.message.indexOf('Cannot find module') >= 0) {\n          // Try to load reporters from a path (absolute or relative)\n          try {\n            _reporter = require(path.resolve(utils.cwd(), reporter));\n          } catch (_err) {\n            _err.code === 'MODULE_NOT_FOUND' || _err.message.indexOf('Cannot find module') >= 0 ? utils.warn(sQuote(reporter) + ' reporter not found') : utils.warn(sQuote(reporter) + ' reporter blew up with error:\\n' + err.stack);\n          }\n        } else {\n          utils.warn(sQuote(reporter) + ' reporter blew up with error:\\n' + err.stack);\n        }\n      }\n    }\n\n    if (!_reporter) {\n      throw createInvalidReporterError('invalid reporter ' + sQuote(reporter), reporter);\n    }\n\n    this._reporter = _reporter;\n  }\n\n  this.options.reporterOption = reporterOptions; // alias option name is used in public reporters xunit/tap/progress\n\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n/**\n * Sets test UI `name`, defaults to \"bdd\".\n *\n * @public\n * @see [CLI option](../#-ui-name-u-name)\n * @see [Interface DSLs](../#interfaces)\n * @param {string|Function} [ui=bdd] - Interface name or class.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested interface cannot be loaded\n */\n\n\nMocha.prototype.ui = function (ui) {\n  var bindInterface;\n\n  if (typeof ui === 'function') {\n    bindInterface = ui;\n  } else {\n    ui = ui || 'bdd';\n    bindInterface = exports.interfaces[ui];\n\n    if (!bindInterface) {\n      try {\n        bindInterface = require(ui);\n      } catch (err) {\n        throw createInvalidInterfaceError('invalid interface ' + sQuote(ui), ui);\n      }\n    }\n  }\n\n  bindInterface(this.suite);\n  this.suite.on(EVENT_FILE_PRE_REQUIRE, function (context) {\n    exports.afterEach = context.afterEach || context.teardown;\n    exports.after = context.after || context.suiteTeardown;\n    exports.beforeEach = context.beforeEach || context.setup;\n    exports.before = context.before || context.suiteSetup;\n    exports.describe = context.describe || context.suite;\n    exports.it = context.it || context.test;\n    exports.xit = context.xit || context.test && context.test.skip;\n    exports.setup = context.setup || context.beforeEach;\n    exports.suiteSetup = context.suiteSetup || context.before;\n    exports.suiteTeardown = context.suiteTeardown || context.after;\n    exports.suite = context.suite || context.describe;\n    exports.teardown = context.teardown || context.afterEach;\n    exports.test = context.test || context.it;\n    exports.run = context.run;\n  });\n  return this;\n};\n/**\n * Loads `files` prior to execution. Does not support ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` to execute\n * the test interface functions and will be subject to its cache.\n * Supports only CommonJS modules. To load ES modules, use Mocha#loadFilesAsync.\n *\n * @private\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @see {@link Mocha#loadFilesAsync}\n * @param {Function} [fn] - Callback invoked upon completion.\n */\n\n\nMocha.prototype.loadFiles = function (fn) {\n  var self = this;\n  var suite = this.suite;\n  this.files.forEach(function (file) {\n    file = path.resolve(file);\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    suite.emit(EVENT_FILE_REQUIRE, require(file), file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n  fn && fn();\n};\n/**\n * Loads `files` prior to execution. Supports Node ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` and `import` to execute\n * the test interface functions and will be subject to its cache.\n * Supports both CJS and ESM modules.\n *\n * @public\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @returns {Promise}\n * @example\n *\n * // loads ESM (and CJS) test files asynchronously, then runs root suite\n * mocha.loadFilesAsync()\n *   .then(() => mocha.run(failures => process.exitCode = failures ? 1 : 0))\n *   .catch(() => process.exitCode = 1);\n */\n\n\nMocha.prototype.loadFilesAsync = function () {\n  var self = this;\n  var suite = this.suite;\n  this.loadAsync = true;\n\n  if (!esmUtils) {\n    return new Promise(function (resolve) {\n      self.loadFiles(resolve);\n    });\n  }\n\n  return esmUtils.loadFilesAsync(this.files, function (file) {\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n  }, function (file, resultModule) {\n    suite.emit(EVENT_FILE_REQUIRE, resultModule, file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n};\n/**\n * Removes a previously loaded file from Node's `require` cache.\n *\n * @private\n * @static\n * @see {@link Mocha#unloadFiles}\n * @param {string} file - Pathname of file to be unloaded.\n */\n\n\nMocha.unloadFile = function (file) {\n  delete require.cache[require.resolve(file)];\n};\n/**\n * Unloads `files` from Node's `require` cache.\n *\n * @description\n * This allows required files to be \"freshly\" reloaded, providing the ability\n * to reuse a Mocha instance programmatically.\n * Note: does not clear ESM module files from the cache\n *\n * <strong>Intended for consumers &mdash; not used internally</strong>\n *\n * @public\n * @see {@link Mocha#run}\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.unloadFiles = function () {\n  if (this._state === mochaStates.DISPOSED) {\n    throw createMochaInstanceAlreadyDisposedError('Mocha instance is already disposed, it cannot be used again.', this._cleanReferencesAfterRun, this);\n  }\n\n  this.files.forEach(function (file) {\n    Mocha.unloadFile(file);\n  });\n  this._state = mochaStates.INIT;\n  return this;\n};\n/**\n * Sets `grep` filter after escaping RegExp special characters.\n *\n * @public\n * @see {@link Mocha#grep}\n * @param {string} str - Value to be converted to a regexp.\n * @returns {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title begins with `\"foo\"` followed by a period\n * mocha.fgrep('foo.');\n */\n\n\nMocha.prototype.fgrep = function (str) {\n  if (!str) {\n    return this;\n  }\n\n  return this.grep(new RegExp(escapeRe(str)));\n};\n/**\n * @summary\n * Sets `grep` filter used to select specific tests for execution.\n *\n * @description\n * If `re` is a regexp-like string, it will be converted to regexp.\n * The regexp is tested against the full title of each test (i.e., the\n * name of the test preceded by titles of each its ancestral suites).\n * As such, using an <em>exact-match</em> fixed pattern against the\n * test name itself will not yield any matches.\n * <br>\n * <strong>Previous filter value will be overwritten on each call!</strong>\n *\n * @public\n * @see [CLI option](../#-grep-regexp-g-regexp)\n * @see {@link Mocha#fgrep}\n * @see {@link Mocha#invert}\n * @param {RegExp|String} re - Regular expression used to select tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title contains `\"match\"`, ignoring case\n * mocha.grep(/match/i);\n * @example\n *\n * // Same as above but with regexp-like string argument\n * mocha.grep('/match/i');\n * @example\n *\n * // ## Anti-example\n * // Given embedded test `it('only-this-test')`...\n * mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!\n */\n\n\nMocha.prototype.grep = function (re) {\n  if (utils.isString(re)) {\n    // extract args if it's regex-like, i.e: [string, pattern, flag]\n    var arg = re.match(/^\\/(.*)\\/(g|i|)$|.*/);\n    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);\n  } else {\n    this.options.grep = re;\n  }\n\n  return this;\n};\n/**\n * Inverts `grep` matches.\n *\n * @public\n * @see {@link Mocha#grep}\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title does *not* contain `\"match\"`, ignoring case\n * mocha.grep(/match/i).invert();\n */\n\n\nMocha.prototype.invert = function () {\n  this.options.invert = true;\n  return this;\n};\n/**\n * Enables or disables ignoring global leaks.\n *\n * @deprecated since v7.0.0\n * @public\n * @see {@link Mocha#checkLeaks}\n * @param {boolean} [ignoreLeaks=false] - Whether to ignore global leaks.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.ignoreLeaks = function (ignoreLeaks) {\n  utils.deprecate('\"ignoreLeaks()\" is DEPRECATED, please use \"checkLeaks()\" instead.');\n  this.options.checkLeaks = !ignoreLeaks;\n  return this;\n};\n/**\n * Enables or disables checking for global variables leaked while running tests.\n *\n * @public\n * @see [CLI option](../#-check-leaks)\n * @param {boolean} [checkLeaks=true] - Whether to check for global variable leaks.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.checkLeaks = function (checkLeaks) {\n  this.options.checkLeaks = checkLeaks !== false;\n  return this;\n};\n/**\n * Enables or disables whether or not to dispose after each test run.\n * Disable this to ensure you can run the test suite multiple times.\n * If disabled, be sure to dispose mocha when you're done to prevent memory leaks.\n * @public\n * @see {@link Mocha#dispose}\n * @param {boolean} cleanReferencesAfterRun\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.cleanReferencesAfterRun = function (cleanReferencesAfterRun) {\n  this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;\n  return this;\n};\n/**\n * Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.\n * It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.\n * @public\n */\n\n\nMocha.prototype.dispose = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError('Cannot dispose while the mocha instance is still running tests.');\n  }\n\n  this.unloadFiles();\n  this._previousRunner && this._previousRunner.dispose();\n  this.suite.dispose();\n  this._state = mochaStates.DISPOSED;\n};\n/**\n * Displays full stack trace upon test failure.\n *\n * @public\n * @see [CLI option](../#-full-trace)\n * @param {boolean} [fullTrace=true] - Whether to print full stacktrace upon failure.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.fullTrace = function (fullTrace) {\n  this.options.fullTrace = fullTrace !== false;\n  return this;\n};\n/**\n * Enables desktop notification support if prerequisite software installed.\n *\n * @public\n * @see [CLI option](../#-growl-g)\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.growl = function () {\n  this.options.growl = this.isGrowlCapable();\n\n  if (!this.options.growl) {\n    var detail = process.browser ? 'notification support not available in this browser...' : 'notification support prerequisites not installed...';\n    console.error(detail + ' cannot enable!');\n  }\n\n  return this;\n};\n/**\n * @summary\n * Determines if Growl support seems likely.\n *\n * @description\n * <strong>Not available when run in browser.</strong>\n *\n * @private\n * @see {@link Growl#isCapable}\n * @see {@link Mocha#growl}\n * @return {boolean} whether Growl support can be expected\n */\n\n\nMocha.prototype.isGrowlCapable = growl.isCapable;\n/**\n * Implements desktop notifications using a pseudo-reporter.\n *\n * @private\n * @see {@link Mocha#growl}\n * @see {@link Growl#notify}\n * @param {Runner} runner - Runner instance.\n */\n\nMocha.prototype._growl = growl.notify;\n/**\n * Specifies whitelist of variable names to be expected in global scope.\n *\n * @public\n * @see [CLI option](../#-global-variable-name)\n * @see {@link Mocha#checkLeaks}\n * @param {String[]|String} global - Accepted global variable name(s).\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Specify variables to be expected in global scope\n * mocha.global(['jQuery', 'MyLib']);\n */\n\nMocha.prototype.global = function (global) {\n  this.options.global = (this.options.global || []).concat(global).filter(Boolean).filter(function (elt, idx, arr) {\n    return arr.indexOf(elt) === idx;\n  });\n  return this;\n}; // for backwards compability, 'globals' is an alias of 'global'\n\n\nMocha.prototype.globals = Mocha.prototype.global;\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @deprecated since v7.0.0\n * @public\n * @see {@link Mocha#color}\n * @param {boolean} colors - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\n\nMocha.prototype.useColors = function (colors) {\n  utils.deprecate('\"useColors()\" is DEPRECATED, please use \"color()\" instead.');\n\n  if (colors !== undefined) {\n    this.options.color = colors;\n  }\n\n  return this;\n};\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @public\n * @see [CLI option](../#-color-c-colors)\n * @param {boolean} [color=true] - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.color = function (color) {\n  this.options.color = color !== false;\n  return this;\n};\n/**\n * Determines if reporter should use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @deprecated since v7.0.0\n * @public\n * @see {@link Mocha#inlineDiffs}\n * @param {boolean} [inlineDiffs=false] - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.useInlineDiffs = function (inlineDiffs) {\n  utils.deprecate('\"useInlineDiffs()\" is DEPRECATED, please use \"inlineDiffs()\" instead.');\n  this.options.inlineDiffs = inlineDiffs !== undefined && inlineDiffs;\n  return this;\n};\n/**\n * Enables or disables reporter to use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @public\n * @see [CLI option](../#-inline-diffs)\n * @param {boolean} [inlineDiffs=true] - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.inlineDiffs = function (inlineDiffs) {\n  this.options.inlineDiffs = inlineDiffs !== false;\n  return this;\n};\n/**\n * Determines if reporter should include diffs in test failure output.\n *\n * @deprecated since v7.0.0\n * @public\n * @see {@link Mocha#diff}\n * @param {boolean} [hideDiff=false] - Whether to hide diffs.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.hideDiff = function (hideDiff) {\n  utils.deprecate('\"hideDiff()\" is DEPRECATED, please use \"diff()\" instead.');\n  this.options.diff = !(hideDiff === true);\n  return this;\n};\n/**\n * Enables or disables reporter to include diff in test failure output.\n *\n * @public\n * @see [CLI option](../#-diff)\n * @param {boolean} [diff=true] - Whether to show diff on failure.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.diff = function (diff) {\n  this.options.diff = diff !== false;\n  return this;\n};\n/**\n * @summary\n * Sets timeout threshold value.\n *\n * @description\n * A string argument can use shorthand (such as \"2s\") and will be converted.\n * If the value is `0`, timeouts will be disabled.\n *\n * @public\n * @see [CLI option](../#-timeout-ms-t-ms)\n * @see [Timeouts](../#timeouts)\n * @see {@link Mocha#enableTimeouts}\n * @param {number|string} msecs - Timeout threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets timeout to one second\n * mocha.timeout(1000);\n * @example\n *\n * // Same as above but using string argument\n * mocha.timeout('1s');\n */\n\n\nMocha.prototype.timeout = function (msecs) {\n  this.suite.timeout(msecs);\n  return this;\n};\n/**\n * Sets the number of times to retry failed tests.\n *\n * @public\n * @see [CLI option](../#-retries-n)\n * @see [Retry Tests](../#retry-tests)\n * @param {number} retry - Number of times to retry failed tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Allow any failed test to retry one more time\n * mocha.retries(1);\n */\n\n\nMocha.prototype.retries = function (n) {\n  this.suite.retries(n);\n  return this;\n};\n/**\n * Sets slowness threshold value.\n *\n * @public\n * @see [CLI option](../#-slow-ms-s-ms)\n * @param {number} msecs - Slowness threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets \"slow\" threshold to half a second\n * mocha.slow(500);\n * @example\n *\n * // Same as above but using string argument\n * mocha.slow('0.5s');\n */\n\n\nMocha.prototype.slow = function (msecs) {\n  this.suite.slow(msecs);\n  return this;\n};\n/**\n * Enables or disables timeouts.\n *\n * @public\n * @see [CLI option](../#-timeout-ms-t-ms)\n * @param {boolean} enableTimeouts - Whether to enable timeouts.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.enableTimeouts = function (enableTimeouts) {\n  this.suite.enableTimeouts(arguments.length && enableTimeouts !== undefined ? enableTimeouts : true);\n  return this;\n};\n/**\n * Forces all tests to either accept a `done` callback or return a promise.\n *\n * @public\n * @see [CLI option](../#-async-only-a)\n * @param {boolean} [asyncOnly=true] - Wether to force `done` callback or promise.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.asyncOnly = function (asyncOnly) {\n  this.options.asyncOnly = asyncOnly !== false;\n  return this;\n};\n/**\n * Disables syntax highlighting (in browser).\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.noHighlighting = function () {\n  this.options.noHighlighting = true;\n  return this;\n};\n/**\n * Enables or disables uncaught errors to propagate.\n *\n * @public\n * @see [CLI option](../#-allow-uncaught)\n * @param {boolean} [allowUncaught=true] - Whether to propagate uncaught errors.\n * @return {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.allowUncaught = function (allowUncaught) {\n  this.options.allowUncaught = allowUncaught !== false;\n  return this;\n};\n/**\n * @summary\n * Delays root suite execution.\n *\n * @description\n * Used to perform asynch operations before any suites are run.\n *\n * @public\n * @see [delayed root suite](../#delayed-root-suite)\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.delay = function delay() {\n  this.options.delay = true;\n  return this;\n};\n/**\n * Causes tests marked `only` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-only)\n * @param {boolean} [forbidOnly=true] - Whether tests marked `only` fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.forbidOnly = function (forbidOnly) {\n  this.options.forbidOnly = forbidOnly !== false;\n  return this;\n};\n/**\n * Causes pending tests and tests marked `skip` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-pending)\n * @param {boolean} [forbidPending=true] - Whether pending tests fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\n\n\nMocha.prototype.forbidPending = function (forbidPending) {\n  this.options.forbidPending = forbidPending !== false;\n  return this;\n};\n/**\n * Throws an error if mocha is in the wrong state to be able to transition to a \"running\" state.\n */\n\n\nMocha.prototype._guardRunningStateTransition = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError('Mocha instance is currently running tests, cannot start a next test run until this one is done', this);\n  }\n\n  if (this._state === mochaStates.DISPOSED || this._state === mochaStates.REFERENCES_CLEANED) {\n    throw createMochaInstanceAlreadyDisposedError('Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.', this._cleanReferencesAfterRun, this);\n  }\n};\n/**\n * Mocha version as specified by \"package.json\".\n *\n * @name Mocha#version\n * @type string\n * @readonly\n */\n\n\nObject.defineProperty(Mocha.prototype, 'version', {\n  value: require('../package.json').version,\n  configurable: false,\n  enumerable: true,\n  writable: false\n});\n/**\n * Callback to be invoked when test execution is complete.\n *\n * @callback DoneCB\n * @param {number} failures - Number of failures that occurred.\n */\n\n/**\n * Runs root suite and invokes `fn()` when complete.\n *\n * @description\n * To run tests multiple times (or to run tests in files that are\n * already in the `require` cache), make sure to clear them from\n * the cache first!\n *\n * @public\n * @see {@link Mocha#unloadFiles}\n * @see {@link Runner#run}\n * @param {DoneCB} [fn] - Callback invoked when test execution completed.\n * @returns {Runner} runner instance\n * @example\n *\n * // exit with non-zero status if there were test failures\n * mocha.run(failures => process.exitCode = failures ? 1 : 0);\n */\n\nMocha.prototype.run = function (fn) {\n  this._guardRunningStateTransition();\n\n  this._state = mochaStates.RUNNING;\n\n  if (this._previousRunner) {\n    this._previousRunner.dispose();\n\n    this.suite.reset();\n  }\n\n  if (this.files.length && !this.loadAsync) {\n    this.loadFiles();\n  }\n\n  var self = this;\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  var runner = new exports.Runner(suite, {\n    delay: options.delay,\n    cleanReferencesAfterRun: this._cleanReferencesAfterRun\n  });\n  createStatsCollector(runner);\n  var reporter = new this._reporter(runner, options);\n  runner.checkLeaks = options.checkLeaks === true;\n  runner.fullStackTrace = options.fullTrace;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  runner.forbidOnly = options.forbidOnly;\n  runner.forbidPending = options.forbidPending;\n\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n\n  if (options.global) {\n    runner.globals(options.global);\n  }\n\n  if (options.growl) {\n    this._growl(runner);\n  }\n\n  if (options.color !== undefined) {\n    exports.reporters.Base.useColors = options.color;\n  }\n\n  exports.reporters.Base.inlineDiffs = options.inlineDiffs;\n  exports.reporters.Base.hideDiff = !options.diff;\n\n  function done(failures) {\n    self._previousRunner = runner;\n\n    if (self._cleanReferencesAfterRun) {\n      self._state = mochaStates.REFERENCES_CLEANED;\n    } else {\n      self._state = mochaStates.INIT;\n    }\n\n    fn = fn || utils.noop;\n\n    if (reporter.done) {\n      reporter.done(failures, fn);\n    } else {\n      fn(failures);\n    }\n  }\n\n  return runner.run(done);\n};\n/**\n * Assigns hooks to the root suite\n * @param {MochaRootHookObject} [hooks] - Hooks to assign to root suite\n * @chainable\n */\n\n\nMocha.prototype.rootHooks = function rootHooks(hooks) {\n  if (utils.type(hooks) === 'object') {\n    var beforeAll = [].concat(hooks.beforeAll || []);\n    var beforeEach = [].concat(hooks.beforeEach || []);\n    var afterAll = [].concat(hooks.afterAll || []);\n    var afterEach = [].concat(hooks.afterEach || []);\n    var rootSuite = this.suite;\n    beforeAll.forEach(function (hook) {\n      rootSuite.beforeAll(hook);\n    });\n    beforeEach.forEach(function (hook) {\n      rootSuite.beforeEach(hook);\n    });\n    afterAll.forEach(function (hook) {\n      rootSuite.afterAll(hook);\n    });\n    afterEach.forEach(function (hook) {\n      rootSuite.afterEach(hook);\n    });\n  }\n\n  return this;\n};\n/**\n * An alternative way to define root hooks that works with parallel runs.\n * @typedef {Object} MochaRootHookObject\n * @property {Function|Function[]} [beforeAll] - \"Before all\" hook(s)\n * @property {Function|Function[]} [beforeEach] - \"Before each\" hook(s)\n * @property {Function|Function[]} [afterAll] - \"After all\" hook(s)\n * @property {Function|Function[]} [afterEach] - \"After each\" hook(s)\n */\n\n/**\n * An function that returns a {@link MochaRootHookObject}, either sync or async.\n * @callback MochaRootHookFunction\n * @returns {MochaRootHookObject|Promise<MochaRootHookObject>}\n */","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/mocha.js"],"names":["escapeRe","require","path","builtinReporters","growl","utils","mocharc","errors","Suite","esmUtils","supportsEsModules","undefined","createStatsCollector","createInvalidReporterError","createInvalidInterfaceError","createMochaInstanceAlreadyDisposedError","createMochaInstanceAlreadyRunningError","EVENT_FILE_PRE_REQUIRE","constants","EVENT_FILE_POST_REQUIRE","EVENT_FILE_REQUIRE","sQuote","exports","module","Mocha","mochaStates","defineConstants","INIT","RUNNING","REFERENCES_CLEANED","DISPOSED","process","browser","paths","cwd","push","join","interfaces","reporters","Runnable","Context","Runner","Hook","Test","options","assign","files","suite","_cleanReferencesAfterRun","grep","fgrep","ui","reporter","reporterOption","reporterOptions","slow","global","timeout","retries","forEach","opt","rootHooks","prototype","bail","addFile","file","_reporter","err","code","message","indexOf","resolve","_err","warn","stack","bindInterface","on","context","afterEach","teardown","after","suiteTeardown","beforeEach","setup","before","suiteSetup","describe","it","test","xit","skip","run","loadFiles","fn","self","emit","loadFilesAsync","loadAsync","Promise","resultModule","unloadFile","cache","unloadFiles","_state","str","RegExp","re","isString","arg","match","invert","ignoreLeaks","deprecate","checkLeaks","cleanReferencesAfterRun","dispose","_previousRunner","fullTrace","isGrowlCapable","detail","console","error","isCapable","_growl","notify","concat","filter","Boolean","elt","idx","arr","globals","useColors","colors","color","useInlineDiffs","inlineDiffs","hideDiff","diff","msecs","n","enableTimeouts","arguments","length","asyncOnly","noHighlighting","allowUncaught","delay","forbidOnly","forbidPending","_guardRunningStateTransition","Object","defineProperty","value","version","configurable","enumerable","writable","reset","runner","fullStackTrace","Base","done","failures","noop","hooks","type","beforeAll","afterAll","rootSuite","hook"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjH,KAAK,CAACsC,SAAN,CAAgB4E,IAAhB,GAAuB,UAASA,IAAT,EAAe;AACpC,OAAK9F,OAAL,CAAa8F,IAAb,GAAoBA,IAAI,KAAK,KAA7B;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlH,KAAK,CAACsC,SAAN,CAAgBL,OAAhB,GAA0B,UAASkF,KAAT,EAAgB;AACxC,OAAK5F,KAAL,CAAWU,OAAX,CAAmBkF,KAAnB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnH,KAAK,CAACsC,SAAN,CAAgBJ,OAAhB,GAA0B,UAASkF,CAAT,EAAY;AACpC,OAAK7F,KAAL,CAAWW,OAAX,CAAmBkF,CAAnB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApH,KAAK,CAACsC,SAAN,CAAgBP,IAAhB,GAAuB,UAASoF,KAAT,EAAgB;AACrC,OAAK5F,KAAL,CAAWQ,IAAX,CAAgBoF,KAAhB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnH,KAAK,CAACsC,SAAN,CAAgB+E,cAAhB,GAAiC,UAASA,cAAT,EAAyB;AACxD,OAAK9F,KAAL,CAAW8F,cAAX,CACEC,SAAS,CAACC,MAAV,IAAoBF,cAAc,KAAKlI,SAAvC,GAAmDkI,cAAnD,GAAoE,IADtE;AAGA,SAAO,IAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACArH,KAAK,CAACsC,SAAN,CAAgBkF,SAAhB,GAA4B,UAASA,SAAT,EAAoB;AAC9C,OAAKpG,OAA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","sourcesContent":["'use strict';\n\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar escapeRe = require('escape-string-regexp');\nvar path = require('path');\nvar builtinReporters = require('./reporters');\nvar growl = require('./growl');\nvar utils = require('./utils');\nvar mocharc = require('./mocharc.json');\nvar errors = require('./errors');\nvar Suite = require('./suite');\nvar esmUtils = utils.supportsEsModules() ? require('./esm-utils') : undefined;\nvar createStatsCollector = require('./stats-collector');\nvar createInvalidReporterError = errors.createInvalidReporterError;\nvar createInvalidInterfaceError = errors.createInvalidInterfaceError;\nvar createMochaInstanceAlreadyDisposedError =\n  errors.createMochaInstanceAlreadyDisposedError;\nvar createMochaInstanceAlreadyRunningError =\n  errors.createMochaInstanceAlreadyRunningError;\nvar EVENT_FILE_PRE_REQUIRE = Suite.constants.EVENT_FILE_PRE_REQUIRE;\nvar EVENT_FILE_POST_REQUIRE = Suite.constants.EVENT_FILE_POST_REQUIRE;\nvar EVENT_FILE_REQUIRE = Suite.constants.EVENT_FILE_REQUIRE;\nvar sQuote = utils.sQuote;\n\nexports = module.exports = Mocha;\n\n/**\n * A Mocha instance is a finite state machine.\n * These are the states it can be in.\n */\nvar mochaStates = utils.defineConstants({\n  /**\n   * Initial state of the mocha instance\n   */\n  INIT: 'init',\n  /**\n   * Mocha instance is running tests\n   */\n  RUNNING: 'running',\n  /**\n   * Mocha instance is done running tests and references to test functions and hooks are cleaned.\n   * You can reset this state by unloading the test files.\n   */\n  REFERENCES_CLEANED: 'referencesCleaned',\n  /**\n   * Mocha instance is disposed and can no longer be used.\n   */\n  DISPOSED: 'disposed'\n});\n\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!process.browser && typeof module.paths !== 'undefined') {\n  var cwd = utils.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n\n/**\n * Expose internals.\n */\n\n/**\n * @public\n * @class utils\n * @memberof Mocha\n */\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\n/**\n * @public\n * @memberof Mocha\n */\nexports.reporters = builtinReporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\n/**\n *\n * @memberof Mocha\n */\nexports.Runner = require('./runner');\nexports.Suite = Suite;\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n\n/**\n * Constructs a new Mocha instance with `options`.\n *\n * @public\n * @class Mocha\n * @param {Object} [options] - Settings object.\n * @param {boolean} [options.allowUncaught] - Propagate uncaught errors?\n * @param {boolean} [options.asyncOnly] - Force `done` callback or promise?\n * @param {boolean} [options.bail] - Bail after first test failure?\n * @param {boolean} [options.checkLeaks] - Check for global variable leaks?\n * @param {boolean} [options.color] - Color TTY output from reporter?\n * @param {boolean} [options.delay] - Delay root suite execution?\n * @param {boolean} [options.diff] - Show diff on failure?\n * @param {string} [options.fgrep] - Test filter given string.\n * @param {boolean} [options.forbidOnly] - Tests marked `only` fail the suite?\n * @param {boolean} [options.forbidPending] - Pending tests fail the suite?\n * @param {boolean} [options.fullTrace] - Full stacktrace upon failure?\n * @param {string[]} [options.global] - Variables expected in global scope.\n * @param {RegExp|string} [options.grep] - Test filter given regular expression.\n * @param {boolean} [options.growl] - Enable desktop notifications?\n * @param {boolean} [options.inlineDiffs] - Display inline diffs?\n * @param {boolean} [options.invert] - Invert test filter matches?\n * @param {boolean} [options.noHighlighting] - Disable syntax highlighting?\n * @param {string|constructor} [options.reporter] - Reporter name or constructor.\n * @param {Object} [options.reporterOption] - Reporter settings object.\n * @param {number} [options.retries] - Number of times to retry failed tests.\n * @param {number} [options.slow] - Slow threshold value.\n * @param {number|string} [options.timeout] - Timeout threshold value.\n * @param {string} [options.ui] - Interface name.\n * @param {MochaRootHookObject} [options.rootHooks] - Hooks to bootstrap the root\n * suite with\n */\nfunction Mocha(options) {\n  options = utils.assign({}, mocharc, options || {});\n  this.files = [];\n  this.options = options;\n  // root suite\n  this.suite = new exports.Suite('', new exports.Context(), true);\n  this._cleanReferencesAfterRun = true;\n\n  this.grep(options.grep)\n    .fgrep(options.fgrep)\n    .ui(options.ui)\n    .reporter(\n      options.reporter,\n      options.reporterOption || options.reporterOptions // reporterOptions was previously the only way to specify options to reporter\n    )\n    .slow(options.slow)\n    .global(options.global);\n\n  // this guard exists because Suite#timeout does not consider `undefined` to be valid input\n  if (typeof options.timeout !== 'undefined') {\n    this.timeout(options.timeout === false ? 0 : options.timeout);\n  }\n\n  if ('retries' in options) {\n    this.retries(options.retries);\n  }\n\n  [\n    'allowUncaught',\n    'asyncOnly',\n    'bail',\n    'checkLeaks',\n    'color',\n    'delay',\n    'diff',\n    'forbidOnly',\n    'forbidPending',\n    'fullTrace',\n    'growl',\n    'inlineDiffs',\n    'invert'\n  ].forEach(function(opt) {\n    if (options[opt]) {\n      this[opt]();\n    }\n  }, this);\n\n  if (options.rootHooks) {\n    this.rootHooks(options.rootHooks);\n  }\n}\n\n/**\n * Enables or disables bailing on the first failure.\n *\n * @public\n * @see [CLI option](../#-bail-b)\n * @param {boolean} [bail=true] - Whether to bail on first error.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.bail = function(bail) {\n  this.suite.bail(bail !== false);\n  return this;\n};\n\n/**\n * @summary\n * Adds `file` to be loaded for execution.\n *\n * @description\n * Useful for generic setup code that must be included within test suite.\n *\n * @public\n * @see [CLI option](../#-file-filedirectoryglob)\n * @param {string} file - Pathname of file to be loaded.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.addFile = function(file) {\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Sets reporter to `reporter`, defaults to \"spec\".\n *\n * @public\n * @see [CLI option](../#-reporter-name-r-name)\n * @see [Reporters](../#reporters)\n * @param {String|Function} reporter - Reporter name or constructor.\n * @param {Object} [reporterOptions] - Options used to configure the reporter.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested reporter cannot be loaded\n * @example\n *\n * // Use XUnit reporter and direct its output to file\n * mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });\n */\nMocha.prototype.reporter = function(reporter, reporterOptions) {\n  if (typeof reporter === 'function') {\n    this._reporter = reporter;\n  } else {\n    reporter = reporter || 'spec';\n    var _reporter;\n    // Try to load a built-in reporter.\n    if (builtinReporters[reporter]) {\n      _reporter = builtinReporters[reporter];\n    }\n    // Try to load reporters from process.cwd() and node_modules\n    if (!_reporter) {\n      try {\n        _reporter = require(reporter);\n      } catch (err) {\n        if (\n          err.code === 'MODULE_NOT_FOUND' ||\n          err.message.indexOf('Cannot find module') >= 0\n        ) {\n          // Try to load reporters from a path (absolute or relative)\n          try {\n            _reporter = require(path.resolve(utils.cwd(), reporter));\n          } catch (_err) {\n            _err.code === 'MODULE_NOT_FOUND' ||\n            _err.message.indexOf('Cannot find module') >= 0\n              ? utils.warn(sQuote(reporter) + ' reporter not found')\n              : utils.warn(\n                  sQuote(reporter) +\n                    ' reporter blew up with error:\\n' +\n                    err.stack\n                );\n          }\n        } else {\n          utils.warn(\n            sQuote(reporter) + ' reporter blew up with error:\\n' + err.stack\n          );\n        }\n      }\n    }\n    if (!_reporter) {\n      throw createInvalidReporterError(\n        'invalid reporter ' + sQuote(reporter),\n        reporter\n      );\n    }\n    this._reporter = _reporter;\n  }\n  this.options.reporterOption = reporterOptions;\n  // alias option name is used in public reporters xunit/tap/progress\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n\n/**\n * Sets test UI `name`, defaults to \"bdd\".\n *\n * @public\n * @see [CLI option](../#-ui-name-u-name)\n * @see [Interface DSLs](../#interfaces)\n * @param {string|Function} [ui=bdd] - Interface name or class.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested interface cannot be loaded\n */\nMocha.prototype.ui = function(ui) {\n  var bindInterface;\n  if (typeof ui === 'function') {\n    bindInterface = ui;\n  } else {\n    ui = ui || 'bdd';\n    bindInterface = exports.interfaces[ui];\n    if (!bindInterface) {\n      try {\n        bindInterface = require(ui);\n      } catch (err) {\n        throw createInvalidInterfaceError(\n          'invalid interface ' + sQuote(ui),\n          ui\n        );\n      }\n    }\n  }\n  bindInterface(this.suite);\n\n  this.suite.on(EVENT_FILE_PRE_REQUIRE, function(context) {\n    exports.afterEach = context.afterEach || context.teardown;\n    exports.after = context.after || context.suiteTeardown;\n    exports.beforeEach = context.beforeEach || context.setup;\n    exports.before = context.before || context.suiteSetup;\n    exports.describe = context.describe || context.suite;\n    exports.it = context.it || context.test;\n    exports.xit = context.xit || (context.test && context.test.skip);\n    exports.setup = context.setup || context.beforeEach;\n    exports.suiteSetup = context.suiteSetup || context.before;\n    exports.suiteTeardown = context.suiteTeardown || context.after;\n    exports.suite = context.suite || context.describe;\n    exports.teardown = context.teardown || context.afterEach;\n    exports.test = context.test || context.it;\n    exports.run = context.run;\n  });\n\n  return this;\n};\n\n/**\n * Loads `files` prior to execution. Does not support ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` to execute\n * the test interface functions and will be subject to its cache.\n * Supports only CommonJS modules. To load ES modules, use Mocha#loadFilesAsync.\n *\n * @private\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @see {@link Mocha#loadFilesAsync}\n * @param {Function} [fn] - Callback invoked upon completion.\n */\nMocha.prototype.loadFiles = function(fn) {\n  var self = this;\n  var suite = this.suite;\n  this.files.forEach(function(file) {\n    file = path.resolve(file);\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    suite.emit(EVENT_FILE_REQUIRE, require(file), file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n  fn && fn();\n};\n\n/**\n * Loads `files` prior to execution. Supports Node ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` and `import` to execute\n * the test interface functions and will be subject to its cache.\n * Supports both CJS and ESM modules.\n *\n * @public\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @returns {Promise}\n * @example\n *\n * // loads ESM (and CJS) test files asynchronously, then runs root suite\n * mocha.loadFilesAsync()\n *   .then(() => mocha.run(failures => process.exitCode = failures ? 1 : 0))\n *   .catch(() => process.exitCode = 1);\n */\nMocha.prototype.loadFilesAsync = function() {\n  var self = this;\n  var suite = this.suite;\n  this.loadAsync = true;\n\n  if (!esmUtils) {\n    return new Promise(function(resolve) {\n      self.loadFiles(resolve);\n    });\n  }\n\n  return esmUtils.loadFilesAsync(\n    this.files,\n    function(file) {\n      suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    },\n    function(file, resultModule) {\n      suite.emit(EVENT_FILE_REQUIRE, resultModule, file, self);\n      suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n    }\n  );\n};\n\n/**\n * Removes a previously loaded file from Node's `require` cache.\n *\n * @private\n * @static\n * @see {@link Mocha#unloadFiles}\n * @param {string} file - Pathname of file to be unloaded.\n */\nMocha.unloadFile = function(file) {\n  delete require.cache[require.resolve(file)];\n};\n\n/**\n * Unloads `files` from Node's `require` cache.\n *\n * @description\n * This allows required files to be \"freshly\" reloaded, providing the ability\n * to reuse a Mocha instance programmatically.\n * Note: does not clear ESM module files from the cache\n *\n * <strong>Intended for consumers &mdash; not used internally</strong>\n *\n * @public\n * @see {@link Mocha#run}\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.unloadFiles = function() {\n  if (this._state === mochaStates.DISPOSED) {\n    throw createMochaInstanceAlreadyDisposedError(\n      'Mocha instance is already disposed, it cannot be used again.',\n      this._cleanReferencesAfterRun,\n      this\n    );\n  }\n\n  this.files.forEach(function(file) {\n    Mocha.unloadFile(file);\n  });\n  this._state = mochaStates.INIT;\n  return this;\n};\n\n/**\n * Sets `grep` filter after escaping RegExp special characters.\n *\n * @public\n * @see {@link Mocha#grep}\n * @param {string} str - Value to be converted to a regexp.\n * @returns {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title begins with `\"foo\"` followed by a period\n * mocha.fgrep('foo.');\n */\nMocha.prototype.fgrep = function(str) {\n  if (!str) {\n    return this;\n  }\n  return this.grep(new RegExp(escapeRe(str)));\n};\n\n/**\n * @summary\n * Sets `grep` filter used to select specific tests for execution.\n *\n * @description\n * If `re` is a regexp-like string, it will be converted to regexp.\n * The regexp is tested against the full title of each test (i.e., the\n * name of the test preceded by titles of each its ancestral suites).\n * As such, using an <em>exact-match</em> fixed pattern against the\n * test name itself will not yield any matches.\n * <br>\n * <strong>Previous filter value will be overwritten on each call!</strong>\n *\n * @public\n * @see [CLI option](../#-grep-regexp-g-regexp)\n * @see {@link Mocha#fgrep}\n * @see {@link Mocha#invert}\n * @param {RegExp|String} re - Regular expression used to select tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title contains `\"match\"`, ignoring case\n * mocha.grep(/match/i);\n * @example\n *\n * // Same as above but with regexp-like string argument\n * mocha.grep('/match/i');\n * @example\n *\n * // ## Anti-example\n * // Given embedded test `it('only-this-test')`...\n * mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!\n */\nMocha.prototype.grep = function(re) {\n  if (utils.isString(re)) {\n    // extract args if it's regex-like, i.e: [string, pattern, flag]\n    var arg = re.match(/^\\/(.*)\\/(g|i|)$|.*/);\n    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);\n  } else {\n    this.options.grep = re;\n  }\n  return this;\n};\n\n/**\n * Inverts `grep` matches.\n *\n * @public\n * @see {@link Mocha#grep}\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title does *not* contain `\"match\"`, ignoring case\n * mocha.grep(/match/i).invert();\n */\nMocha.prototype.invert = function() {\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Enables or disables ignoring global leaks.\n *\n * @deprecated since v7.0.0\n * @public\n * @see {@link Mocha#checkLeaks}\n * @param {boolean} [ignoreLeaks=false] - Whether to ignore global leaks.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.ignoreLeaks = function(ignoreLeaks) {\n  utils.deprecate(\n    '\"ignoreLeaks()\" is DEPRECATED, please use \"checkLeaks()\" instead.'\n  );\n  this.options.checkLeaks = !ignoreLeaks;\n  return this;\n};\n\n/**\n * Enables or disables checking for global variables leaked while running tests.\n *\n * @public\n * @see [CLI option](../#-check-leaks)\n * @param {boolean} [checkLeaks=true] - Whether to check for global variable leaks.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.checkLeaks = function(checkLeaks) {\n  this.options.checkLeaks = checkLeaks !== false;\n  return this;\n};\n\n/**\n * Enables or disables whether or not to dispose after each test run.\n * Disable this to ensure you can run the test suite multiple times.\n * If disabled, be sure to dispose mocha when you're done to prevent memory leaks.\n * @public\n * @see {@link Mocha#dispose}\n * @param {boolean} cleanReferencesAfterRun\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.cleanReferencesAfterRun = function(cleanReferencesAfterRun) {\n  this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;\n  return this;\n};\n\n/**\n * Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.\n * It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.\n * @public\n */\nMocha.prototype.dispose = function() {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError(\n      'Cannot dispose while the mocha instance is still running tests.'\n    );\n  }\n  this.unloadFiles();\n  this._previousRunner && this._previousRunner.dispose();\n  this.suite.dispose();\n  this._state = mochaStates.DISPOSED;\n};\n\n/**\n * Displays full stack trace upon test failure.\n *\n * @public\n * @see [CLI option](../#-full-trace)\n * @param {boolean} [fullTrace=true] - Whether to print full stacktrace upon failure.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.fullTrace = function(fullTrace) {\n  this.options.fullTrace = fullTrace !== false;\n  return this;\n};\n\n/**\n * Enables desktop notification support if prerequisite software installed.\n *\n * @public\n * @see [CLI option](../#-growl-g)\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.growl = function() {\n  this.options.growl = this.isGrowlCapable();\n  if (!this.options.growl) {\n    var detail = process.browser\n      ? 'notification support not available in this browser...'\n      : 'notification support prerequisites not installed...';\n    console.error(detail + ' cannot enable!');\n  }\n  return this;\n};\n\n/**\n * @summary\n * Determines if Growl support seems likely.\n *\n * @description\n * <strong>Not available when run in browser.</strong>\n *\n * @private\n * @see {@link Growl#isCapable}\n * @see {@link Mocha#growl}\n * @return {boolean} whether Growl support can be expected\n */\nMocha.prototype.isGrowlCapable = growl.isCapable;\n\n/**\n * Implements desktop notifications using a pseudo-reporter.\n *\n * @private\n * @see {@link Mocha#growl}\n * @see {@link Growl#notify}\n * @param {Runner} runner - Runner instance.\n */\nMocha.prototype._growl = growl.notify;\n\n/**\n * Specifies whitelist of variable names to be expected in global scope.\n *\n * @public\n * @see [CLI option](../#-global-variable-name)\n * @see {@link Mocha#checkLeaks}\n * @param {String[]|String} global - Accepted global variable name(s).\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Specify variables to be expected in global scope\n * mocha.global(['jQuery', 'MyLib']);\n */\nMocha.prototype.global = function(global) {\n  this.options.global = (this.options.global || [])\n    .concat(global)\n    .filter(Boolean)\n    .filter(function(elt, idx, arr) {\n      return arr.indexOf(elt) === idx;\n    });\n  return this;\n};\n// for backwards compability, 'globals' is an alias of 'global'\nMocha.prototype.globals = Mocha.prototype.global;\n\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @deprecated since v7.0.0\n * @public\n * @see {@link Mocha#color}\n * @param {boolean} colors - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.useColors = function(colors) {\n  utils.deprecate('\"useColors()\" is DEPRECATED, please use \"color()\" instead.');\n  if (colors !== undefined) {\n    this.options.color = colors;\n  }\n  return this;\n};\n\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @public\n * @see [CLI option](../#-color-c-colors)\n * @param {boolean} [color=true] - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.color = function(color) {\n  this.options.color = color !== false;\n  return this;\n};\n\n/**\n * Determines if reporter should use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @deprecated since v7.0.0\n * @public\n * @see {@link Mocha#inlineDiffs}\n * @param {boolean} [inlineDiffs=false] - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {\n  utils.deprecate(\n    '\"useInlineDiffs()\" is DEPRECATED, please use \"inlineDiffs()\" instead.'\n  );\n  this.options.inlineDiffs = inlineDiffs !== undefined && inlineDiffs;\n  return this;\n};\n\n/**\n * Enables or disables reporter to use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @public\n * @see [CLI option](../#-inline-diffs)\n * @param {boolean} [inlineDiffs=true] - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.inlineDiffs = function(inlineDiffs) {\n  this.options.inlineDiffs = inlineDiffs !== false;\n  return this;\n};\n\n/**\n * Determines if reporter should include diffs in test failure output.\n *\n * @deprecated since v7.0.0\n * @public\n * @see {@link Mocha#diff}\n * @param {boolean} [hideDiff=false] - Whether to hide diffs.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.hideDiff = function(hideDiff) {\n  utils.deprecate('\"hideDiff()\" is DEPRECATED, please use \"diff()\" instead.');\n  this.options.diff = !(hideDiff === true);\n  return this;\n};\n\n/**\n * Enables or disables reporter to include diff in test failure output.\n *\n * @public\n * @see [CLI option](../#-diff)\n * @param {boolean} [diff=true] - Whether to show diff on failure.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.diff = function(diff) {\n  this.options.diff = diff !== false;\n  return this;\n};\n\n/**\n * @summary\n * Sets timeout threshold value.\n *\n * @description\n * A string argument can use shorthand (such as \"2s\") and will be converted.\n * If the value is `0`, timeouts will be disabled.\n *\n * @public\n * @see [CLI option](../#-timeout-ms-t-ms)\n * @see [Timeouts](../#timeouts)\n * @see {@link Mocha#enableTimeouts}\n * @param {number|string} msecs - Timeout threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets timeout to one second\n * mocha.timeout(1000);\n * @example\n *\n * // Same as above but using string argument\n * mocha.timeout('1s');\n */\nMocha.prototype.timeout = function(msecs) {\n  this.suite.timeout(msecs);\n  return this;\n};\n\n/**\n * Sets the number of times to retry failed tests.\n *\n * @public\n * @see [CLI option](../#-retries-n)\n * @see [Retry Tests](../#retry-tests)\n * @param {number} retry - Number of times to retry failed tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Allow any failed test to retry one more time\n * mocha.retries(1);\n */\nMocha.prototype.retries = function(n) {\n  this.suite.retries(n);\n  return this;\n};\n\n/**\n * Sets slowness threshold value.\n *\n * @public\n * @see [CLI option](../#-slow-ms-s-ms)\n * @param {number} msecs - Slowness threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets \"slow\" threshold to half a second\n * mocha.slow(500);\n * @example\n *\n * // Same as above but using string argument\n * mocha.slow('0.5s');\n */\nMocha.prototype.slow = function(msecs) {\n  this.suite.slow(msecs);\n  return this;\n};\n\n/**\n * Enables or disables timeouts.\n *\n * @public\n * @see [CLI option](../#-timeout-ms-t-ms)\n * @param {boolean} enableTimeouts - Whether to enable timeouts.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.enableTimeouts = function(enableTimeouts) {\n  this.suite.enableTimeouts(\n    arguments.length && enableTimeouts !== undefined ? enableTimeouts : true\n  );\n  return this;\n};\n\n/**\n * Forces all tests to either accept a `done` callback or return a promise.\n *\n * @public\n * @see [CLI option](../#-async-only-a)\n * @param {boolean} [asyncOnly=true] - Wether to force `done` callback or promise.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.asyncOnly = function(asyncOnly) {\n  this.options.asyncOnly = asyncOnly !== false;\n  return this;\n};\n\n/**\n * Disables syntax highlighting (in browser).\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.noHighlighting = function() {\n  this.options.noHighlighting = true;\n  return this;\n};\n\n/**\n * Enables or disables uncaught errors to propagate.\n *\n * @public\n * @see [CLI option](../#-allow-uncaught)\n * @param {boolean} [allowUncaught=true] - Whether to propagate uncaught errors.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.allowUncaught = function(allowUncaught) {\n  this.options.allowUncaught = allowUncaught !== false;\n  return this;\n};\n\n/**\n * @summary\n * Delays root suite execution.\n *\n * @description\n * Used to perform asynch operations before any suites are run.\n *\n * @public\n * @see [delayed root suite](../#delayed-root-suite)\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.delay = function delay() {\n  this.options.delay = true;\n  return this;\n};\n\n/**\n * Causes tests marked `only` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-only)\n * @param {boolean} [forbidOnly=true] - Whether tests marked `only` fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidOnly = function(forbidOnly) {\n  this.options.forbidOnly = forbidOnly !== false;\n  return this;\n};\n\n/**\n * Causes pending tests and tests marked `skip` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-pending)\n * @param {boolean} [forbidPending=true] - Whether pending tests fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidPending = function(forbidPending) {\n  this.options.forbidPending = forbidPending !== false;\n  return this;\n};\n\n/**\n * Throws an error if mocha is in the wrong state to be able to transition to a \"running\" state.\n */\nMocha.prototype._guardRunningStateTransition = function() {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError(\n      'Mocha instance is currently running tests, cannot start a next test run until this one is done',\n      this\n    );\n  }\n  if (\n    this._state === mochaStates.DISPOSED ||\n    this._state === mochaStates.REFERENCES_CLEANED\n  ) {\n    throw createMochaInstanceAlreadyDisposedError(\n      'Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.',\n      this._cleanReferencesAfterRun,\n      this\n    );\n  }\n};\n\n/**\n * Mocha version as specified by \"package.json\".\n *\n * @name Mocha#version\n * @type string\n * @readonly\n */\nObject.defineProperty(Mocha.prototype, 'version', {\n  value: require('../package.json').version,\n  configurable: false,\n  enumerable: true,\n  writable: false\n});\n\n/**\n * Callback to be invoked when test execution is complete.\n *\n * @callback DoneCB\n * @param {number} failures - Number of failures that occurred.\n */\n\n/**\n * Runs root suite and invokes `fn()` when complete.\n *\n * @description\n * To run tests multiple times (or to run tests in files that are\n * already in the `require` cache), make sure to clear them from\n * the cache first!\n *\n * @public\n * @see {@link Mocha#unloadFiles}\n * @see {@link Runner#run}\n * @param {DoneCB} [fn] - Callback invoked when test execution completed.\n * @returns {Runner} runner instance\n * @example\n *\n * // exit with non-zero status if there were test failures\n * mocha.run(failures => process.exitCode = failures ? 1 : 0);\n */\nMocha.prototype.run = function(fn) {\n  this._guardRunningStateTransition();\n  this._state = mochaStates.RUNNING;\n  if (this._previousRunner) {\n    this._previousRunner.dispose();\n    this.suite.reset();\n  }\n  if (this.files.length && !this.loadAsync) {\n    this.loadFiles();\n  }\n  var self = this;\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  var runner = new exports.Runner(suite, {\n    delay: options.delay,\n    cleanReferencesAfterRun: this._cleanReferencesAfterRun\n  });\n  createStatsCollector(runner);\n  var reporter = new this._reporter(runner, options);\n  runner.checkLeaks = options.checkLeaks === true;\n  runner.fullStackTrace = options.fullTrace;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  runner.forbidOnly = options.forbidOnly;\n  runner.forbidPending = options.forbidPending;\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n  if (options.global) {\n    runner.globals(options.global);\n  }\n  if (options.growl) {\n    this._growl(runner);\n  }\n  if (options.color !== undefined) {\n    exports.reporters.Base.useColors = options.color;\n  }\n  exports.reporters.Base.inlineDiffs = options.inlineDiffs;\n  exports.reporters.Base.hideDiff = !options.diff;\n\n  function done(failures) {\n    self._previousRunner = runner;\n    if (self._cleanReferencesAfterRun) {\n      self._state = mochaStates.REFERENCES_CLEANED;\n    } else {\n      self._state = mochaStates.INIT;\n    }\n    fn = fn || utils.noop;\n    if (reporter.done) {\n      reporter.done(failures, fn);\n    } else {\n      fn(failures);\n    }\n  }\n\n  return runner.run(done);\n};\n\n/**\n * Assigns hooks to the root suite\n * @param {MochaRootHookObject} [hooks] - Hooks to assign to root suite\n * @chainable\n */\nMocha.prototype.rootHooks = function rootHooks(hooks) {\n  if (utils.type(hooks) === 'object') {\n    var beforeAll = [].concat(hooks.beforeAll || []);\n    var beforeEach = [].concat(hooks.beforeEach || []);\n    var afterAll = [].concat(hooks.afterAll || []);\n    var afterEach = [].concat(hooks.afterEach || []);\n    var rootSuite = this.suite;\n    beforeAll.forEach(function(hook) {\n      rootSuite.beforeAll(hook);\n    });\n    beforeEach.forEach(function(hook) {\n      rootSuite.beforeEach(hook);\n    });\n    afterAll.forEach(function(hook) {\n      rootSuite.afterAll(hook);\n    });\n    afterEach.forEach(function(hook) {\n      rootSuite.afterEach(hook);\n    });\n  }\n  return this;\n};\n\n/**\n * An alternative way to define root hooks that works with parallel runs.\n * @typedef {Object} MochaRootHookObject\n * @property {Function|Function[]} [beforeAll] - \"Before all\" hook(s)\n * @property {Function|Function[]} [beforeEach] - \"Before each\" hook(s)\n * @property {Function|Function[]} [afterAll] - \"After all\" hook(s)\n * @property {Function|Function[]} [afterEach] - \"After each\" hook(s)\n */\n\n/**\n * An function that returns a {@link MochaRootHookObject}, either sync or async.\n * @callback MochaRootHookFunction\n * @returns {MochaRootHookObject|Promise<MochaRootHookObject>}\n */\n"]},"metadata":{},"sourceType":"script"}