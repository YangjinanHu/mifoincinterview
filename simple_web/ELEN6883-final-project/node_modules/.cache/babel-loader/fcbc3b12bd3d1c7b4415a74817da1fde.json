{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HardhatContext = void 0;\n\nconst extenders_1 = require(\"./core/config/extenders\");\n\nconst errors_1 = require(\"./core/errors\");\n\nconst errors_list_1 = require(\"./core/errors-list\");\n\nconst dsl_1 = require(\"./core/tasks/dsl\");\n\nconst platform_1 = require(\"./util/platform\");\n\nclass HardhatContext {\n  constructor() {\n    this.tasksDSL = new dsl_1.TasksDSL();\n    this.extendersManager = new extenders_1.ExtenderManager();\n    this.configExtenders = []; // NOTE: This is experimental and will be removed. Please contact our team if\n    // you are planning to use it.\n\n    this.experimentalHardhatNetworkMessageTraceHooks = [];\n  }\n\n  static isCreated() {\n    const globalWithHardhatContext = global;\n    return globalWithHardhatContext.__hardhatContext !== undefined;\n  }\n\n  static createHardhatContext() {\n    if (this.isCreated()) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n    }\n\n    const globalWithHardhatContext = global;\n    const ctx = new HardhatContext();\n    globalWithHardhatContext.__hardhatContext = ctx;\n    return ctx;\n  }\n\n  static getHardhatContext() {\n    const globalWithHardhatContext = global;\n    const ctx = globalWithHardhatContext.__hardhatContext;\n\n    if (ctx === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n    }\n\n    return ctx;\n  }\n\n  static deleteHardhatContext() {\n    const globalAsAny = global;\n    globalAsAny.__hardhatContext = undefined;\n  }\n\n  setHardhatRuntimeEnvironment(env) {\n    if (this.environment !== undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n    }\n\n    this.environment = env;\n  }\n\n  getHardhatRuntimeEnvironment() {\n    if (this.environment === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n    }\n\n    return this.environment;\n  }\n\n  setConfigLoadingAsStarted() {\n    this._filesLoadedBeforeConfig = (0, platform_1.getRequireCachedFiles)();\n  }\n\n  setConfigLoadingAsFinished() {\n    this._filesLoadedAfterConfig = (0, platform_1.getRequireCachedFiles)();\n  }\n\n  getFilesLoadedDuringConfig() {\n    // No config was loaded\n    if (this._filesLoadedBeforeConfig === undefined) {\n      return [];\n    }\n\n    (0, errors_1.assertHardhatInvariant)(this._filesLoadedAfterConfig !== undefined, \"Config loading was set as started and not finished\");\n    return arraysDifference(this._filesLoadedAfterConfig, this._filesLoadedBeforeConfig);\n  }\n\n}\n\nexports.HardhatContext = HardhatContext;\n\nfunction arraysDifference(a, b) {\n  return a.filter(e => !b.includes(e));\n}","map":{"version":3,"mappings":";;;;;;;AAMA;;AACA;;AACA;;AACA;;AACA;;AAMA,MAAaA,cAAb,CAA2B;AAA3BC;AA8BkB,oBAAW,IAAIC,cAAJ,EAAX;AACA,4BAAmB,IAAIC,2BAAJ,EAAnB;AAEA,2BAAoC,EAApC,CAjClB,CAmCE;AACA;;AACgB,uDACd,EADc;AA2CjB;;AA/EwB,SAATC,SAAS;AACrB,UAAMC,wBAAwB,GAAGC,MAAjC;AACA,WAAOD,wBAAwB,CAACE,gBAAzB,KAA8CC,SAArD;AACD;;AAEiC,SAApBC,oBAAoB;AAChC,QAAI,KAAKL,SAAL,EAAJ,EAAsB;AACpB,YAAM,IAAIM,qBAAJ,CAAiBC,qBAAOC,OAAP,CAAeC,uBAAhC,CAAN;AACD;;AACD,UAAMR,wBAAwB,GAAGC,MAAjC;AACA,UAAMQ,GAAG,GAAG,IAAId,cAAJ,EAAZ;AACAK,4BAAwB,CAACE,gBAAzB,GAA4CO,GAA5C;AACA,WAAOA,GAAP;AACD;;AAE8B,SAAjBC,iBAAiB;AAC7B,UAAMV,wBAAwB,GAAGC,MAAjC;AACA,UAAMQ,GAAG,GAAGT,wBAAwB,CAACE,gBAArC;;AACA,QAAIO,GAAG,KAAKN,SAAZ,EAAuB;AACrB,YAAM,IAAIE,qBAAJ,CAAiBC,qBAAOC,OAAP,CAAeI,mBAAhC,CAAN;AACD;;AACD,WAAOF,GAAP;AACD;;AAEiC,SAApBG,oBAAoB;AAChC,UAAMC,WAAW,GAAGZ,MAApB;AACAY,eAAW,CAACX,gBAAZ,GAA+BC,SAA/B;AACD;;AAcMW,8BAA4B,CAACC,GAAD,EAA+B;AAChE,QAAI,KAAKC,WAAL,KAAqBb,SAAzB,EAAoC;AAClC,YAAM,IAAIE,qBAAJ,CAAiBC,qBAAOC,OAAP,CAAeU,2BAAhC,CAAN;AACD;;AACD,SAAKD,WAAL,GAAmBD,GAAnB;AACD;;AAEMG,8BAA4B;AACjC,QAAI,KAAKF,WAAL,KAAqBb,SAAzB,EAAoC;AAClC,YAAM,IAAIE,qBAAJ,CAAiBC,qBAAOC,OAAP,CAAeY,uBAAhC,CAAN;AACD;;AACD,WAAO,KAAKH,WAAZ;AACD;;AAEMI,2BAAyB;AAC9B,SAAKC,wBAAL,GAAgC,uCAAhC;AACD;;AAEMC,4BAA0B;AAC/B,SAAKC,uBAAL,GAA+B,uCAA/B;AACD;;AAEMC,4BAA0B;AAC/B;AACA,QAAI,KAAKH,wBAAL,KAAkClB,SAAtC,EAAiD;AAC/C,aAAO,EAAP;AACD;;AAED,yCACE,KAAKoB,uBAAL,KAAiCpB,SADnC,EAEE,oDAFF;AAKA,WAAOsB,gBAAgB,CACrB,KAAKF,uBADgB,EAErB,KAAKF,wBAFgB,CAAvB;AAID;;AA/EwB;;AAA3BK;;AAkFA,SAASD,gBAAT,CAA6BE,CAA7B,EAAqCC,CAArC,EAA2C;AACzC,SAAOD,CAAC,CAACE,MAAF,CAAUC,CAAD,IAAO,CAACF,CAAC,CAACG,QAAF,CAAWD,CAAX,CAAjB,CAAP;AACD","names":["HardhatContext","constructor","dsl_1","extenders_1","isCreated","globalWithHardhatContext","global","__hardhatContext","undefined","createHardhatContext","errors_1","errors_list_1","GENERAL","CONTEXT_ALREADY_CREATED","ctx","getHardhatContext","CONTEXT_NOT_CREATED","deleteHardhatContext","globalAsAny","setHardhatRuntimeEnvironment","env","environment","CONTEXT_HRE_ALREADY_DEFINED","getHardhatRuntimeEnvironment","CONTEXT_HRE_NOT_DEFINED","setConfigLoadingAsStarted","_filesLoadedBeforeConfig","setConfigLoadingAsFinished","_filesLoadedAfterConfig","getFilesLoadedDuringConfig","arraysDifference","exports","a","b","filter","e","includes"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/context.ts"],"sourcesContent":["import {\n  ConfigExtender,\n  ExperimentalHardhatNetworkMessageTraceHook,\n  HardhatRuntimeEnvironment,\n} from \"../types\";\n\nimport { ExtenderManager } from \"./core/config/extenders\";\nimport { assertHardhatInvariant, HardhatError } from \"./core/errors\";\nimport { ERRORS } from \"./core/errors-list\";\nimport { TasksDSL } from \"./core/tasks/dsl\";\nimport { getRequireCachedFiles } from \"./util/platform\";\n\nexport type GlobalWithHardhatContext = typeof global & {\n  __hardhatContext: HardhatContext;\n};\n\nexport class HardhatContext {\n  public static isCreated(): boolean {\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    return globalWithHardhatContext.__hardhatContext !== undefined;\n  }\n\n  public static createHardhatContext(): HardhatContext {\n    if (this.isCreated()) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n    }\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    const ctx = new HardhatContext();\n    globalWithHardhatContext.__hardhatContext = ctx;\n    return ctx;\n  }\n\n  public static getHardhatContext(): HardhatContext {\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    const ctx = globalWithHardhatContext.__hardhatContext;\n    if (ctx === undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n    }\n    return ctx;\n  }\n\n  public static deleteHardhatContext() {\n    const globalAsAny = global as any;\n    globalAsAny.__hardhatContext = undefined;\n  }\n\n  public readonly tasksDSL = new TasksDSL();\n  public readonly extendersManager = new ExtenderManager();\n  public environment?: HardhatRuntimeEnvironment;\n  public readonly configExtenders: ConfigExtender[] = [];\n\n  // NOTE: This is experimental and will be removed. Please contact our team if\n  // you are planning to use it.\n  public readonly experimentalHardhatNetworkMessageTraceHooks: ExperimentalHardhatNetworkMessageTraceHook[] =\n    [];\n  private _filesLoadedBeforeConfig?: string[];\n  private _filesLoadedAfterConfig?: string[];\n\n  public setHardhatRuntimeEnvironment(env: HardhatRuntimeEnvironment) {\n    if (this.environment !== undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n    }\n    this.environment = env;\n  }\n\n  public getHardhatRuntimeEnvironment(): HardhatRuntimeEnvironment {\n    if (this.environment === undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n    }\n    return this.environment;\n  }\n\n  public setConfigLoadingAsStarted() {\n    this._filesLoadedBeforeConfig = getRequireCachedFiles();\n  }\n\n  public setConfigLoadingAsFinished() {\n    this._filesLoadedAfterConfig = getRequireCachedFiles();\n  }\n\n  public getFilesLoadedDuringConfig(): string[] {\n    // No config was loaded\n    if (this._filesLoadedBeforeConfig === undefined) {\n      return [];\n    }\n\n    assertHardhatInvariant(\n      this._filesLoadedAfterConfig !== undefined,\n      \"Config loading was set as started and not finished\"\n    );\n\n    return arraysDifference(\n      this._filesLoadedAfterConfig,\n      this._filesLoadedBeforeConfig\n    );\n  }\n}\n\nfunction arraysDifference<T>(a: T[], b: T[]): T[] {\n  return a.filter((e) => !b.includes(e));\n}\n"]},"metadata":{},"sourceType":"script"}