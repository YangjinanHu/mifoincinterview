{"ast":null,"code":"var _jsxFileName = \"/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/Create.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n\nconst Create = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    console.log(\"file: \", file);\n\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file);\n        console.log(result);\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList(result);\n    } catch (error) {\n      console.log(\"ipfs uri upload error: \", error);\n    }\n  };\n\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`; // mint nft \n\n    await (await nft.mint(uri)).wait(); // get tokenId of new nft \n\n    const id = await nft.tokenCount(); // approve marketplace to spend nft\n\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait(); // add nft to marketplace\n\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price in ETH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create & List NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/Create.js"],"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","client","Create","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","console","log","result","add","path","error","createNFT","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","toString","makeItem","maxWidth","e","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst Create = ({ marketplace, nft }) => {\n    const [image, setImage] = useState('')\n    const [price, setPrice] = useState(null)\n    const [name, setName] = useState('')\n    const [description, setDescription] = useState('')\n    const uploadToIPFS = async (event) => {\n        event.preventDefault()\n        const file = event.target.files[0]\n        console.log(\"file: \", file)\n        if (typeof file !== 'undefined') {\n            try {\n                const result = await client.add(file)\n                console.log(result)\n                setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n            } catch (error) {\n                console.log(\"ipfs image upload error: \", error)\n            }\n        }\n    }\n    const createNFT = async () => {\n        if (!image || !price || !name || !description) return\n        try {\n            const result = await client.add(JSON.stringify({ image, price, name, description }))\n            mintThenList(result)\n        } catch (error) {\n            console.log(\"ipfs uri upload error: \", error)\n        }\n    }\n    const mintThenList = async (result) => {\n        const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n        // mint nft \n        await (await nft.mint(uri)).wait()\n        // get tokenId of new nft \n        const id = await nft.tokenCount()\n        // approve marketplace to spend nft\n        await (await nft.setApprovalForAll(marketplace.address, true)).wait()\n        // add nft to marketplace\n        const listingPrice = ethers.utils.parseEther(price.toString())\n        await (await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n    }\n    return (\n        <div className=\"container-fluid mt-5\">\n            <div className=\"row\">\n                <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n                    <div className=\"content mx-auto\">\n                        <Row className=\"g-4\">\n                            <Form.Control\n                                type=\"file\"\n                                required\n                                name=\"file\"\n                                onChange={uploadToIPFS}\n                            />\n                            <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n                            <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n                            <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n                            <div className=\"d-grid px-0\">\n                                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                                    Create & List NFT!\n                </Button>\n                            </div>\n                        </Row>\n                    </div>\n                </main>\n            </div>\n        </div>\n    );\n}\n\nexport default Create"]},"metadata":{},"sourceType":"module"}