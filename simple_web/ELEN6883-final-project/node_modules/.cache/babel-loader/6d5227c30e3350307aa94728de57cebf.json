{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.analyzeModuleNotFoundError = exports.loadConfigAndTasks = exports.resolveConfigPath = void 0;\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst semver_1 = __importDefault(require(\"semver\"));\n\nconst context_1 = require(\"../../context\");\n\nconst solidityTracer_1 = require(\"../../hardhat-network/stack-traces/solidityTracer\");\n\nconst packageInfo_1 = require(\"../../util/packageInfo\");\n\nconst errors_1 = require(\"../errors\");\n\nconst errors_list_1 = require(\"../errors-list\");\n\nconst project_structure_1 = require(\"../project-structure\");\n\nconst config_resolution_1 = require(\"./config-resolution\");\n\nconst config_validation_1 = require(\"./config-validation\");\n\nconst default_config_1 = require(\"./default-config\");\n\nconst log = (0, debug_1.default)(\"hardhat:core:config\");\n\nfunction importCsjOrEsModule(filePath) {\n  const imported = require(filePath);\n\n  return imported.default !== undefined ? imported.default : imported;\n}\n\nfunction resolveConfigPath(configPath) {\n  if (configPath === undefined) {\n    configPath = (0, project_structure_1.getUserConfigPath)();\n  } else {\n    if (!path_1.default.isAbsolute(configPath)) {\n      configPath = path_1.default.join(process.cwd(), configPath);\n      configPath = path_1.default.normalize(configPath);\n    }\n  }\n\n  return configPath;\n}\n\nexports.resolveConfigPath = resolveConfigPath;\n\nfunction loadConfigAndTasks(hardhatArguments) {\n  let {\n    showEmptyConfigWarning = false,\n    showSolidityConfigWarnings = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    showEmptyConfigWarning: false,\n    showSolidityConfigWarnings: false\n  };\n  let configPath = hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n  configPath = resolveConfigPath(configPath);\n  log(`Loading Hardhat config from ${configPath}`); // Before loading the builtin tasks, the default and user's config we expose\n  // the config env in the global object.\n\n  const configEnv = require(\"./config-env\");\n\n  const globalAsAny = global;\n  Object.entries(configEnv).forEach(_ref => {\n    let [key, value] = _ref;\n    return globalAsAny[key] = value;\n  });\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.setConfigLoadingAsStarted();\n  let userConfig;\n\n  try {\n    require(\"../tasks/builtin-tasks\");\n\n    userConfig = importCsjOrEsModule(configPath);\n  } catch (e) {\n    analyzeModuleNotFoundError(e, configPath); // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n    throw e;\n  } finally {\n    ctx.setConfigLoadingAsFinished();\n  }\n\n  if (showEmptyConfigWarning) {\n    checkEmptyConfig(userConfig, {\n      showSolidityConfigWarnings\n    });\n  }\n\n  (0, config_validation_1.validateConfig)(userConfig);\n\n  if (showSolidityConfigWarnings) {\n    checkMissingSolidityConfig(userConfig);\n  } // To avoid bad practices we remove the previously exported stuff\n\n\n  Object.keys(configEnv).forEach(key => globalAsAny[key] = undefined);\n  const frozenUserConfig = deepFreezeUserConfig(userConfig);\n  const resolved = (0, config_resolution_1.resolveConfig)(configPath, userConfig);\n\n  for (const extender of context_1.HardhatContext.getHardhatContext().configExtenders) {\n    extender(resolved, frozenUserConfig);\n  }\n\n  if (showSolidityConfigWarnings) {\n    checkUnsupportedSolidityConfig(resolved);\n    checkUnsupportedRemappings(resolved);\n  }\n\n  return resolved;\n}\n\nexports.loadConfigAndTasks = loadConfigAndTasks;\n\nfunction deepFreezeUserConfig(config) {\n  let propertyPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (typeof config !== \"object\" || config === null) {\n    return config;\n  }\n\n  return new Proxy(config, {\n    get(target, property, receiver) {\n      return deepFreezeUserConfig(Reflect.get(target, property, receiver), [...propertyPath, property]);\n    },\n\n    set(target, property, _value, _receiver) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n        path: [...propertyPath, property].map(pathPart => pathPart.toString()).join(\".\")\n      });\n    }\n\n  });\n}\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropiate error. Otherwise it does\n * nothing.\n */\n\n\nfunction analyzeModuleNotFoundError(error, configPath) {\n  var _a;\n\n  const stackTraceParser = require(\"stacktrace-parser\");\n\n  if (error.code !== \"MODULE_NOT_FOUND\") {\n    return;\n  }\n\n  const stackTrace = stackTraceParser.parse(error.stack);\n  const throwingFile = stackTrace.filter(x => x.file !== null).map(x => x.file).find(x => path_1.default.isAbsolute(x));\n\n  if (throwingFile === null || throwingFile === undefined) {\n    return;\n  } // if the error comes from the config file, we ignore it because we know it's\n  // a direct import that's missing\n\n\n  if (throwingFile === configPath) {\n    return;\n  }\n\n  const packageJsonPath = (0, packageInfo_1.findClosestPackageJson)(throwingFile);\n\n  if (packageJsonPath === null) {\n    return;\n  }\n\n  const packageJson = fs_extra_1.default.readJsonSync(packageJsonPath);\n  const peerDependencies = (_a = packageJson.peerDependencies) !== null && _a !== void 0 ? _a : {};\n\n  if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n      plugin: packageJson.name\n    });\n  } // if the problem doesn't come from a hardhat plugin, we ignore it\n\n\n  if (peerDependencies.hardhat === undefined) {\n    return;\n  }\n\n  const missingPeerDependencies = {};\n\n  for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n    const peerDependencyPackageJson = readPackageJson(peerDependency);\n\n    if (peerDependencyPackageJson === undefined) {\n      missingPeerDependencies[peerDependency] = version;\n    }\n  }\n\n  const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n\n  if (missingPeerDependenciesNames.length > 0) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n      plugin: packageJson.name,\n      missingDependencies: missingPeerDependenciesNames.join(\", \"),\n      missingDependenciesVersions: Object.entries(missingPeerDependencies).map(_ref2 => {\n        let [name, version] = _ref2;\n        return `\"${name}@${version}\"`;\n      }).join(\" \")\n    });\n  }\n}\n\nexports.analyzeModuleNotFoundError = analyzeModuleNotFoundError;\n\nfunction readPackageJson(packageName) {\n  try {\n    const packageJsonPath = require.resolve(path_1.default.join(packageName, \"package.json\"));\n\n    return require(packageJsonPath);\n  } catch (_a) {\n    return undefined;\n  }\n}\n\nfunction checkEmptyConfig(userConfig, _ref3) {\n  let {\n    showSolidityConfigWarnings\n  } = _ref3;\n\n  if (userConfig === undefined || Object.keys(userConfig).length === 0) {\n    let warning = `Hardhat config is returning an empty config object, check the export from the config file if this is unexpected.\\n`; // This 'learn more' section is also printed by the solidity config warning,\n    // so we need to check to avoid printing it twice\n\n    if (!showSolidityConfigWarnings) {\n      warning += `\\nLearn more about configuring Hardhat at https://hardhat.org/config\\n`;\n    }\n\n    console.warn(chalk_1.default.yellow(warning));\n  }\n}\n\nfunction checkMissingSolidityConfig(userConfig) {\n  if (userConfig.solidity === undefined) {\n    console.warn(chalk_1.default.yellow(`Solidity compiler is not configured. Version ${default_config_1.DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`));\n  }\n}\n\nfunction checkUnsupportedSolidityConfig(resolvedConfig) {\n  const compilerVersions = resolvedConfig.solidity.compilers.map(x => x.version);\n  const overrideVersions = Object.values(resolvedConfig.solidity.overrides).map(x => x.version);\n  const solcVersions = [...compilerVersions, ...overrideVersions];\n  const unsupportedVersions = [];\n\n  for (const solcVersion of solcVersions) {\n    if (!semver_1.default.satisfies(solcVersion, solidityTracer_1.SUPPORTED_SOLIDITY_VERSION_RANGE)) {\n      unsupportedVersions.push(solcVersion);\n    }\n  }\n\n  if (unsupportedVersions.length > 0) {\n    console.warn(chalk_1.default.yellow(`Solidity ${unsupportedVersions.join(\", \")} ${unsupportedVersions.length === 1 ? \"is\" : \"are\"} not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/reference/solidity-support\n`));\n  }\n}\n\nfunction checkUnsupportedRemappings(_ref4) {\n  let {\n    solidity\n  } = _ref4;\n  const solcConfigs = [...solidity.compilers, ...Object.values(solidity.overrides)];\n  const remappings = solcConfigs.filter(_ref5 => {\n    let {\n      settings\n    } = _ref5;\n    return settings.remappings !== undefined;\n  });\n\n  if (remappings.length > 0) {\n    console.warn(chalk_1.default.yellow(`Solidity remappings are not currently supported; you may experience unexpected compilation results. Remove any 'remappings' fields from your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`));\n  }\n}","map":{"version":3,"mappings":"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","names":["log","importCsjOrEsModule","filePath","imported","require","default","undefined","resolveConfigPath","configPath","path_1","isAbsolute","join","process","cwd","normalize","exports","loadConfigAndTasks","hardhatArguments","showEmptyConfigWarning","showSolidityConfigWarnings","config","configEnv","globalAsAny","global","Object","entries","forEach","key","value","ctx","context_1","getHardhatContext","setConfigLoadingAsStarted","userConfig","e","analyzeModuleNotFoundError","setConfigLoadingAsFinished","checkEmptyConfig","checkMissingSolidityConfig","keys","frozenUserConfig","deepFreezeUserConfig","resolved","extender","configExtenders","checkUnsupportedSolidityConfig","checkUnsupportedRemappings","propertyPath","Proxy","get","target","property","receiver","Reflect","set","_value","_receiver","errors_1","errors_list_1","GENERAL","USER_CONFIG_MODIFIED","path","map","pathPart","toString","error","stackTraceParser","code","stackTrace","parse","stack","throwingFile","filter","x","file","find","packageJsonPath","packageJson","fs_extra_1","readJsonSync","peerDependencies","_a","PLUGINS","BUIDLER_PLUGIN","plugin","name","hardhat","missingPeerDependencies","peerDependency","version","peerDependencyPackageJson","readPackageJson","missingPeerDependenciesNames","length","MISSING_DEPENDENCIES","missingDependencies","missingDependenciesVersions","packageName","resolve","warning","console","warn","chalk_1","yellow","solidity","default_config_1","resolvedConfig","compilerVersions","compilers","overrideVersions","values","overrides","solcVersions","unsupportedVersions","solcVersion","semver_1","satisfies","solidityTracer_1","push","solcConfigs","remappings","settings"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/core/config/config-loading.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport debug from \"debug\";\nimport fsExtra from \"fs-extra\";\nimport path from \"path\";\nimport semver from \"semver\";\nimport type StackTraceParserT from \"stacktrace-parser\";\n\nimport { HardhatArguments, HardhatConfig } from \"../../../types\";\nimport { HardhatContext } from \"../../context\";\nimport { SUPPORTED_SOLIDITY_VERSION_RANGE } from \"../../hardhat-network/stack-traces/solidityTracer\";\nimport { findClosestPackageJson } from \"../../util/packageInfo\";\nimport { HardhatError } from \"../errors\";\nimport { ERRORS } from \"../errors-list\";\nimport { getUserConfigPath } from \"../project-structure\";\n\nimport { resolveConfig } from \"./config-resolution\";\nimport { validateConfig } from \"./config-validation\";\nimport { DEFAULT_SOLC_VERSION } from \"./default-config\";\n\nconst log = debug(\"hardhat:core:config\");\n\nfunction importCsjOrEsModule(filePath: string): any {\n  const imported = require(filePath);\n  return imported.default !== undefined ? imported.default : imported;\n}\n\nexport function resolveConfigPath(configPath: string | undefined) {\n  if (configPath === undefined) {\n    configPath = getUserConfigPath();\n  } else {\n    if (!path.isAbsolute(configPath)) {\n      configPath = path.join(process.cwd(), configPath);\n      configPath = path.normalize(configPath);\n    }\n  }\n  return configPath;\n}\n\nexport function loadConfigAndTasks(\n  hardhatArguments?: Partial<HardhatArguments>,\n  {\n    showEmptyConfigWarning = false,\n    showSolidityConfigWarnings = false,\n  }: {\n    showEmptyConfigWarning?: boolean;\n    showSolidityConfigWarnings?: boolean;\n  } = {\n    showEmptyConfigWarning: false,\n    showSolidityConfigWarnings: false,\n  }\n): HardhatConfig {\n  let configPath =\n    hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n\n  configPath = resolveConfigPath(configPath);\n  log(`Loading Hardhat config from ${configPath}`);\n  // Before loading the builtin tasks, the default and user's config we expose\n  // the config env in the global object.\n  const configEnv = require(\"./config-env\");\n\n  const globalAsAny: any = global;\n\n  Object.entries(configEnv).forEach(\n    ([key, value]) => (globalAsAny[key] = value)\n  );\n\n  const ctx = HardhatContext.getHardhatContext();\n\n  ctx.setConfigLoadingAsStarted();\n\n  let userConfig;\n\n  try {\n    require(\"../tasks/builtin-tasks\");\n    userConfig = importCsjOrEsModule(configPath);\n  } catch (e) {\n    analyzeModuleNotFoundError(e, configPath);\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw e;\n  } finally {\n    ctx.setConfigLoadingAsFinished();\n  }\n\n  if (showEmptyConfigWarning) {\n    checkEmptyConfig(userConfig, { showSolidityConfigWarnings });\n  }\n\n  validateConfig(userConfig);\n\n  if (showSolidityConfigWarnings) {\n    checkMissingSolidityConfig(userConfig);\n  }\n\n  // To avoid bad practices we remove the previously exported stuff\n  Object.keys(configEnv).forEach((key) => (globalAsAny[key] = undefined));\n\n  const frozenUserConfig = deepFreezeUserConfig(userConfig);\n\n  const resolved = resolveConfig(configPath, userConfig);\n\n  for (const extender of HardhatContext.getHardhatContext().configExtenders) {\n    extender(resolved, frozenUserConfig);\n  }\n\n  if (showSolidityConfigWarnings) {\n    checkUnsupportedSolidityConfig(resolved);\n    checkUnsupportedRemappings(resolved);\n  }\n\n  return resolved;\n}\n\nfunction deepFreezeUserConfig(\n  config: any,\n  propertyPath: Array<string | number | symbol> = []\n) {\n  if (typeof config !== \"object\" || config === null) {\n    return config;\n  }\n\n  return new Proxy(config, {\n    get(target: any, property: string | number | symbol, receiver: any): any {\n      return deepFreezeUserConfig(Reflect.get(target, property, receiver), [\n        ...propertyPath,\n        property,\n      ]);\n    },\n\n    set(\n      target: any,\n      property: string | number | symbol,\n      _value: any,\n      _receiver: any\n    ): boolean {\n      throw new HardhatError(ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n        path: [...propertyPath, property]\n          .map((pathPart) => pathPart.toString())\n          .join(\".\"),\n      });\n    },\n  });\n}\n\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropiate error. Otherwise it does\n * nothing.\n */\nexport function analyzeModuleNotFoundError(error: any, configPath: string) {\n  const stackTraceParser =\n    require(\"stacktrace-parser\") as typeof StackTraceParserT;\n\n  if (error.code !== \"MODULE_NOT_FOUND\") {\n    return;\n  }\n  const stackTrace = stackTraceParser.parse(error.stack);\n  const throwingFile = stackTrace\n    .filter((x) => x.file !== null)\n    .map((x) => x.file!)\n    .find((x) => path.isAbsolute(x));\n\n  if (throwingFile === null || throwingFile === undefined) {\n    return;\n  }\n\n  // if the error comes from the config file, we ignore it because we know it's\n  // a direct import that's missing\n  if (throwingFile === configPath) {\n    return;\n  }\n\n  const packageJsonPath = findClosestPackageJson(throwingFile);\n\n  if (packageJsonPath === null) {\n    return;\n  }\n\n  const packageJson = fsExtra.readJsonSync(packageJsonPath);\n  const peerDependencies: { [name: string]: string } =\n    packageJson.peerDependencies ?? {};\n\n  if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n    throw new HardhatError(ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n      plugin: packageJson.name,\n    });\n  }\n\n  // if the problem doesn't come from a hardhat plugin, we ignore it\n  if (peerDependencies.hardhat === undefined) {\n    return;\n  }\n\n  const missingPeerDependencies: { [name: string]: string } = {};\n  for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n    const peerDependencyPackageJson = readPackageJson(peerDependency);\n    if (peerDependencyPackageJson === undefined) {\n      missingPeerDependencies[peerDependency] = version;\n    }\n  }\n\n  const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n  if (missingPeerDependenciesNames.length > 0) {\n    throw new HardhatError(ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n      plugin: packageJson.name,\n      missingDependencies: missingPeerDependenciesNames.join(\", \"),\n      missingDependenciesVersions: Object.entries(missingPeerDependencies)\n        .map(([name, version]) => `\"${name}@${version}\"`)\n        .join(\" \"),\n    });\n  }\n}\n\ninterface PackageJson {\n  name: string;\n  version: string;\n  peerDependencies?: {\n    [name: string]: string;\n  };\n}\n\nfunction readPackageJson(packageName: string): PackageJson | undefined {\n  try {\n    const packageJsonPath = require.resolve(\n      path.join(packageName, \"package.json\")\n    );\n\n    return require(packageJsonPath);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction checkEmptyConfig(\n  userConfig: any,\n  { showSolidityConfigWarnings }: { showSolidityConfigWarnings: boolean }\n) {\n  if (userConfig === undefined || Object.keys(userConfig).length === 0) {\n    let warning = `Hardhat config is returning an empty config object, check the export from the config file if this is unexpected.\\n`;\n\n    // This 'learn more' section is also printed by the solidity config warning,\n    // so we need to check to avoid printing it twice\n    if (!showSolidityConfigWarnings) {\n      warning += `\\nLearn more about configuring Hardhat at https://hardhat.org/config\\n`;\n    }\n\n    console.warn(chalk.yellow(warning));\n  }\n}\n\nfunction checkMissingSolidityConfig(userConfig: any) {\n  if (userConfig.solidity === undefined) {\n    console.warn(\n      chalk.yellow(\n        `Solidity compiler is not configured. Version ${DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`\n      )\n    );\n  }\n}\n\nfunction checkUnsupportedSolidityConfig(resolvedConfig: HardhatConfig) {\n  const compilerVersions = resolvedConfig.solidity.compilers.map(\n    (x) => x.version\n  );\n  const overrideVersions = Object.values(resolvedConfig.solidity.overrides).map(\n    (x) => x.version\n  );\n  const solcVersions = [...compilerVersions, ...overrideVersions];\n\n  const unsupportedVersions: string[] = [];\n  for (const solcVersion of solcVersions) {\n    if (!semver.satisfies(solcVersion, SUPPORTED_SOLIDITY_VERSION_RANGE)) {\n      unsupportedVersions.push(solcVersion);\n    }\n  }\n\n  if (unsupportedVersions.length > 0) {\n    console.warn(\n      chalk.yellow(\n        `Solidity ${unsupportedVersions.join(\", \")} ${\n          unsupportedVersions.length === 1 ? \"is\" : \"are\"\n        } not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/reference/solidity-support\n`\n      )\n    );\n  }\n}\n\nfunction checkUnsupportedRemappings({ solidity }: HardhatConfig) {\n  const solcConfigs = [\n    ...solidity.compilers,\n    ...Object.values(solidity.overrides),\n  ];\n  const remappings = solcConfigs.filter(\n    ({ settings }) => settings.remappings !== undefined\n  );\n\n  if (remappings.length > 0) {\n    console.warn(\n      chalk.yellow(\n        `Solidity remappings are not currently supported; you may experience unexpected compilation results. Remove any 'remappings' fields from your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`\n      )\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}