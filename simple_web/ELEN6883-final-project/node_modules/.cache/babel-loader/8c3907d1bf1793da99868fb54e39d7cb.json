{"ast":null,"code":"import { SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, uuid4 } from '@sentry/utils';\n/**\n * @inheritdoc\n */\n\nvar Session =\n/** @class */\nfunction () {\n  function Session(context) {\n    this.errors = 0;\n    this.sid = uuid4();\n    this.timestamp = Date.now();\n    this.started = Date.now();\n    this.duration = 0;\n    this.status = SessionStatus.Ok;\n\n    if (context) {\n      this.update(context);\n    }\n  }\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n\n\n  Session.prototype.update = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || Date.now();\n\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n\n    if (context.did) {\n      this.did = \"\" + context.did;\n    }\n\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n\n    if (context.release) {\n      this.release = context.release;\n    }\n\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n\n    if (context.status) {\n      this.status = context.status;\n    }\n  };\n  /** JSDoc */\n\n\n  Session.prototype.close = function (status) {\n    if (status) {\n      this.update({\n        status: status\n      });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({\n        status: SessionStatus.Exited\n      });\n    } else {\n      this.update();\n    }\n  };\n  /** JSDoc */\n\n\n  Session.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      sid: \"\" + this.sid,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? \"\" + this.did : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent\n      })\n    });\n  };\n\n  return Session;\n}();\n\nexport { Session };","map":{"version":3,"mappings":"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","names":["SessionStatus","dropUndefinedKeys","uuid4","context","Date","now","Ok","update","Session","user","ip_address","ipAddress","did","id","email","username","timestamp","sid","length","started","duration","release","environment","userAgent","errors","status","Exited","init","toISOString","undefined","attrs","user_agent"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/hub/src/session.ts"],"sourcesContent":["import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number = Date.now();\n  public started: number = Date.now();\n  public duration: number = 0;\n  public status: SessionStatus = SessionStatus.Ok;\n  public environment?: string;\n  public ipAddress?: string;\n\n  constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || Date.now();\n\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  close(status?: Exclude<SessionStatus, SessionStatus.Ok>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({ status: SessionStatus.Exited });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      }),\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}