{"ast":null,"code":"'use strict';\n\nvar Runnable = require('./runnable');\n\nvar utils = require('./utils');\n\nvar errors = require('./errors');\n\nvar createInvalidArgumentTypeError = errors.createInvalidArgumentTypeError;\nvar isString = utils.isString;\nmodule.exports = Test;\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @public\n * @class\n * @extends Runnable\n * @param {String} title - Test title (required)\n * @param {Function} [fn] - Test callback.  If omitted, the Test is considered \"pending\"\n */\n\nfunction Test(title, fn) {\n  if (!isString(title)) {\n    throw createInvalidArgumentTypeError('Test argument \"title\" should be a string. Received type \"' + typeof title + '\"', 'title', 'string');\n  }\n\n  this.type = 'test';\n  Runnable.call(this, title, fn);\n  this.reset();\n}\n/**\n * Inherit from `Runnable.prototype`.\n */\n\n\nutils.inherits(Test, Runnable);\n/**\n * Resets the state initially or for a next run.\n */\n\nTest.prototype.reset = function () {\n  Runnable.prototype.reset.call(this);\n  this.pending = !this.fn;\n  delete this.state;\n};\n/**\n * Set or get retried test\n *\n * @private\n */\n\n\nTest.prototype.retriedTest = function (n) {\n  if (!arguments.length) {\n    return this._retriedTest;\n  }\n\n  this._retriedTest = n;\n};\n/**\n * Add test to the list of tests marked `only`.\n *\n * @private\n */\n\n\nTest.prototype.markOnly = function () {\n  this.parent.appendOnlyTest(this);\n};\n\nTest.prototype.clone = function () {\n  var test = new Test(this.title, this.fn);\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.enableTimeouts(this.enableTimeouts());\n  test.retries(this.retries());\n  test.currentRetry(this.currentRetry());\n  test.retriedTest(this.retriedTest() || this);\n  test.globals(this.globals());\n  test.parent = this.parent;\n  test.file = this.file;\n  test.ctx = this.ctx;\n  return test;\n};","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/test.js"],"names":["Runnable","require","utils","errors","createInvalidArgumentTypeError","isString","module","exports","Test","title","fn","type","call","reset","inherits","prototype","pending","state","retriedTest","n","arguments","length","_retriedTest","markOnly","parent","appendOnlyTest","clone","test","timeout","slow","enableTimeouts","retries","currentRetry","globals","file","ctx"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,8BAA8B,GAAGD,MAAM,CAACC,8BAA5C;AACA,IAAIC,QAAQ,GAAGH,KAAK,CAACG,QAArB;AAEAC,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,IAAT,CAAcC,KAAd,EAAqBC,EAArB,EAAyB;AACvB,MAAI,CAACL,QAAQ,CAACI,KAAD,CAAb,EAAsB;AACpB,UAAML,8BAA8B,CAClC,8DACE,OAAOK,KADT,GAEE,GAHgC,EAIlC,OAJkC,EAKlC,QALkC,CAApC;AAOD;;AACD,OAAKE,IAAL,GAAY,MAAZ;AACAX,EAAAA,QAAQ,CAACY,IAAT,CAAc,IAAd,EAAoBH,KAApB,EAA2BC,EAA3B;AACA,OAAKG,KAAL;AACD;AAED;AACA;AACA;;;AACAX,KAAK,CAACY,QAAN,CAAeN,IAAf,EAAqBR,QAArB;AAEA;AACA;AACA;;AACAQ,IAAI,CAACO,SAAL,CAAeF,KAAf,GAAuB,YAAW;AAChCb,EAAAA,QAAQ,CAACe,SAAT,CAAmBF,KAAnB,CAAyBD,IAAzB,CAA8B,IAA9B;AACA,OAAKI,OAAL,GAAe,CAAC,KAAKN,EAArB;AACA,SAAO,KAAKO,KAAZ;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACAT,IAAI,CAACO,SAAL,CAAeG,WAAf,GAA6B,UAASC,CAAT,EAAY;AACvC,MAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,WAAO,KAAKC,YAAZ;AACD;;AACD,OAAKA,YAAL,GAAoBH,CAApB;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACAX,IAAI,CAACO,SAAL,CAAeQ,QAAf,GAA0B,YAAW;AACnC,OAAKC,MAAL,CAAYC,cAAZ,CAA2B,IAA3B;AACD,CAFD;;AAIAjB,IAAI,CAACO,SAAL,CAAeW,KAAf,GAAuB,YAAW;AAChC,MAAIC,IAAI,GAAG,IAAInB,IAAJ,CAAS,KAAKC,KAAd,EAAqB,KAAKC,EAA1B,CAAX;AACAiB,EAAAA,IAAI,CAACC,OAAL,CAAa,KAAKA,OAAL,EAAb;AACAD,EAAAA,IAAI,CAACE,IAAL,CAAU,KAAKA,IAAL,EAAV;AACAF,EAAAA,IAAI,CAACG,cAAL,CAAoB,KAAKA,cAAL,EAApB;AACAH,EAAAA,IAAI,CAACI,OAAL,CAAa,KAAKA,OAAL,EAAb;AACAJ,EAAAA,IAAI,CAACK,YAAL,CAAkB,KAAKA,YAAL,EAAlB;AACAL,EAAAA,IAAI,CAACT,WAAL,CAAiB,KAAKA,WAAL,MAAsB,IAAvC;AACAS,EAAAA,IAAI,CAACM,OAAL,CAAa,KAAKA,OAAL,EAAb;AACAN,EAAAA,IAAI,CAACH,MAAL,GAAc,KAAKA,MAAnB;AACAG,EAAAA,IAAI,CAACO,IAAL,GAAY,KAAKA,IAAjB;AACAP,EAAAA,IAAI,CAACQ,GAAL,GAAW,KAAKA,GAAhB;AACA,SAAOR,IAAP;AACD,CAbD","sourcesContent":["'use strict';\nvar Runnable = require('./runnable');\nvar utils = require('./utils');\nvar errors = require('./errors');\nvar createInvalidArgumentTypeError = errors.createInvalidArgumentTypeError;\nvar isString = utils.isString;\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @public\n * @class\n * @extends Runnable\n * @param {String} title - Test title (required)\n * @param {Function} [fn] - Test callback.  If omitted, the Test is considered \"pending\"\n */\nfunction Test(title, fn) {\n  if (!isString(title)) {\n    throw createInvalidArgumentTypeError(\n      'Test argument \"title\" should be a string. Received type \"' +\n        typeof title +\n        '\"',\n      'title',\n      'string'\n    );\n  }\n  this.type = 'test';\n  Runnable.call(this, title, fn);\n  this.reset();\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\nutils.inherits(Test, Runnable);\n\n/**\n * Resets the state initially or for a next run.\n */\nTest.prototype.reset = function() {\n  Runnable.prototype.reset.call(this);\n  this.pending = !this.fn;\n  delete this.state;\n};\n\n/**\n * Set or get retried test\n *\n * @private\n */\nTest.prototype.retriedTest = function(n) {\n  if (!arguments.length) {\n    return this._retriedTest;\n  }\n  this._retriedTest = n;\n};\n\n/**\n * Add test to the list of tests marked `only`.\n *\n * @private\n */\nTest.prototype.markOnly = function() {\n  this.parent.appendOnlyTest(this);\n};\n\nTest.prototype.clone = function() {\n  var test = new Test(this.title, this.fn);\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.enableTimeouts(this.enableTimeouts());\n  test.retries(this.retries());\n  test.currentRetry(this.currentRetry());\n  test.retriedTest(this.retriedTest() || this);\n  test.globals(this.globals());\n  test.parent = this.parent;\n  test.file = this.file;\n  test.ctx = this.ctx;\n  return test;\n};\n"]},"metadata":{},"sourceType":"script"}