{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRunningHardhatCoreTests = exports.isLocalDev = exports.isHardhatInstalledLocallyOrLinked = void 0;\n\nconst fs = __importStar(require(\"fs\"));\n\nconst packageInfo_1 = require(\"../util/packageInfo\");\n/**\n * Returns true if Hardhat is installed locally or linked from its repository,\n * by looking for it using the node module resolution logic.\n *\n * If a config file is provided, we start looking for it from it. Otherwise,\n * we use the current working directory.\n */\n\n\nfunction isHardhatInstalledLocallyOrLinked(configPath) {\n  try {\n    const resolvedPackageJson = require.resolve(\"hardhat/package.json\", {\n      paths: [configPath !== null && configPath !== void 0 ? configPath : process.cwd()]\n    });\n\n    const thisPackageJson = (0, packageInfo_1.getPackageJsonPath)(); // We need to get the realpaths here, as hardhat may be linked and\n    // running with `node --preserve-symlinks`\n\n    return fs.realpathSync(resolvedPackageJson) === fs.realpathSync(thisPackageJson);\n  } catch (_a) {\n    return false;\n  }\n}\n\nexports.isHardhatInstalledLocallyOrLinked = isHardhatInstalledLocallyOrLinked;\n/**\n * Checks whether we're using Hardhat in development mode (that is, we're working _on_ Hardhat).\n */\n\nfunction isLocalDev() {\n  // TODO: This may give a false positive under yarn PnP\n  return isRunningHardhatCoreTests() || !__filename.includes(\"node_modules\");\n}\n\nexports.isLocalDev = isLocalDev;\n\nfunction isRunningHardhatCoreTests() {\n  return __filename.endsWith(\".ts\");\n}\n\nexports.isRunningHardhatCoreTests = isRunningHardhatCoreTests;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AAEA;;;;;;;;;AAOA,SAAgBA,iCAAhB,CAAkDC,UAAlD,EAAqE;AACnE,MAAI;AACF,UAAMC,mBAAmB,GAAGC,OAAO,CAACC,OAAR,CAAgB,sBAAhB,EAAwC;AAClEC,WAAK,EAAE,CAACJ,UAAU,SAAV,cAAU,WAAV,gBAAcK,OAAO,CAACC,GAAR,EAAf;AAD2D,KAAxC,CAA5B;;AAIA,UAAMC,eAAe,GAAG,uCAAxB,CALE,CAOF;AACA;;AACA,WACEC,EAAE,CAACC,YAAH,CAAgBR,mBAAhB,MAAyCO,EAAE,CAACC,YAAH,CAAgBF,eAAhB,CAD3C;AAGD,GAZD,CAYE,WAAM;AACN,WAAO,KAAP;AACD;AACF;;AAhBDG;AAkBA;;;;AAGA,SAAgBC,UAAhB,GAA0B;AACxB;AACA,SAAOC,yBAAyB,MAAM,CAACC,UAAU,CAACC,QAAX,CAAoB,cAApB,CAAvC;AACD;;AAHDJ;;AAKA,SAAgBE,yBAAhB,GAAyC;AACvC,SAAOC,UAAU,CAACE,QAAX,CAAoB,KAApB,CAAP;AACD;;AAFDL","names":["isHardhatInstalledLocallyOrLinked","configPath","resolvedPackageJson","require","resolve","paths","process","cwd","thisPackageJson","fs","realpathSync","exports","isLocalDev","isRunningHardhatCoreTests","__filename","includes","endsWith"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/core/execution-mode.ts"],"sourcesContent":["import * as fs from \"fs\";\n\nimport { getPackageJsonPath } from \"../util/packageInfo\";\n\n/**\n * Returns true if Hardhat is installed locally or linked from its repository,\n * by looking for it using the node module resolution logic.\n *\n * If a config file is provided, we start looking for it from it. Otherwise,\n * we use the current working directory.\n */\nexport function isHardhatInstalledLocallyOrLinked(configPath?: string) {\n  try {\n    const resolvedPackageJson = require.resolve(\"hardhat/package.json\", {\n      paths: [configPath ?? process.cwd()],\n    });\n\n    const thisPackageJson = getPackageJsonPath();\n\n    // We need to get the realpaths here, as hardhat may be linked and\n    // running with `node --preserve-symlinks`\n    return (\n      fs.realpathSync(resolvedPackageJson) === fs.realpathSync(thisPackageJson)\n    );\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks whether we're using Hardhat in development mode (that is, we're working _on_ Hardhat).\n */\nexport function isLocalDev(): boolean {\n  // TODO: This may give a false positive under yarn PnP\n  return isRunningHardhatCoreTests() || !__filename.includes(\"node_modules\");\n}\n\nexport function isRunningHardhatCoreTests(): boolean {\n  return __filename.endsWith(\".ts\");\n}\n"]},"metadata":{},"sourceType":"script"}