{"ast":null,"code":"'use strict';\n/**\n * @module Context\n */\n\n/**\n * Expose `Context`.\n */\n\nmodule.exports = Context;\n/**\n * Initialize a new `Context`.\n *\n * @private\n */\n\nfunction Context() {}\n/**\n * Set or get the context `Runnable` to `runnable`.\n *\n * @private\n * @param {Runnable} runnable\n * @return {Context} context\n */\n\n\nContext.prototype.runnable = function (runnable) {\n  if (!arguments.length) {\n    return this._runnable;\n  }\n\n  this.test = this._runnable = runnable;\n  return this;\n};\n/**\n * Set or get test timeout `ms`.\n *\n * @private\n * @param {number} ms\n * @return {Context} self\n */\n\n\nContext.prototype.timeout = function (ms) {\n  if (!arguments.length) {\n    return this.runnable().timeout();\n  }\n\n  this.runnable().timeout(ms);\n  return this;\n};\n/**\n * Set test timeout `enabled`.\n *\n * @private\n * @param {boolean} enabled\n * @return {Context} self\n */\n\n\nContext.prototype.enableTimeouts = function (enabled) {\n  if (!arguments.length) {\n    return this.runnable().enableTimeouts();\n  }\n\n  this.runnable().enableTimeouts(enabled);\n  return this;\n};\n/**\n * Set or get test slowness threshold `ms`.\n *\n * @private\n * @param {number} ms\n * @return {Context} self\n */\n\n\nContext.prototype.slow = function (ms) {\n  if (!arguments.length) {\n    return this.runnable().slow();\n  }\n\n  this.runnable().slow(ms);\n  return this;\n};\n/**\n * Mark a test as skipped.\n *\n * @private\n * @throws Pending\n */\n\n\nContext.prototype.skip = function () {\n  this.runnable().skip();\n};\n/**\n * Set or get a number of allowed retries on failed tests\n *\n * @private\n * @param {number} n\n * @return {Context} self\n */\n\n\nContext.prototype.retries = function (n) {\n  if (!arguments.length) {\n    return this.runnable().retries();\n  }\n\n  this.runnable().retries(n);\n  return this;\n};","map":{"version":3,"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/mocha/lib/context.js"],"names":["module","exports","Context","prototype","runnable","arguments","length","_runnable","test","timeout","ms","enableTimeouts","enabled","slow","skip","retries","n"],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,OAAT,GAAmB,CAAE;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,GAA6B,UAASA,QAAT,EAAmB;AAC9C,MAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB,WAAO,KAAKC,SAAZ;AACD;;AACD,OAAKC,IAAL,GAAY,KAAKD,SAAL,GAAiBH,QAA7B;AACA,SAAO,IAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACC,SAAR,CAAkBM,OAAlB,GAA4B,UAASC,EAAT,EAAa;AACvC,MAAI,CAACL,SAAS,CAACC,MAAf,EAAuB;AACrB,WAAO,KAAKF,QAAL,GAAgBK,OAAhB,EAAP;AACD;;AACD,OAAKL,QAAL,GAAgBK,OAAhB,CAAwBC,EAAxB;AACA,SAAO,IAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,OAAO,CAACC,SAAR,CAAkBQ,cAAlB,GAAmC,UAASC,OAAT,EAAkB;AACnD,MAAI,CAACP,SAAS,CAACC,MAAf,EAAuB;AACrB,WAAO,KAAKF,QAAL,GAAgBO,cAAhB,EAAP;AACD;;AACD,OAAKP,QAAL,GAAgBO,cAAhB,CAA+BC,OAA/B;AACA,SAAO,IAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,OAAO,CAACC,SAAR,CAAkBU,IAAlB,GAAyB,UAASH,EAAT,EAAa;AACpC,MAAI,CAACL,SAAS,CAACC,MAAf,EAAuB;AACrB,WAAO,KAAKF,QAAL,GAAgBS,IAAhB,EAAP;AACD;;AACD,OAAKT,QAAL,GAAgBS,IAAhB,CAAqBH,EAArB;AACA,SAAO,IAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACAR,OAAO,CAACC,SAAR,CAAkBW,IAAlB,GAAyB,YAAW;AAClC,OAAKV,QAAL,GAAgBU,IAAhB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,OAAO,CAACC,SAAR,CAAkBY,OAAlB,GAA4B,UAASC,CAAT,EAAY;AACtC,MAAI,CAACX,SAAS,CAACC,MAAf,EAAuB;AACrB,WAAO,KAAKF,QAAL,GAAgBW,OAAhB,EAAP;AACD;;AACD,OAAKX,QAAL,GAAgBW,OAAhB,CAAwBC,CAAxB;AACA,SAAO,IAAP;AACD,CAND","sourcesContent":["'use strict';\n/**\n * @module Context\n */\n/**\n * Expose `Context`.\n */\n\nmodule.exports = Context;\n\n/**\n * Initialize a new `Context`.\n *\n * @private\n */\nfunction Context() {}\n\n/**\n * Set or get the context `Runnable` to `runnable`.\n *\n * @private\n * @param {Runnable} runnable\n * @return {Context} context\n */\nContext.prototype.runnable = function(runnable) {\n  if (!arguments.length) {\n    return this._runnable;\n  }\n  this.test = this._runnable = runnable;\n  return this;\n};\n\n/**\n * Set or get test timeout `ms`.\n *\n * @private\n * @param {number} ms\n * @return {Context} self\n */\nContext.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this.runnable().timeout();\n  }\n  this.runnable().timeout(ms);\n  return this;\n};\n\n/**\n * Set test timeout `enabled`.\n *\n * @private\n * @param {boolean} enabled\n * @return {Context} self\n */\nContext.prototype.enableTimeouts = function(enabled) {\n  if (!arguments.length) {\n    return this.runnable().enableTimeouts();\n  }\n  this.runnable().enableTimeouts(enabled);\n  return this;\n};\n\n/**\n * Set or get test slowness threshold `ms`.\n *\n * @private\n * @param {number} ms\n * @return {Context} self\n */\nContext.prototype.slow = function(ms) {\n  if (!arguments.length) {\n    return this.runnable().slow();\n  }\n  this.runnable().slow(ms);\n  return this;\n};\n\n/**\n * Mark a test as skipped.\n *\n * @private\n * @throws Pending\n */\nContext.prototype.skip = function() {\n  this.runnable().skip();\n};\n\n/**\n * Set or get a number of allowed retries on failed tests\n *\n * @private\n * @param {number} n\n * @return {Context} self\n */\nContext.prototype.retries = function(n) {\n  if (!arguments.length) {\n    return this.runnable().retries();\n  }\n  this.runnable().retries(n);\n  return this;\n};\n"]},"metadata":{},"sourceType":"script"}