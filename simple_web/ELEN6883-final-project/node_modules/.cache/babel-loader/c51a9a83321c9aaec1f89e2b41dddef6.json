{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { getFirstHidden } from './lib/getFirstHidden';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nexport var getFID = function (onReport) {\n  var metric = initMetric('FID');\n  var firstHidden = getFirstHidden();\n\n  var entryHandler = function (entry) {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < firstHidden.timeStamp) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      metric.isFinal = true;\n      report();\n    }\n  };\n\n  var po = observe('first-input', entryHandler);\n  var report = bindReporter(onReport, metric, po);\n\n  if (po) {\n    onHidden(function () {\n      po.takeRecords().map(entryHandler);\n      po.disconnect();\n    }, true);\n  } else {\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      window.perfMetrics.onFirstInputDelay(function (value, event) {\n        // Only report if the page wasn't hidden prior to the first input.\n        if (event.timeStamp < firstHidden.timeStamp) {\n          metric.value = value;\n          metric.isFinal = true;\n          metric.entries = [{\n            entryType: 'first-input',\n            name: event.type,\n            target: event.target,\n            cancelable: event.cancelable,\n            startTime: event.timeStamp,\n            processingStart: event.timeStamp + value\n          }];\n          report();\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,YAAT,QAA6B,oBAA7B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAiD,eAAjD;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAwBA,OAAO,IAAMC,MAAM,GAAG,UAACC,QAAD,EAAwB;AAC5C,MAAMC,MAAM,GAAGL,UAAU,CAAC,KAAD,CAAzB;AACA,MAAMM,WAAW,GAAGP,cAAc,EAAlC;;AAEA,MAAMQ,YAAY,GAAG,UAACC,KAAD,EAA8B;AACjD;AACA,QAAIA,KAAK,CAACC,SAAN,GAAkBH,WAAW,CAACI,SAAlC,EAA6C;AAC3CL,YAAM,CAACM,KAAP,GAAeH,KAAK,CAACI,eAAN,GAAwBJ,KAAK,CAACC,SAA7C;AACAJ,YAAM,CAACQ,OAAP,CAAeC,IAAf,CAAoBN,KAApB;AACAH,YAAM,CAACU,OAAP,GAAiB,IAAjB;AACAC,YAAM;AACP;AACF,GARD;;AAUA,MAAMC,EAAE,GAAGhB,OAAO,CAAC,aAAD,EAAgBM,YAAhB,CAAlB;AACA,MAAMS,MAAM,GAAGlB,YAAY,CAACM,QAAD,EAAWC,MAAX,EAAmBY,EAAnB,CAA3B;;AAEA,MAAIA,EAAJ,EAAQ;AACNf,YAAQ,CAAC;AACPe,QAAE,CAACC,WAAH,GAAiBC,GAAjB,CAAqBZ,YAArB;AACAU,QAAE,CAACG,UAAH;AACD,KAHO,EAGL,IAHK,CAAR;AAID,GALD,MAKO;AACL,QAAIC,MAAM,CAACC,WAAP,IAAsBD,MAAM,CAACC,WAAP,CAAmBC,iBAA7C,EAAgE;AAC9DF,YAAM,CAACC,WAAP,CAAmBC,iBAAnB,CAAqC,UAACZ,KAAD,EAAgBa,KAAhB,EAA4B;AAC/D;AACA,YAAIA,KAAK,CAACd,SAAN,GAAkBJ,WAAW,CAACI,SAAlC,EAA6C;AAC3CL,gBAAM,CAACM,KAAP,GAAeA,KAAf;AACAN,gBAAM,CAACU,OAAP,GAAiB,IAAjB;AACAV,gBAAM,CAACQ,OAAP,GAAiB,CACf;AACEY,qBAAS,EAAE,aADb;AAEEC,gBAAI,EAAEF,KAAK,CAACG,IAFd;AAGEC,kBAAM,EAAEJ,KAAK,CAACI,MAHhB;AAIEC,sBAAU,EAAEL,KAAK,CAACK,UAJpB;AAKEpB,qBAAS,EAAEe,KAAK,CAACd,SALnB;AAMEE,2BAAe,EAAEY,KAAK,CAACd,SAAN,GAAkBC;AANrC,WADe,CAAjB;AAUAK,gBAAM;AACP;AACF,OAjBD;AAkBD;AACF;AACF,CA5CM","names":["bindReporter","getFirstHidden","initMetric","observe","onHidden","getFID","onReport","metric","firstHidden","entryHandler","entry","startTime","timeStamp","value","processingStart","entries","push","isFinal","report","po","takeRecords","map","disconnect","window","perfMetrics","onFirstInputDelay","event","entryType","name","type","target","cancelable"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/@sentry/tracing/src/browser/web-vitals/getFID.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getFirstHidden } from './lib/getFirstHidden';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\ninterface FIDPolyfillCallback {\n  (value: number, event: Event): void;\n}\n\ninterface FIDPolyfill {\n  onFirstInputDelay: (onReport: FIDPolyfillCallback) => void;\n}\n\ndeclare global {\n  interface Window {\n    perfMetrics: FIDPolyfill;\n  }\n}\n\n// https://wicg.github.io/event-timing/#sec-performance-event-timing\ninterface PerformanceEventTiming extends PerformanceEntry {\n  processingStart: DOMHighResTimeStamp;\n  cancelable?: boolean;\n  target?: Element;\n}\n\nexport const getFID = (onReport: ReportHandler): void => {\n  const metric = initMetric('FID');\n  const firstHidden = getFirstHidden();\n\n  const entryHandler = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < firstHidden.timeStamp) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      metric.isFinal = true;\n      report();\n    }\n  };\n\n  const po = observe('first-input', entryHandler as PerformanceEntryHandler);\n  const report = bindReporter(onReport, metric, po);\n\n  if (po) {\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  } else {\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      window.perfMetrics.onFirstInputDelay((value: number, event: Event) => {\n        // Only report if the page wasn't hidden prior to the first input.\n        if (event.timeStamp < firstHidden.timeStamp) {\n          metric.value = value;\n          metric.isFinal = true;\n          metric.entries = [\n            {\n              entryType: 'first-input',\n              name: event.type,\n              target: event.target,\n              cancelable: event.cancelable,\n              startTime: event.timeStamp,\n              processingStart: event.timeStamp + value,\n            } as PerformanceEventTiming,\n          ];\n          report();\n        }\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}