{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolidityError = exports.encodeSolidityStackTrace = exports.wrapWithSolidityErrorsCorrection = exports.getCurrentStack = void 0;\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst panic_errors_1 = require(\"./panic-errors\");\n\nconst solidity_stack_trace_1 = require(\"./solidity-stack-trace\");\n\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\n\nfunction getCurrentStack() {\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n\n  Error.prepareStackTrace = (e, s) => s;\n\n  const error = new Error();\n  const stack = error.stack;\n  Error.prepareStackTrace = previousPrepareStackTrace;\n  return stack;\n}\n\nexports.getCurrentStack = getCurrentStack;\n\nasync function wrapWithSolidityErrorsCorrection(f, stackFramesToRemove) {\n  const stackTraceAtCall = getCurrentStack().slice(stackFramesToRemove);\n\n  try {\n    return await f();\n  } catch (error) {\n    if (error.stackTrace === undefined) {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw error;\n    } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n    throw encodeSolidityStackTrace(error.message, error.stackTrace, stackTraceAtCall);\n  }\n}\n\nexports.wrapWithSolidityErrorsCorrection = wrapWithSolidityErrorsCorrection;\n\nfunction encodeSolidityStackTrace(fallbackMessage, stackTrace, previousStack) {\n  if (Error.prepareStackTrace === undefined) {\n    // Node 12 doesn't have a default Error.prepareStackTrace\n    require(\"source-map-support/register\");\n  }\n\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n\n  Error.prepareStackTrace = (error, stack) => {\n    if (previousStack !== undefined) {\n      stack = previousStack;\n    } else {\n      // We remove Hardhat Network related stack traces\n      stack.splice(0, 3);\n    }\n\n    for (const entry of stackTrace) {\n      const callsite = encodeStackTraceEntry(entry);\n\n      if (callsite === undefined) {\n        continue;\n      }\n\n      stack.unshift(callsite);\n    }\n\n    return previousPrepareStackTrace(error, stack);\n  };\n\n  const msg = getMessageFromLastStackTraceEntry(stackTrace[stackTrace.length - 1]);\n  const solidityError = new SolidityError(msg !== undefined ? msg : fallbackMessage, stackTrace); // This hack is here because prepare stack is lazy\n\n  solidityError.stack = solidityError.stack;\n  Error.prepareStackTrace = previousPrepareStackTrace;\n  return solidityError;\n}\n\nexports.encodeSolidityStackTrace = encodeSolidityStackTrace;\n\nfunction encodeStackTraceEntry(stackTraceEntry) {\n  switch (stackTraceEntry.type) {\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR:\n      return sourceReferenceToSolidityCallsite(Object.assign(Object.assign({}, stackTraceEntry.sourceReference), {\n        function: solidity_stack_trace_1.UNRECOGNIZED_FUNCTION_NAME\n      }));\n\n    case solidity_stack_trace_1.StackTraceEntryType.CALLSTACK_ENTRY:\n    case solidity_stack_trace_1.StackTraceEntryType.REVERT_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.PANIC_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.CUSTOM_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.INVALID_PARAMS_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.RETURNDATA_SIZE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.CALL_FAILED_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR:\n      return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CREATE_CALLSTACK_ENTRY:\n      return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.CONSTRUCTOR_FUNCTION_NAME, undefined);\n\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CONTRACT_CALLSTACK_ENTRY:\n      return new SolidityCallSite((0, ethereumjs_util_1.bufferToHex)(stackTraceEntry.address), solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n\n    case solidity_stack_trace_1.StackTraceEntryType.PRECOMPILE_ERROR:\n      return new SolidityCallSite(undefined, `<PrecompileContract ${stackTraceEntry.precompile}>`, solidity_stack_trace_1.PRECOMPILE_FUNCTION_NAME, undefined);\n\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR:\n      return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.CONSTRUCTOR_FUNCTION_NAME, undefined);\n\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR:\n      return new SolidityCallSite((0, ethereumjs_util_1.bufferToHex)(stackTraceEntry.address), solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n\n    case solidity_stack_trace_1.StackTraceEntryType.INTERNAL_FUNCTION_CALLSTACK_ENTRY:\n      return new SolidityCallSite(stackTraceEntry.sourceReference.file.sourceName, stackTraceEntry.sourceReference.contract, `internal@${stackTraceEntry.pc}`, undefined);\n\n    case solidity_stack_trace_1.StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR:\n      if (stackTraceEntry.sourceReference !== undefined) {\n        return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n      }\n\n      return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n\n    case solidity_stack_trace_1.StackTraceEntryType.OTHER_EXECUTION_ERROR:\n      if (stackTraceEntry.sourceReference === undefined) {\n        return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n      }\n\n      return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n  }\n}\n\nfunction sourceReferenceToSolidityCallsite(sourceReference) {\n  return new SolidityCallSite(sourceReference.file.sourceName, sourceReference.contract, sourceReference.function !== undefined ? sourceReference.function : solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, sourceReference.line);\n}\n\nfunction getMessageFromLastStackTraceEntry(stackTraceEntry) {\n  switch (stackTraceEntry.type) {\n    case solidity_stack_trace_1.StackTraceEntryType.PRECOMPILE_ERROR:\n      return `Transaction reverted: call to precompile ${stackTraceEntry.precompile} failed`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR:\n      return `Transaction reverted: non-payable function was called with value ${stackTraceEntry.value.toString(10)}`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.INVALID_PARAMS_ERROR:\n      return `Transaction reverted: function was called with incorrect parameters`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR:\n      return `Transaction reverted: fallback function is not payable and was called with value ${stackTraceEntry.value.toString(10)}`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR:\n      return `Transaction reverted: there's no receive function, fallback function is not payable and was called with value ${stackTraceEntry.value.toString(10)}`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR:\n      return `Transaction reverted: function selector was not recognized and there's no fallback function`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR:\n      return `Transaction reverted: function selector was not recognized and there's no fallback nor receive function`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.RETURNDATA_SIZE_ERROR:\n      return `Transaction reverted: function returned an unexpected amount of data`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR:\n      return `Transaction reverted: function call to a non-contract account`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.CALL_FAILED_ERROR:\n      return `Transaction reverted: function call failed to execute`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR:\n      return `Transaction reverted: library was called directly`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR:\n      if (stackTraceEntry.message.isErrorReturnData()) {\n        return `VM Exception while processing transaction: reverted with reason string '${stackTraceEntry.message.decodeError()}'`;\n      }\n\n      return \"Transaction reverted without a reason string\";\n\n    case solidity_stack_trace_1.StackTraceEntryType.REVERT_ERROR:\n      if (stackTraceEntry.message.isErrorReturnData()) {\n        return `VM Exception while processing transaction: reverted with reason string '${stackTraceEntry.message.decodeError()}'`;\n      }\n\n      if (stackTraceEntry.isInvalidOpcodeError) {\n        return \"VM Exception while processing transaction: invalid opcode\";\n      }\n\n      return \"Transaction reverted without a reason string\";\n\n    case solidity_stack_trace_1.StackTraceEntryType.PANIC_ERROR:\n      const panicMessage = (0, panic_errors_1.panicErrorCodeToMessage)(stackTraceEntry.errorCode);\n      return `VM Exception while processing transaction: ${panicMessage}`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.CUSTOM_ERROR:\n      return `VM Exception while processing transaction: ${stackTraceEntry.message}`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.OTHER_EXECUTION_ERROR:\n      // TODO: What if there was returnData?\n      return `Transaction reverted and Hardhat couldn't infer the reason. Please report this to help us improve Hardhat.`;\n\n    case solidity_stack_trace_1.StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR:\n      return \"Transaction reverted without a reason string and without a valid sourcemap provided by the compiler. Some line numbers may be off. We strongly recommend upgrading solc and always using revert reasons.\";\n\n    case solidity_stack_trace_1.StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR:\n      return \"Transaction reverted: trying to deploy a contract whose code is too large\";\n\n    case solidity_stack_trace_1.StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR:\n      return \"Transaction reverted: contract call run out of gas and made the transaction revert\";\n  }\n} // Note: This error class MUST NOT extend ProviderError, as libraries\n//   use the code property to detect if they are dealing with a JSON-RPC error,\n//   and take control of errors.\n\n\nclass SolidityError extends Error {\n  constructor(message, stackTrace) {\n    super(message);\n    this.stackTrace = stackTrace;\n  }\n\n  [inspect]() {\n    return this.inspect();\n  }\n\n  inspect() {\n    return this.stack !== undefined ? this.stack : \"Internal error when encoding SolidityError\";\n  }\n\n}\n\nexports.SolidityError = SolidityError;\n\nclass SolidityCallSite {\n  constructor(_sourceName, _contract, _functionName, _line) {\n    this._sourceName = _sourceName;\n    this._contract = _contract;\n    this._functionName = _functionName;\n    this._line = _line;\n  }\n\n  getColumnNumber() {\n    return null;\n  }\n\n  getEvalOrigin() {\n    return undefined;\n  }\n\n  getFileName() {\n    var _a;\n\n    return (_a = this._sourceName) !== null && _a !== void 0 ? _a : \"unknown\";\n  }\n\n  getFunction() {\n    return undefined;\n  }\n\n  getFunctionName() {\n    var _a; // if it's a top-level function, we print its name\n\n\n    if (this._contract === undefined) {\n      return (_a = this._functionName) !== null && _a !== void 0 ? _a : null;\n    }\n\n    return null;\n  }\n\n  getLineNumber() {\n    return this._line !== undefined ? this._line : null;\n  }\n\n  getMethodName() {\n    var _a;\n\n    if (this._contract !== undefined) {\n      return (_a = this._functionName) !== null && _a !== void 0 ? _a : null;\n    }\n\n    return null;\n  }\n\n  getPosition() {\n    return 0;\n  }\n\n  getPromiseIndex() {\n    return 0;\n  }\n\n  getScriptNameOrSourceURL() {\n    return null;\n  }\n\n  getThis() {\n    return undefined;\n  }\n\n  getTypeName() {\n    var _a;\n\n    return (_a = this._contract) !== null && _a !== void 0 ? _a : null;\n  }\n\n  isAsync() {\n    return false;\n  }\n\n  isConstructor() {\n    return false;\n  }\n\n  isEval() {\n    return false;\n  }\n\n  isNative() {\n    return false;\n  }\n\n  isPromiseAll() {\n    return false;\n  }\n\n  isToplevel() {\n    return false;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["inspect","Symbol","for","getCurrentStack","previousPrepareStackTrace","Error","prepareStackTrace","e","s","error","stack","exports","wrapWithSolidityErrorsCorrection","f","stackFramesToRemove","stackTraceAtCall","slice","stackTrace","undefined","encodeSolidityStackTrace","message","fallbackMessage","previousStack","require","splice","entry","callsite","encodeStackTraceEntry","unshift","msg","getMessageFromLastStackTraceEntry","length","solidityError","SolidityError","stackTraceEntry","type","solidity_stack_trace_1","UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR","MISSING_FALLBACK_OR_RECEIVE_ERROR","sourceReferenceToSolidityCallsite","sourceReference","function","CALLSTACK_ENTRY","REVERT_ERROR","PANIC_ERROR","CUSTOM_ERROR","FUNCTION_NOT_PAYABLE_ERROR","INVALID_PARAMS_ERROR","FALLBACK_NOT_PAYABLE_ERROR","FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR","RETURNDATA_SIZE_ERROR","NONCONTRACT_ACCOUNT_CALLED_ERROR","CALL_FAILED_ERROR","DIRECT_LIBRARY_CALL_ERROR","UNMAPPED_SOLC_0_6_3_REVERT_ERROR","CONTRACT_TOO_LARGE_ERROR","UNRECOGNIZED_CREATE_CALLSTACK_ENTRY","SolidityCallSite","UNRECOGNIZED_CONTRACT_CALLSTACK_ENTRY","address","PRECOMPILE_ERROR","precompile","UNRECOGNIZED_CREATE_ERROR","UNRECOGNIZED_CONTRACT_ERROR","INTERNAL_FUNCTION_CALLSTACK_ENTRY","file","sourceName","contract","pc","CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR","OTHER_EXECUTION_ERROR","line","value","toString","isErrorReturnData","decodeError","isInvalidOpcodeError","panicMessage","errorCode","constructor","_sourceName","_contract","_functionName","_line","getColumnNumber","getEvalOrigin","getFileName","_a","getFunction","getFunctionName","getLineNumber","getMethodName","getPosition","getPromiseIndex","getScriptNameOrSourceURL","getThis","getTypeName","isAsync","isConstructor","isEval","isNative","isPromiseAll","isToplevel"],"sources":["/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/node_modules/hardhat/src/internal/hardhat-network/stack-traces/solidity-errors.ts"],"sourcesContent":["import { bufferToHex } from \"ethereumjs-util\";\n\nimport { panicErrorCodeToMessage } from \"./panic-errors\";\nimport {\n  CONSTRUCTOR_FUNCTION_NAME,\n  PRECOMPILE_FUNCTION_NAME,\n  SolidityStackTrace,\n  SolidityStackTraceEntry,\n  SourceReference,\n  StackTraceEntryType,\n  UNKNOWN_FUNCTION_NAME,\n  UNRECOGNIZED_CONTRACT_NAME,\n  UNRECOGNIZED_FUNCTION_NAME,\n} from \"./solidity-stack-trace\";\n\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\n\nexport function getCurrentStack(): NodeJS.CallSite[] {\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n\n  Error.prepareStackTrace = (e, s) => s;\n\n  const error = new Error();\n  const stack: NodeJS.CallSite[] = error.stack as any;\n\n  Error.prepareStackTrace = previousPrepareStackTrace;\n\n  return stack;\n}\n\nexport async function wrapWithSolidityErrorsCorrection(\n  f: () => Promise<any>,\n  stackFramesToRemove: number\n) {\n  const stackTraceAtCall = getCurrentStack().slice(stackFramesToRemove);\n\n  try {\n    return await f();\n  } catch (error: any) {\n    if (error.stackTrace === undefined) {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw error;\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw encodeSolidityStackTrace(\n      error.message,\n      error.stackTrace,\n      stackTraceAtCall\n    );\n  }\n}\n\nexport function encodeSolidityStackTrace(\n  fallbackMessage: string,\n  stackTrace: SolidityStackTrace,\n  previousStack?: NodeJS.CallSite[]\n): SolidityError {\n  if (Error.prepareStackTrace === undefined) {\n    // Node 12 doesn't have a default Error.prepareStackTrace\n    require(\"source-map-support/register\");\n  }\n\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = (error, stack) => {\n    if (previousStack !== undefined) {\n      stack = previousStack;\n    } else {\n      // We remove Hardhat Network related stack traces\n      stack.splice(0, 3);\n    }\n\n    for (const entry of stackTrace) {\n      const callsite = encodeStackTraceEntry(entry);\n      if (callsite === undefined) {\n        continue;\n      }\n\n      stack.unshift(callsite);\n    }\n\n    return previousPrepareStackTrace!(error, stack);\n  };\n\n  const msg = getMessageFromLastStackTraceEntry(\n    stackTrace[stackTrace.length - 1]\n  );\n\n  const solidityError = new SolidityError(\n    msg !== undefined ? msg : fallbackMessage,\n    stackTrace\n  );\n\n  // This hack is here because prepare stack is lazy\n  solidityError.stack = solidityError.stack;\n\n  Error.prepareStackTrace = previousPrepareStackTrace;\n\n  return solidityError;\n}\n\nfunction encodeStackTraceEntry(\n  stackTraceEntry: SolidityStackTraceEntry\n): SolidityCallSite {\n  switch (stackTraceEntry.type) {\n    case StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR:\n    case StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR:\n      return sourceReferenceToSolidityCallsite({\n        ...stackTraceEntry.sourceReference,\n        function: UNRECOGNIZED_FUNCTION_NAME,\n      });\n\n    case StackTraceEntryType.CALLSTACK_ENTRY:\n    case StackTraceEntryType.REVERT_ERROR:\n    case StackTraceEntryType.PANIC_ERROR:\n    case StackTraceEntryType.CUSTOM_ERROR:\n    case StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR:\n    case StackTraceEntryType.INVALID_PARAMS_ERROR:\n    case StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR:\n    case StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR:\n    case StackTraceEntryType.RETURNDATA_SIZE_ERROR:\n    case StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR:\n    case StackTraceEntryType.CALL_FAILED_ERROR:\n    case StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR:\n    case StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR:\n    case StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR:\n      return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n\n    case StackTraceEntryType.UNRECOGNIZED_CREATE_CALLSTACK_ENTRY:\n      return new SolidityCallSite(\n        undefined,\n        UNRECOGNIZED_CONTRACT_NAME,\n        CONSTRUCTOR_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.UNRECOGNIZED_CONTRACT_CALLSTACK_ENTRY:\n      return new SolidityCallSite(\n        bufferToHex(stackTraceEntry.address),\n        UNRECOGNIZED_CONTRACT_NAME,\n        UNKNOWN_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.PRECOMPILE_ERROR:\n      return new SolidityCallSite(\n        undefined,\n        `<PrecompileContract ${stackTraceEntry.precompile}>`,\n        PRECOMPILE_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR:\n      return new SolidityCallSite(\n        undefined,\n        UNRECOGNIZED_CONTRACT_NAME,\n        CONSTRUCTOR_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR:\n      return new SolidityCallSite(\n        bufferToHex(stackTraceEntry.address),\n        UNRECOGNIZED_CONTRACT_NAME,\n        UNKNOWN_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.INTERNAL_FUNCTION_CALLSTACK_ENTRY:\n      return new SolidityCallSite(\n        stackTraceEntry.sourceReference.file.sourceName,\n        stackTraceEntry.sourceReference.contract,\n        `internal@${stackTraceEntry.pc}`,\n        undefined\n      );\n    case StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR:\n      if (stackTraceEntry.sourceReference !== undefined) {\n        return sourceReferenceToSolidityCallsite(\n          stackTraceEntry.sourceReference\n        );\n      }\n\n      return new SolidityCallSite(\n        undefined,\n        UNRECOGNIZED_CONTRACT_NAME,\n        UNKNOWN_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.OTHER_EXECUTION_ERROR:\n      if (stackTraceEntry.sourceReference === undefined) {\n        return new SolidityCallSite(\n          undefined,\n          UNRECOGNIZED_CONTRACT_NAME,\n          UNKNOWN_FUNCTION_NAME,\n          undefined\n        );\n      }\n\n      return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n  }\n}\n\nfunction sourceReferenceToSolidityCallsite(\n  sourceReference: SourceReference\n): SolidityCallSite {\n  return new SolidityCallSite(\n    sourceReference.file.sourceName,\n    sourceReference.contract,\n    sourceReference.function !== undefined\n      ? sourceReference.function\n      : UNKNOWN_FUNCTION_NAME,\n    sourceReference.line\n  );\n}\n\nfunction getMessageFromLastStackTraceEntry(\n  stackTraceEntry: SolidityStackTraceEntry\n): string | undefined {\n  switch (stackTraceEntry.type) {\n    case StackTraceEntryType.PRECOMPILE_ERROR:\n      return `Transaction reverted: call to precompile ${stackTraceEntry.precompile} failed`;\n\n    case StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR:\n      return `Transaction reverted: non-payable function was called with value ${stackTraceEntry.value.toString(\n        10\n      )}`;\n\n    case StackTraceEntryType.INVALID_PARAMS_ERROR:\n      return `Transaction reverted: function was called with incorrect parameters`;\n\n    case StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR:\n      return `Transaction reverted: fallback function is not payable and was called with value ${stackTraceEntry.value.toString(\n        10\n      )}`;\n\n    case StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR:\n      return `Transaction reverted: there's no receive function, fallback function is not payable and was called with value ${stackTraceEntry.value.toString(\n        10\n      )}`;\n\n    case StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR:\n      return `Transaction reverted: function selector was not recognized and there's no fallback function`;\n\n    case StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR:\n      return `Transaction reverted: function selector was not recognized and there's no fallback nor receive function`;\n\n    case StackTraceEntryType.RETURNDATA_SIZE_ERROR:\n      return `Transaction reverted: function returned an unexpected amount of data`;\n\n    case StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR:\n      return `Transaction reverted: function call to a non-contract account`;\n\n    case StackTraceEntryType.CALL_FAILED_ERROR:\n      return `Transaction reverted: function call failed to execute`;\n\n    case StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR:\n      return `Transaction reverted: library was called directly`;\n\n    case StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR:\n    case StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR:\n      if (stackTraceEntry.message.isErrorReturnData()) {\n        return `VM Exception while processing transaction: reverted with reason string '${stackTraceEntry.message.decodeError()}'`;\n      }\n\n      return \"Transaction reverted without a reason string\";\n\n    case StackTraceEntryType.REVERT_ERROR:\n      if (stackTraceEntry.message.isErrorReturnData()) {\n        return `VM Exception while processing transaction: reverted with reason string '${stackTraceEntry.message.decodeError()}'`;\n      }\n\n      if (stackTraceEntry.isInvalidOpcodeError) {\n        return \"VM Exception while processing transaction: invalid opcode\";\n      }\n\n      return \"Transaction reverted without a reason string\";\n\n    case StackTraceEntryType.PANIC_ERROR:\n      const panicMessage = panicErrorCodeToMessage(stackTraceEntry.errorCode);\n      return `VM Exception while processing transaction: ${panicMessage}`;\n\n    case StackTraceEntryType.CUSTOM_ERROR:\n      return `VM Exception while processing transaction: ${stackTraceEntry.message}`;\n\n    case StackTraceEntryType.OTHER_EXECUTION_ERROR:\n      // TODO: What if there was returnData?\n      return `Transaction reverted and Hardhat couldn't infer the reason. Please report this to help us improve Hardhat.`;\n\n    case StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR:\n      return \"Transaction reverted without a reason string and without a valid sourcemap provided by the compiler. Some line numbers may be off. We strongly recommend upgrading solc and always using revert reasons.\";\n\n    case StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR:\n      return \"Transaction reverted: trying to deploy a contract whose code is too large\";\n\n    case StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR:\n      return \"Transaction reverted: contract call run out of gas and made the transaction revert\";\n  }\n}\n\n// Note: This error class MUST NOT extend ProviderError, as libraries\n//   use the code property to detect if they are dealing with a JSON-RPC error,\n//   and take control of errors.\nexport class SolidityError extends Error {\n  public readonly stackTrace: SolidityStackTrace;\n\n  constructor(message: string, stackTrace: SolidityStackTrace) {\n    super(message);\n    this.stackTrace = stackTrace;\n  }\n\n  public [inspect](): string {\n    return this.inspect();\n  }\n\n  public inspect(): string {\n    return this.stack !== undefined\n      ? this.stack\n      : \"Internal error when encoding SolidityError\";\n  }\n}\n\nclass SolidityCallSite implements NodeJS.CallSite {\n  constructor(\n    private _sourceName: string | undefined,\n    private _contract: string | undefined,\n    private _functionName: string | undefined,\n    private _line: number | undefined\n  ) {}\n\n  public getColumnNumber() {\n    return null;\n  }\n\n  public getEvalOrigin() {\n    return undefined;\n  }\n\n  public getFileName() {\n    return this._sourceName ?? \"unknown\";\n  }\n\n  public getFunction() {\n    return undefined;\n  }\n\n  public getFunctionName() {\n    // if it's a top-level function, we print its name\n    if (this._contract === undefined) {\n      return this._functionName ?? null;\n    }\n\n    return null;\n  }\n\n  public getLineNumber() {\n    return this._line !== undefined ? this._line : null;\n  }\n\n  public getMethodName() {\n    if (this._contract !== undefined) {\n      return this._functionName ?? null;\n    }\n\n    return null;\n  }\n\n  public getPosition() {\n    return 0;\n  }\n\n  public getPromiseIndex() {\n    return 0;\n  }\n\n  public getScriptNameOrSourceURL() {\n    return null;\n  }\n\n  public getThis() {\n    return undefined;\n  }\n\n  public getTypeName() {\n    return this._contract ?? null;\n  }\n\n  public isAsync() {\n    return false;\n  }\n\n  public isConstructor() {\n    return false;\n  }\n\n  public isEval() {\n    return false;\n  }\n\n  public isNative() {\n    return false;\n  }\n\n  public isPromiseAll() {\n    return false;\n  }\n\n  public isToplevel() {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}