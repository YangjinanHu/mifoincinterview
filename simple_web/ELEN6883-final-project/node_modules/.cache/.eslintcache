[{"/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/index.js":"1","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/serviceWorker.js":"2","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/App.js":"3","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/Navbar.js":"4","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/Home.js":"5","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/Create.js":"6","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/MyPurchases.js":"7","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/MyListedItems.js":"8"},{"size":493,"mtime":1652138536337,"results":"9","hashOfConfig":"10"},{"size":4951,"mtime":1652138536337,"results":"11","hashOfConfig":"10"},{"size":2953,"mtime":1652233723637,"results":"12","hashOfConfig":"10"},{"size":1971,"mtime":1652302874045,"results":"13","hashOfConfig":"10"},{"size":4448,"mtime":1652303391824,"results":"14","hashOfConfig":"10"},{"size":3864,"mtime":1652302855992,"results":"15","hashOfConfig":"10"},{"size":3771,"mtime":1652302320534,"results":"16","hashOfConfig":"10"},{"size":4406,"mtime":1652302866526,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1di15pn",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"37"},"/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/index.js",[],[],"/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/serviceWorker.js",[],[],"/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/App.js",[],[],"/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/Navbar.js",[],[],"/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/Home.js",["46"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\nimport poetry from './genres_images/poetry.png'\nimport humor from './genres_images/humor.png'\nimport drama from './genres_images/drama.png'\nimport bio from './genres_images/bio.png'\nimport fiction from './genres_images/fiction.png'\n\nconst genre_image = {\n    \"Drama\": drama,\n    \"Humor\": humor,\n    \"Poetry\": poetry,\n    \"Bio\": bio,\n    \"Fiction\": fiction\n}\n\n\nconst Home = ({ marketplace, nft }) => {\n    const [loading, setLoading] = useState(true)\n    const [items, setItems] = useState([])\n    const loadMarketplaceItems = async () => {\n        // Load all unsold items\n        const itemCount = await marketplace.itemCount()\n        let items = []\n        for (let i = 1; i <= itemCount; i++) {\n            const item = await marketplace.items(i)\n            if (!item.sold) {\n                // get uri url from nft contract\n                const uri = await nft.tokenURI(item.tokenId)\n                // use uri to fetch the nft metadata stored on ipfs \n                const response = await fetch(uri)\n                const metadata = await response.json()\n                // get total price of item (item price + fee)\n                const totalPrice = await marketplace.getTotalPrice(item.itemId)\n                console.log(\"metadata: \", metadata)\n                // Add item to items array\n                items.push({\n                    totalPrice,\n                    itemId: item.itemId,\n                    seller: item.seller,\n                    name: metadata.name,\n                    description: metadata.description,\n                    // image: metadata.image\n                    image: genre_image[metadata.genre],\n                    data_link: metadata.image\n                })\n                console.log(\"items \", items)\n                console.log(\"original items \", metadata.image)\n            }\n        }\n        setLoading(false)\n        setItems(items)\n    }\n\n    const buyMarketItem = async (item) => {\n        await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n        loadMarketplaceItems()\n    }\n\n    useEffect(() => {\n        loadMarketplaceItems()\n    }, [])\n    if (loading) return (\n        <main style={{ padding: \"1rem 0\" }}>\n            <h2>Loading...</h2>\n        </main>\n    )\n    return (\n        <div className=\"flex justify-center\">\n            {items.length > 0 ?\n                <div className=\"px-5 container\">\n                    <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n                        {items.map((item, idx) => (\n                            <Col key={idx} className=\"overflow-hidden\">\n                                <Card>\n                                    <Card.Img variant=\"top\" src={item.image} />\n                                    <Card.Body color=\"secondary\">\n                                        <Card.Title>{item.name}</Card.Title>\n                                        <Card.Text>\n                                            {item.description}\n                                        </Card.Text>\n                                    </Card.Body>\n                                    <Card.Footer>\n                                        <div className='d-grid'>\n                                            <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n                                                Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n                      </Button>\n                                        </div>\n                                    </Card.Footer>\n                                    <button\n                                        type=\"button\"\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            window.open(item.data_link, \"_blank\");\n                                        }}\n                                    > View Content</button>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                </div>\n                : (\n                    <main style={{ padding: \"1rem 0\" }}>\n                        <h2>No listed assets</h2>\n                    </main>\n                )}\n        </div>\n    );\n}\nexport default Home","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/Create.js",[],[],["47","48"],"/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/MyPurchases.js",["49"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\nimport poetry from './genres_images/poetry.png'\nimport humor from './genres_images/humor.png'\nimport drama from './genres_images/drama.png'\n\nconst genre_image = {\n    \"Drama\": drama,\n    \"Humor\": humor,\n    \"Poetry\": poetry\n}\n\nexport default function MyPurchases({ marketplace, nft, account }) {\n    const [loading, setLoading] = useState(true)\n    const [purchases, setPurchases] = useState([])\n    const loadPurchasedItems = async () => {\n        // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\n        const filter = marketplace.filters.Bought(null, null, null, null, null, account)\n        const results = await marketplace.queryFilter(filter)\n        //Fetch metadata of each nft and add that to listedItem object.\n        const purchases = await Promise.all(results.map(async i => {\n            // fetch arguments from each result\n            i = i.args\n            // get uri url from nft contract\n            const uri = await nft.tokenURI(i.tokenId)\n            // use uri to fetch the nft metadata stored on ipfs \n            const response = await fetch(uri)\n            const metadata = await response.json()\n            // get total price of item (item price + fee)\n            const totalPrice = await marketplace.getTotalPrice(i.itemId)\n            // define listed item object\n            let purchasedItem = {\n                totalPrice,\n                price: i.price,\n                itemId: i.itemId,\n                name: metadata.name,\n                description: metadata.description,\n                image: genre_image[metadata.genre],\n                data_link: metadata.image\n            }\n            return purchasedItem\n        }))\n        setLoading(false)\n        setPurchases(purchases)\n    }\n    useEffect(() => {\n        loadPurchasedItems()\n    }, [])\n    if (loading) return (\n        <main style={{ padding: \"1rem 0\" }}>\n            <h2>Loading...</h2>\n        </main>\n    )\n    return (\n        <div className=\"flex justify-center\">\n            {purchases.length > 0 ?\n                <div className=\"px-5 container\">\n                    <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n                        {purchases.map((item, idx) => (\n                            <Col key={idx} className=\"overflow-hidden\">\n                                <Card>\n                                    <Card.Img variant=\"top\" src={item.image} />\n                                    <Card.Body color=\"secondary\">\n                                        <Card.Title>{item.name}</Card.Title>\n                                        <Card.Text>\n                                            {item.description}\n                                        </Card.Text>\n                                    </Card.Body>\n                                    <button\n                                        type=\"button\"\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            window.open(item.data_link, \"_blank\");\n                                        }}\n                                    > View Content</button>\n                                    <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                </div>\n                : (\n                    <main style={{ padding: \"1rem 0\" }}>\n                        <h2>No purchases</h2>\n                    </main>\n                )}\n        </div>\n    );\n}","/Users/huyangjinan/Columbia/Blockchain/FinalProject/ELEN6883-final-project/src/frontend/components/MyListedItems.js",["50","51"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\nimport poetry from './genres_images/poetry.png'\nimport humor from './genres_images/humor.png'\nimport drama from './genres_images/drama.png'\nimport bio from './genres_images/bio.png'\nimport fiction from './genres_images/fiction.png'\n\nconst genre_image = {\n  \"Drama\": drama,\n  \"Humor\": humor,\n  \"Poetry\": poetry,\n  \"Bio\": bio,\n  \"Fiction\": fiction\n}\n\nfunction renderSoldItems(items) {\n  return (\n    <>\n      <h2>Sold</h2>\n      <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n        {items.map((item, idx) => (\n          <Col key={idx} className=\"overflow-hidden\">\n            <Card>\n              <Card.Img variant=\"top\" src={item.image} />\n              <Card.Footer>\n                For {ethers.utils.formatEther(item.totalPrice)} ETH - Recieved {ethers.utils.formatEther(item.price)} ETH\n              </Card.Footer>\n              <Card.Body color=\"secondary\">\n                <Card.Title>{item.name}</Card.Title>\n                <Card.Text>\n                  {item.description}\n                </Card.Text>\n              </Card.Body>\n              <button\n                type=\"button\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  window.open(item.data_link, \"_blank\");\n                }}\n              > View Content</button>\n\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    </>\n  )\n}\n\n\nexport default function MyListedItems({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [listedItems, setListedItems] = useState([])\n  const [soldItems, setSoldItems] = useState([])\n  const loadListedItems = async () => {\n    // Load all sold items that the user listed\n    const itemCount = await marketplace.itemCount()\n    let listedItems = []\n    let soldItems = []\n    for (let indx = 1; indx <= itemCount; indx++) {\n      const i = await marketplace.items(indx)\n      if (i.seller.toLowerCase() === account) {\n        // get uri url from nft contract\n        const uri = await nft.tokenURI(i.tokenId)\n        // use uri to fetch the nft metadata stored on ipfs \n        const response = await fetch(uri)\n        const metadata = await response.json()\n        // get total price of item (item price + fee)\n        const totalPrice = await marketplace.getTotalPrice(i.itemId)\n        // define listed item object\n        let item = {\n          totalPrice,\n          price: i.price,\n          itemId: i.itemId,\n          name: metadata.name,\n          description: metadata.description,\n          image: genre_image[metadata.genre],\n          data_link: metadata.image\n        }\n        listedItems.push(item)\n        // Add listed item to sold items array if sold\n        if (i.sold) soldItems.push(item)\n      }\n    }\n    setLoading(false)\n    setListedItems(listedItems)\n    setSoldItems(soldItems)\n  }\n  useEffect(() => {\n    loadListedItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\">\n      {listedItems.length > 0 ?\n        <div className=\"px-5 py-3 container\">\n          <h2>Listed</h2>\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n            {listedItems.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Body color=\"secondary\">\n                    <Card.Title>{item.name}</Card.Title>\n                    <Card.Text>\n                      {item.description}\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                  <button\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      window.open(item.data_link, \"_blank\");\n                    }}\n                  > View Content</button>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n          {soldItems.length > 0 && renderSoldItems(soldItems)}\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No listed assets</h2>\n          </main>\n        )\n      }\n    </div >\n  );\n}",{"ruleId":"52","severity":1,"message":"53","line":63,"column":8,"nodeType":"54","endLine":63,"endColumn":10,"suggestions":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"52","severity":1,"message":"60","line":49,"column":8,"nodeType":"54","endLine":49,"endColumn":10,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":3,"column":26,"nodeType":"64","messageId":"65","endLine":3,"endColumn":32},{"ruleId":"52","severity":1,"message":"66","line":93,"column":6,"nodeType":"54","endLine":93,"endColumn":8,"suggestions":"67"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMarketplaceItems'. Either include it or remove the dependency array.","ArrayExpression",["68"],"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"React Hook useEffect has a missing dependency: 'loadPurchasedItems'. Either include it or remove the dependency array.",["71"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadListedItems'. Either include it or remove the dependency array.",["72"],{"desc":"73","fix":"74"},"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [loadMarketplaceItems]",{"range":"79","text":"80"},"Update the dependencies array to be: [loadPurchasedItems]",{"range":"81","text":"82"},"Update the dependencies array to be: [loadListedItems]",{"range":"83","text":"84"},[2266,2268],"[loadMarketplaceItems]",[1960,1962],"[loadPurchasedItems]",[2983,2985],"[loadListedItems]"]